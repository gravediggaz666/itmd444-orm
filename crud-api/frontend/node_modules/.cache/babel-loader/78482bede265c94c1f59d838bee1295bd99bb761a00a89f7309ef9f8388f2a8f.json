{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLRGBA = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst RGBA_REGEX = /^rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!RGBA_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid RGBA color: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLRGBA = new graphql_1.GraphQLScalarType({\n  name: `RGBA`,\n  description: `A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as RGBA colors but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'RGBA',\n      type: 'string',\n      pattern: RGBA_REGEX.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLRGBA","graphql_1","require","error_js_1","RGBA_REGEX","validate","ast","createGraphQLError","nodes","undefined","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/RGBA.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLRGBA = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst RGBA_REGEX = /^rgba\\(\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(%?)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*\\.\\d+(?=%))(\\2)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)$/;\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (!RGBA_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid RGBA color: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nexports.GraphQLRGBA = new graphql_1.GraphQLScalarType({\n    name: `RGBA`,\n    description: `A field whose value is a CSS RGBA color: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba().`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as RGBA colors but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'RGBA',\n            type: 'string',\n            pattern: RGBA_REGEX.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,UAAU,GAAG,yIAAyI;AAC5J,MAAMC,QAAQ,GAAGA,CAACN,KAAK,EAAEO,GAAG,KAAK;EAC7B,IAAI,OAAOP,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,wBAAuBR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,IAAI,CAACL,UAAU,CAACM,IAAI,CAACX,KAAK,CAAC,EAAE;IACzB,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,oCAAmCR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC3H;EACA,OAAOV,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,WAAW,GAAG,IAAIC,SAAS,CAACU,iBAAiB,CAAC;EAClDC,IAAI,EAAG,MAAK;EACZC,WAAW,EAAG,yHAAwH;EACtIC,SAASA,CAACf,KAAK,EAAE;IACb,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDgB,UAAUA,CAAChB,KAAK,EAAE;IACd,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDiB,YAAYA,CAACV,GAAG,EAAE;IACd,IAAIA,GAAG,CAACW,IAAI,KAAKhB,SAAS,CAACiB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEhB,UAAU,CAACI,kBAAkB,EAAG,uDAAsDD,GAAG,CAACW,IAAK,EAAC,EAAE;QACxGT,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EACnC,CAAC;EACDc,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAErB,UAAU,CAACsB;IACxB;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}