{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLIBAN = void 0;\n// Based on https://github.com/arhs/iban.js\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n/* These are IBAN the specifications for all countries using IBAN\nThe key is the countrycode, the second item is the length of the IBAN,\nThe third item is the structure of the underlying BBAN (for validation and formatting)\n*/\nconst IBAN_SPECIFICATIONS = {\n  AD: {\n    length: 24,\n    structure: 'F04F04A12',\n    example: 'AD1200012030200359100100'\n  },\n  AE: {\n    length: 23,\n    structure: 'F03F16',\n    example: 'AE070331234567890123456'\n  },\n  AL: {\n    length: 28,\n    structure: 'F08A16',\n    example: 'AL47212110090000000235698741'\n  },\n  AO: {\n    length: 25,\n    structure: 'F21',\n    example: 'AO69123456789012345678901'\n  },\n  AT: {\n    length: 20,\n    structure: 'F05F11',\n    example: 'AT611904300234573201'\n  },\n  AZ: {\n    length: 28,\n    structure: 'U04A20',\n    example: 'AZ21NABZ00000000137010001944'\n  },\n  BA: {\n    length: 20,\n    structure: 'F03F03F08F02',\n    example: 'BA391290079401028494'\n  },\n  BE: {\n    length: 16,\n    structure: 'F03F07F02',\n    example: 'BE68539007547034'\n  },\n  BF: {\n    length: 27,\n    structure: 'F23',\n    example: 'BF2312345678901234567890123'\n  },\n  BG: {\n    length: 22,\n    structure: 'U04F04F02A08',\n    example: 'BG80BNBG96611020345678'\n  },\n  BH: {\n    length: 22,\n    structure: 'U04A14',\n    example: 'BH67BMAG00001299123456'\n  },\n  BI: {\n    length: 16,\n    structure: 'F12',\n    example: 'BI41123456789012'\n  },\n  BJ: {\n    length: 28,\n    structure: 'F24',\n    example: 'BJ39123456789012345678901234'\n  },\n  BR: {\n    length: 29,\n    structure: 'F08F05F10U01A01',\n    example: 'BR9700360305000010009795493P1'\n  },\n  BY: {\n    length: 28,\n    structure: 'A04F04A16',\n    example: 'BY13NBRB3600900000002Z00AB00'\n  },\n  CH: {\n    length: 21,\n    structure: 'F05A12',\n    example: 'CH9300762011623852957'\n  },\n  CI: {\n    length: 28,\n    structure: 'U02F22',\n    example: 'CI70CI1234567890123456789012'\n  },\n  CM: {\n    length: 27,\n    structure: 'F23',\n    example: 'CM9012345678901234567890123'\n  },\n  CR: {\n    length: 22,\n    structure: 'F04F14',\n    example: 'CR72012300000171549015'\n  },\n  CV: {\n    length: 25,\n    structure: 'F21',\n    example: 'CV30123456789012345678901'\n  },\n  CY: {\n    length: 28,\n    structure: 'F03F05A16',\n    example: 'CY17002001280000001200527600'\n  },\n  CZ: {\n    length: 24,\n    structure: 'F04F06F10',\n    example: 'CZ6508000000192000145399'\n  },\n  DE: {\n    length: 22,\n    structure: 'F08F10',\n    example: 'DE89370400440532013000'\n  },\n  DK: {\n    length: 18,\n    structure: 'F04F09F01',\n    example: 'DK5000400440116243'\n  },\n  DO: {\n    length: 28,\n    structure: 'U04F20',\n    example: 'DO28BAGR00000001212453611324'\n  },\n  DZ: {\n    length: 24,\n    structure: 'F20',\n    example: 'DZ8612345678901234567890'\n  },\n  EE: {\n    length: 20,\n    structure: 'F02F02F11F01',\n    example: 'EE382200221020145685'\n  },\n  ES: {\n    length: 24,\n    structure: 'F04F04F01F01F10',\n    example: 'ES9121000418450200051332'\n  },\n  FI: {\n    length: 18,\n    structure: 'F06F07F01',\n    example: 'FI2112345600000785'\n  },\n  FO: {\n    length: 18,\n    structure: 'F04F09F01',\n    example: 'FO6264600001631634'\n  },\n  FR: {\n    length: 27,\n    structure: 'F05F05A11F02',\n    example: 'FR1420041010050500013M02606'\n  },\n  GB: {\n    length: 22,\n    structure: 'U04F06F08',\n    example: 'GB29NWBK60161331926819'\n  },\n  GE: {\n    length: 22,\n    structure: 'U02F16',\n    example: 'GE29NB0000000101904917'\n  },\n  GI: {\n    length: 23,\n    structure: 'U04A15',\n    example: 'GI75NWBK000000007099453'\n  },\n  GL: {\n    length: 18,\n    structure: 'F04F09F01',\n    example: 'GL8964710001000206'\n  },\n  GR: {\n    length: 27,\n    structure: 'F03F04A16',\n    example: 'GR1601101250000000012300695'\n  },\n  GT: {\n    length: 28,\n    structure: 'A04A20',\n    example: 'GT82TRAJ01020000001210029690'\n  },\n  HR: {\n    length: 21,\n    structure: 'F07F10',\n    example: 'HR1210010051863000160'\n  },\n  HU: {\n    length: 28,\n    structure: 'F03F04F01F15F01',\n    example: 'HU42117730161111101800000000'\n  },\n  IE: {\n    length: 22,\n    structure: 'U04F06F08',\n    example: 'IE29AIBK93115212345678'\n  },\n  IL: {\n    length: 23,\n    structure: 'F03F03F13',\n    example: 'IL620108000000099999999'\n  },\n  IS: {\n    length: 26,\n    structure: 'F04F02F06F10',\n    example: 'IS140159260076545510730339'\n  },\n  IT: {\n    length: 27,\n    structure: 'U01F05F05A12',\n    example: 'IT60X0542811101000000123456'\n  },\n  IQ: {\n    length: 23,\n    structure: 'U04F03A12',\n    example: 'IQ98NBIQ850123456789012'\n  },\n  IR: {\n    length: 26,\n    structure: 'F22',\n    example: 'IR861234568790123456789012'\n  },\n  JO: {\n    length: 30,\n    structure: 'A04F22',\n    example: 'JO15AAAA1234567890123456789012'\n  },\n  KW: {\n    length: 30,\n    structure: 'U04A22',\n    example: 'KW81CBKU0000000000001234560101'\n  },\n  KZ: {\n    length: 20,\n    structure: 'F03A13',\n    example: 'KZ86125KZT5004100100'\n  },\n  LB: {\n    length: 28,\n    structure: 'F04A20',\n    example: 'LB62099900000001001901229114'\n  },\n  LC: {\n    length: 32,\n    structure: 'U04F24',\n    example: 'LC07HEMM000100010012001200013015'\n  },\n  LI: {\n    length: 21,\n    structure: 'F05A12',\n    example: 'LI21088100002324013AA'\n  },\n  LT: {\n    length: 20,\n    structure: 'F05F11',\n    example: 'LT121000011101001000'\n  },\n  LU: {\n    length: 20,\n    structure: 'F03A13',\n    example: 'LU280019400644750000'\n  },\n  LV: {\n    length: 21,\n    structure: 'U04A13',\n    example: 'LV80BANK0000435195001'\n  },\n  MC: {\n    length: 27,\n    structure: 'F05F05A11F02',\n    example: 'MC5811222000010123456789030'\n  },\n  MD: {\n    length: 24,\n    structure: 'U02A18',\n    example: 'MD24AG000225100013104168'\n  },\n  ME: {\n    length: 22,\n    structure: 'F03F13F02',\n    example: 'ME25505000012345678951'\n  },\n  MG: {\n    length: 27,\n    structure: 'F23',\n    example: 'MG1812345678901234567890123'\n  },\n  MK: {\n    length: 19,\n    structure: 'F03A10F02',\n    example: 'MK07250120000058984'\n  },\n  ML: {\n    length: 28,\n    structure: 'U01F23',\n    example: 'ML15A12345678901234567890123'\n  },\n  MR: {\n    length: 27,\n    structure: 'F05F05F11F02',\n    example: 'MR1300020001010000123456753'\n  },\n  MT: {\n    length: 31,\n    structure: 'U04F05A18',\n    example: 'MT84MALT011000012345MTLCAST001S'\n  },\n  MU: {\n    length: 30,\n    structure: 'U04F02F02F12F03U03',\n    example: 'MU17BOMM0101101030300200000MUR'\n  },\n  MZ: {\n    length: 25,\n    structure: 'F21',\n    example: 'MZ25123456789012345678901'\n  },\n  NL: {\n    length: 18,\n    structure: 'U04F10',\n    example: 'NL91ABNA0417164300'\n  },\n  NO: {\n    length: 15,\n    structure: 'F04F06F01',\n    example: 'NO9386011117947'\n  },\n  PK: {\n    length: 24,\n    structure: 'U04A16',\n    example: 'PK36SCBL0000001123456702'\n  },\n  PL: {\n    length: 28,\n    structure: 'F08F16',\n    example: 'PL61109010140000071219812874'\n  },\n  PS: {\n    length: 29,\n    structure: 'U04A21',\n    example: 'PS92PALS000000000400123456702'\n  },\n  PT: {\n    length: 25,\n    structure: 'F04F04F11F02',\n    example: 'PT50000201231234567890154'\n  },\n  QA: {\n    length: 29,\n    structure: 'U04A21',\n    example: 'QA30AAAA123456789012345678901'\n  },\n  RO: {\n    length: 24,\n    structure: 'U04A16',\n    example: 'RO49AAAA1B31007593840000'\n  },\n  RS: {\n    length: 22,\n    structure: 'F03F13F02',\n    example: 'RS35260005601001611379'\n  },\n  SA: {\n    length: 24,\n    structure: 'F02A18',\n    example: 'SA0380000000608010167519'\n  },\n  SC: {\n    length: 31,\n    structure: 'U04F04F16U03',\n    example: 'SC18SSCB11010000000000001497USD'\n  },\n  SE: {\n    length: 24,\n    structure: 'F03F16F01',\n    example: 'SE4550000000058398257466'\n  },\n  SI: {\n    length: 19,\n    structure: 'F05F08F02',\n    example: 'SI56263300012039086'\n  },\n  SK: {\n    length: 24,\n    structure: 'F04F06F10',\n    example: 'SK3112000000198742637541'\n  },\n  SM: {\n    length: 27,\n    structure: 'U01F05F05A12',\n    example: 'SM86U0322509800000000270100'\n  },\n  SN: {\n    length: 28,\n    structure: 'U01F23',\n    example: 'SN52A12345678901234567890123'\n  },\n  ST: {\n    length: 25,\n    structure: 'F08F11F02',\n    example: 'ST68000100010051845310112'\n  },\n  SV: {\n    length: 28,\n    structure: 'U04F20',\n    example: 'SV62CENR00000000000000700025'\n  },\n  TL: {\n    length: 23,\n    structure: 'F03F14F02',\n    example: 'TL380080012345678910157'\n  },\n  TN: {\n    length: 24,\n    structure: 'F02F03F13F02',\n    example: 'TN5910006035183598478831'\n  },\n  TR: {\n    length: 26,\n    structure: 'F05F01A16',\n    example: 'TR330006100519786457841326'\n  },\n  UA: {\n    length: 29,\n    structure: 'F25',\n    example: 'UA511234567890123456789012345'\n  },\n  VA: {\n    length: 22,\n    structure: 'F18',\n    example: 'VA59001123000012345678'\n  },\n  VG: {\n    length: 24,\n    structure: 'U04F16',\n    example: 'VG96VPVG0000012345678901'\n  },\n  XK: {\n    length: 20,\n    structure: 'F04F10F02',\n    example: 'XK051212012345678906'\n  }\n};\nconst A = 'A'.charCodeAt(0);\nconst Z = 'Z'.charCodeAt(0);\nfunction parseStructure(structure) {\n  // split in blocks of 3 chars\n  const regex = structure.match(/(.{3})/g).map(function (block) {\n    // parse each structure block (1-char + 2-digits)\n    let format;\n    const pattern = block.slice(0, 1);\n    const repeats = parseInt(block.slice(1), 10);\n    switch (pattern) {\n      case 'A':\n        format = '0-9A-Za-z';\n        break;\n      case 'B':\n        format = '0-9A-Z';\n        break;\n      case 'C':\n        format = 'A-Za-z';\n        break;\n      case 'F':\n        format = '0-9';\n        break;\n      case 'L':\n        format = 'a-z';\n        break;\n      case 'U':\n        format = 'A-Z';\n        break;\n      case 'W':\n        format = '0-9a-z';\n        break;\n    }\n    return '([' + format + ']{' + repeats + '})';\n  });\n  return /*#__PURE__*/new RegExp('^' + regex.join('') + '$');\n}\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n */\nfunction iso13616Prepare(iban) {\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    const code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    } else {\n      return n;\n    }\n  }).join('');\n}\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @param iban\n * @returns {number}\n */\nfunction iso7064Mod97_10(iban) {\n  let remainder = iban;\n  let block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n  return parseInt(remainder, 10) % 97;\n}\nfunction _testIBAN(iban, countryCode, structure) {\n  return structure.length === iban.length && countryCode === iban.slice(0, 2) && parseStructure(structure.structure).test(iban.slice(4)) && iso7064Mod97_10(iso13616Prepare(iban)) === 1;\n}\nfunction validate(iban) {\n  // Make uppercase and remove whitespace for matching\n  iban = iban.toUpperCase().replace(/\\s+/g, '');\n  const countryCode = iban.slice(0, 2);\n  const countryStructure = IBAN_SPECIFICATIONS[countryCode];\n  return !!countryStructure && _testIBAN(iban, countryCode, countryStructure);\n}\nexports.GraphQLIBAN = new graphql_1.GraphQLScalarType({\n  name: `IBAN`,\n  description: `A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.`,\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!validate(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${value}`);\n    }\n    return value;\n  },\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!validate(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${value}`);\n    }\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IBANs but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (!validate(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${ast.value}`);\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      type: 'string'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLIBAN","graphql_1","require","error_js_1","IBAN_SPECIFICATIONS","AD","length","structure","example","AE","AL","AO","AT","AZ","BA","BE","BF","BG","BH","BI","BJ","BR","BY","CH","CI","CM","CR","CV","CY","CZ","DE","DK","DO","DZ","EE","ES","FI","FO","FR","GB","GE","GI","GL","GR","GT","HR","HU","IE","IL","IS","IT","IQ","IR","JO","KW","KZ","LB","LC","LI","LT","LU","LV","MC","MD","ME","MG","MK","ML","MR","MT","MU","MZ","NL","NO","PK","PL","PS","PT","QA","RO","RS","SA","SC","SE","SI","SK","SM","SN","ST","SV","TL","TN","TR","UA","VA","VG","XK","A","charCodeAt","Z","parseStructure","regex","match","map","block","format","pattern","slice","repeats","parseInt","RegExp","join","iso13616Prepare","iban","toUpperCase","substr","split","n","code","iso7064Mod97_10","remainder","_testIBAN","countryCode","test","validate","replace","countryStructure","GraphQLScalarType","name","description","serialize","createGraphQLError","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","type"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/IBAN.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLIBAN = void 0;\n// Based on https://github.com/arhs/iban.js\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n/* These are IBAN the specifications for all countries using IBAN\nThe key is the countrycode, the second item is the length of the IBAN,\nThe third item is the structure of the underlying BBAN (for validation and formatting)\n*/\nconst IBAN_SPECIFICATIONS = {\n    AD: {\n        length: 24,\n        structure: 'F04F04A12',\n        example: 'AD1200012030200359100100',\n    },\n    AE: { length: 23, structure: 'F03F16', example: 'AE070331234567890123456' },\n    AL: {\n        length: 28,\n        structure: 'F08A16',\n        example: 'AL47212110090000000235698741',\n    },\n    AO: { length: 25, structure: 'F21', example: 'AO69123456789012345678901' },\n    AT: { length: 20, structure: 'F05F11', example: 'AT611904300234573201' },\n    AZ: {\n        length: 28,\n        structure: 'U04A20',\n        example: 'AZ21NABZ00000000137010001944',\n    },\n    BA: {\n        length: 20,\n        structure: 'F03F03F08F02',\n        example: 'BA391290079401028494',\n    },\n    BE: { length: 16, structure: 'F03F07F02', example: 'BE68539007547034' },\n    BF: { length: 27, structure: 'F23', example: 'BF2312345678901234567890123' },\n    BG: {\n        length: 22,\n        structure: 'U04F04F02A08',\n        example: 'BG80BNBG96611020345678',\n    },\n    BH: { length: 22, structure: 'U04A14', example: 'BH67BMAG00001299123456' },\n    BI: { length: 16, structure: 'F12', example: 'BI41123456789012' },\n    BJ: { length: 28, structure: 'F24', example: 'BJ39123456789012345678901234' },\n    BR: {\n        length: 29,\n        structure: 'F08F05F10U01A01',\n        example: 'BR9700360305000010009795493P1',\n    },\n    BY: {\n        length: 28,\n        structure: 'A04F04A16',\n        example: 'BY13NBRB3600900000002Z00AB00',\n    },\n    CH: { length: 21, structure: 'F05A12', example: 'CH9300762011623852957' },\n    CI: {\n        length: 28,\n        structure: 'U02F22',\n        example: 'CI70CI1234567890123456789012',\n    },\n    CM: { length: 27, structure: 'F23', example: 'CM9012345678901234567890123' },\n    CR: { length: 22, structure: 'F04F14', example: 'CR72012300000171549015' },\n    CV: { length: 25, structure: 'F21', example: 'CV30123456789012345678901' },\n    CY: {\n        length: 28,\n        structure: 'F03F05A16',\n        example: 'CY17002001280000001200527600',\n    },\n    CZ: {\n        length: 24,\n        structure: 'F04F06F10',\n        example: 'CZ6508000000192000145399',\n    },\n    DE: { length: 22, structure: 'F08F10', example: 'DE89370400440532013000' },\n    DK: { length: 18, structure: 'F04F09F01', example: 'DK5000400440116243' },\n    DO: {\n        length: 28,\n        structure: 'U04F20',\n        example: 'DO28BAGR00000001212453611324',\n    },\n    DZ: { length: 24, structure: 'F20', example: 'DZ8612345678901234567890' },\n    EE: {\n        length: 20,\n        structure: 'F02F02F11F01',\n        example: 'EE382200221020145685',\n    },\n    ES: {\n        length: 24,\n        structure: 'F04F04F01F01F10',\n        example: 'ES9121000418450200051332',\n    },\n    FI: { length: 18, structure: 'F06F07F01', example: 'FI2112345600000785' },\n    FO: { length: 18, structure: 'F04F09F01', example: 'FO6264600001631634' },\n    FR: {\n        length: 27,\n        structure: 'F05F05A11F02',\n        example: 'FR1420041010050500013M02606',\n    },\n    GB: { length: 22, structure: 'U04F06F08', example: 'GB29NWBK60161331926819' },\n    GE: { length: 22, structure: 'U02F16', example: 'GE29NB0000000101904917' },\n    GI: { length: 23, structure: 'U04A15', example: 'GI75NWBK000000007099453' },\n    GL: { length: 18, structure: 'F04F09F01', example: 'GL8964710001000206' },\n    GR: {\n        length: 27,\n        structure: 'F03F04A16',\n        example: 'GR1601101250000000012300695',\n    },\n    GT: {\n        length: 28,\n        structure: 'A04A20',\n        example: 'GT82TRAJ01020000001210029690',\n    },\n    HR: { length: 21, structure: 'F07F10', example: 'HR1210010051863000160' },\n    HU: {\n        length: 28,\n        structure: 'F03F04F01F15F01',\n        example: 'HU42117730161111101800000000',\n    },\n    IE: { length: 22, structure: 'U04F06F08', example: 'IE29AIBK93115212345678' },\n    IL: {\n        length: 23,\n        structure: 'F03F03F13',\n        example: 'IL620108000000099999999',\n    },\n    IS: {\n        length: 26,\n        structure: 'F04F02F06F10',\n        example: 'IS140159260076545510730339',\n    },\n    IT: {\n        length: 27,\n        structure: 'U01F05F05A12',\n        example: 'IT60X0542811101000000123456',\n    },\n    IQ: {\n        length: 23,\n        structure: 'U04F03A12',\n        example: 'IQ98NBIQ850123456789012',\n    },\n    IR: { length: 26, structure: 'F22', example: 'IR861234568790123456789012' },\n    JO: {\n        length: 30,\n        structure: 'A04F22',\n        example: 'JO15AAAA1234567890123456789012',\n    },\n    KW: {\n        length: 30,\n        structure: 'U04A22',\n        example: 'KW81CBKU0000000000001234560101',\n    },\n    KZ: { length: 20, structure: 'F03A13', example: 'KZ86125KZT5004100100' },\n    LB: {\n        length: 28,\n        structure: 'F04A20',\n        example: 'LB62099900000001001901229114',\n    },\n    LC: {\n        length: 32,\n        structure: 'U04F24',\n        example: 'LC07HEMM000100010012001200013015',\n    },\n    LI: { length: 21, structure: 'F05A12', example: 'LI21088100002324013AA' },\n    LT: { length: 20, structure: 'F05F11', example: 'LT121000011101001000' },\n    LU: { length: 20, structure: 'F03A13', example: 'LU280019400644750000' },\n    LV: { length: 21, structure: 'U04A13', example: 'LV80BANK0000435195001' },\n    MC: {\n        length: 27,\n        structure: 'F05F05A11F02',\n        example: 'MC5811222000010123456789030',\n    },\n    MD: { length: 24, structure: 'U02A18', example: 'MD24AG000225100013104168' },\n    ME: { length: 22, structure: 'F03F13F02', example: 'ME25505000012345678951' },\n    MG: { length: 27, structure: 'F23', example: 'MG1812345678901234567890123' },\n    MK: { length: 19, structure: 'F03A10F02', example: 'MK07250120000058984' },\n    ML: {\n        length: 28,\n        structure: 'U01F23',\n        example: 'ML15A12345678901234567890123',\n    },\n    MR: {\n        length: 27,\n        structure: 'F05F05F11F02',\n        example: 'MR1300020001010000123456753',\n    },\n    MT: {\n        length: 31,\n        structure: 'U04F05A18',\n        example: 'MT84MALT011000012345MTLCAST001S',\n    },\n    MU: {\n        length: 30,\n        structure: 'U04F02F02F12F03U03',\n        example: 'MU17BOMM0101101030300200000MUR',\n    },\n    MZ: { length: 25, structure: 'F21', example: 'MZ25123456789012345678901' },\n    NL: { length: 18, structure: 'U04F10', example: 'NL91ABNA0417164300' },\n    NO: { length: 15, structure: 'F04F06F01', example: 'NO9386011117947' },\n    PK: { length: 24, structure: 'U04A16', example: 'PK36SCBL0000001123456702' },\n    PL: {\n        length: 28,\n        structure: 'F08F16',\n        example: 'PL61109010140000071219812874',\n    },\n    PS: {\n        length: 29,\n        structure: 'U04A21',\n        example: 'PS92PALS000000000400123456702',\n    },\n    PT: {\n        length: 25,\n        structure: 'F04F04F11F02',\n        example: 'PT50000201231234567890154',\n    },\n    QA: {\n        length: 29,\n        structure: 'U04A21',\n        example: 'QA30AAAA123456789012345678901',\n    },\n    RO: { length: 24, structure: 'U04A16', example: 'RO49AAAA1B31007593840000' },\n    RS: { length: 22, structure: 'F03F13F02', example: 'RS35260005601001611379' },\n    SA: { length: 24, structure: 'F02A18', example: 'SA0380000000608010167519' },\n    SC: {\n        length: 31,\n        structure: 'U04F04F16U03',\n        example: 'SC18SSCB11010000000000001497USD',\n    },\n    SE: {\n        length: 24,\n        structure: 'F03F16F01',\n        example: 'SE4550000000058398257466',\n    },\n    SI: { length: 19, structure: 'F05F08F02', example: 'SI56263300012039086' },\n    SK: {\n        length: 24,\n        structure: 'F04F06F10',\n        example: 'SK3112000000198742637541',\n    },\n    SM: {\n        length: 27,\n        structure: 'U01F05F05A12',\n        example: 'SM86U0322509800000000270100',\n    },\n    SN: {\n        length: 28,\n        structure: 'U01F23',\n        example: 'SN52A12345678901234567890123',\n    },\n    ST: {\n        length: 25,\n        structure: 'F08F11F02',\n        example: 'ST68000100010051845310112',\n    },\n    SV: {\n        length: 28,\n        structure: 'U04F20',\n        example: 'SV62CENR00000000000000700025',\n    },\n    TL: {\n        length: 23,\n        structure: 'F03F14F02',\n        example: 'TL380080012345678910157',\n    },\n    TN: {\n        length: 24,\n        structure: 'F02F03F13F02',\n        example: 'TN5910006035183598478831',\n    },\n    TR: {\n        length: 26,\n        structure: 'F05F01A16',\n        example: 'TR330006100519786457841326',\n    },\n    UA: {\n        length: 29,\n        structure: 'F25',\n        example: 'UA511234567890123456789012345',\n    },\n    VA: { length: 22, structure: 'F18', example: 'VA59001123000012345678' },\n    VG: { length: 24, structure: 'U04F16', example: 'VG96VPVG0000012345678901' },\n    XK: { length: 20, structure: 'F04F10F02', example: 'XK051212012345678906' },\n};\nconst A = 'A'.charCodeAt(0);\nconst Z = 'Z'.charCodeAt(0);\nfunction parseStructure(structure) {\n    // split in blocks of 3 chars\n    const regex = structure.match(/(.{3})/g).map(function (block) {\n        // parse each structure block (1-char + 2-digits)\n        let format;\n        const pattern = block.slice(0, 1);\n        const repeats = parseInt(block.slice(1), 10);\n        switch (pattern) {\n            case 'A':\n                format = '0-9A-Za-z';\n                break;\n            case 'B':\n                format = '0-9A-Z';\n                break;\n            case 'C':\n                format = 'A-Za-z';\n                break;\n            case 'F':\n                format = '0-9';\n                break;\n            case 'L':\n                format = 'a-z';\n                break;\n            case 'U':\n                format = 'A-Z';\n                break;\n            case 'W':\n                format = '0-9a-z';\n                break;\n        }\n        return '([' + format + ']{' + repeats + '})';\n    });\n    return /*#__PURE__*/ new RegExp('^' + regex.join('') + '$');\n}\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n */\nfunction iso13616Prepare(iban) {\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0, 4);\n    return iban\n        .split('')\n        .map(function (n) {\n        const code = n.charCodeAt(0);\n        if (code >= A && code <= Z) {\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        }\n        else {\n            return n;\n        }\n    })\n        .join('');\n}\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @param iban\n * @returns {number}\n */\nfunction iso7064Mod97_10(iban) {\n    let remainder = iban;\n    let block;\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9);\n        remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);\n    }\n    return parseInt(remainder, 10) % 97;\n}\nfunction _testIBAN(iban, countryCode, structure) {\n    return (structure.length === iban.length &&\n        countryCode === iban.slice(0, 2) &&\n        parseStructure(structure.structure).test(iban.slice(4)) &&\n        iso7064Mod97_10(iso13616Prepare(iban)) === 1);\n}\nfunction validate(iban) {\n    // Make uppercase and remove whitespace for matching\n    iban = iban.toUpperCase().replace(/\\s+/g, '');\n    const countryCode = iban.slice(0, 2);\n    const countryStructure = IBAN_SPECIFICATIONS[countryCode];\n    return !!countryStructure && _testIBAN(iban, countryCode, countryStructure);\n}\nexports.GraphQLIBAN = new graphql_1.GraphQLScalarType({\n    name: `IBAN`,\n    description: `A field whose value is an International Bank Account Number (IBAN): https://en.wikipedia.org/wiki/International_Bank_Account_Number.`,\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!validate(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${value}`);\n        }\n        return value;\n    },\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!validate(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${value}`);\n        }\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IBANs but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        if (!validate(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid IBAN: ${ast.value}`);\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            type: 'string',\n        },\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}