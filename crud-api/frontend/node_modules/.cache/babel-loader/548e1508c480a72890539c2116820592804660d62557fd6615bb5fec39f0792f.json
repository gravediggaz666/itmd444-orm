{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLPhoneNumber = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst PHONE_NUMBER_REGEX = /^\\+[1-9]\\d{6,14}$/;\nexports.GraphQLPhoneNumber = new graphql_1.GraphQLScalarType({\n  name: 'PhoneNumber',\n  description: 'A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.',\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!PHONE_NUMBER_REGEX.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\n    }\n    return value;\n  },\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!PHONE_NUMBER_REGEX.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\n    }\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as phone numbers but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (!PHONE_NUMBER_REGEX.test(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${ast.value}`, {\n        nodes: ast\n      });\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'PhoneNumber',\n      type: 'string',\n      pattern: PHONE_NUMBER_REGEX.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLPhoneNumber","graphql_1","require","error_js_1","PHONE_NUMBER_REGEX","GraphQLScalarType","name","description","serialize","createGraphQLError","test","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/PhoneNumber.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLPhoneNumber = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst PHONE_NUMBER_REGEX = /^\\+[1-9]\\d{6,14}$/;\nexports.GraphQLPhoneNumber = new graphql_1.GraphQLScalarType({\n    name: 'PhoneNumber',\n    description: 'A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.',\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!PHONE_NUMBER_REGEX.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\n        }\n        return value;\n    },\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!PHONE_NUMBER_REGEX.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${value}`);\n        }\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as phone numbers but got a: ${ast.kind}`, { nodes: ast });\n        }\n        if (!PHONE_NUMBER_REGEX.test(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid phone number of the form +17895551234 (7-15 digits): ${ast.value}`, { nodes: ast });\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'PhoneNumber',\n            type: 'string',\n            pattern: PHONE_NUMBER_REGEX.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,kBAAkB,GAAG,mBAAmB;AAC9CN,OAAO,CAACE,kBAAkB,GAAG,IAAIC,SAAS,CAACI,iBAAiB,CAAC;EACzDC,IAAI,EAAE,aAAa;EACnBC,WAAW,EAAE,iJAAiJ;EAC9JC,SAASA,CAACT,KAAK,EAAE;IACb,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACM,kBAAkB,EAAG,wBAAuBV,KAAM,EAAC,CAAC;IAC7E;IACA,IAAI,CAACK,kBAAkB,CAACM,IAAI,CAACX,KAAK,CAAC,EAAE;MACjC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACM,kBAAkB,EAAG,6EAA4EV,KAAM,EAAC,CAAC;IAClI;IACA,OAAOA,KAAK;EAChB,CAAC;EACDY,UAAUA,CAACZ,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACM,kBAAkB,EAAG,wBAAuBV,KAAM,EAAC,CAAC;IAC7E;IACA,IAAI,CAACK,kBAAkB,CAACM,IAAI,CAACX,KAAK,CAAC,EAAE;MACjC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACM,kBAAkB,EAAG,6EAA4EV,KAAM,EAAC,CAAC;IAClI;IACA,OAAOA,KAAK;EAChB,CAAC;EACDa,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKb,SAAS,CAACc,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEb,UAAU,CAACM,kBAAkB,EAAG,yDAAwDI,GAAG,CAACC,IAAK,EAAC,EAAE;QAAEG,KAAK,EAAEJ;MAAI,CAAC,CAAC;IACjI;IACA,IAAI,CAACT,kBAAkB,CAACM,IAAI,CAACG,GAAG,CAACd,KAAK,CAAC,EAAE;MACrC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACM,kBAAkB,EAAG,6EAA4EI,GAAG,CAACd,KAAM,EAAC,EAAE;QAAEkB,KAAK,EAAEJ;MAAI,CAAC,CAAC;IACtJ;IACA,OAAOA,GAAG,CAACd,KAAK;EACpB,CAAC;EACDmB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEnB,kBAAkB,CAACoB;IAChC;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}