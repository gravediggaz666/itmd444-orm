{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLBigInt = exports.GraphQLBigIntConfig = void 0;\n/* eslint-disable @typescript-eslint/ban-types */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nlet warned = false;\nfunction isSafeInteger(val) {\n  return val <= Number.MAX_SAFE_INTEGER && val >= Number.MIN_SAFE_INTEGER;\n}\nfunction serializeSafeBigInt(val) {\n  if (isSafeInteger(val)) {\n    return Number(val);\n  }\n  if (isBigIntSerializable()) {\n    return val;\n  }\n  return val.toString();\n}\nfunction isBigIntSerializable() {\n  if (!('toJSON' in BigInt.prototype)) {\n    if (!warned) {\n      warned = true;\n      console.warn('By default, BigInts are not serialized to JSON as numbers but instead as strings which may lead an unintegrity in your data. ' + 'To fix this, you can use \"json-bigint-patch\" to enable correct serialization for BigInts.');\n    }\n    return false;\n  }\n  return true;\n}\nexports.GraphQLBigIntConfig = {\n  name: 'BigInt',\n  description: 'The `BigInt` scalar type represents non-fractional signed whole numeric values.',\n  serialize(outputValue) {\n    const coercedValue = (0, utilities_js_1.serializeObject)(outputValue);\n    let num = coercedValue;\n    if (typeof coercedValue === 'object' && coercedValue != null && 'toString' in coercedValue) {\n      num = BigInt(coercedValue.toString());\n      if (num.toString() !== coercedValue.toString()) {\n        throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n      }\n    }\n    if (typeof coercedValue === 'boolean') {\n      num = BigInt(coercedValue);\n    }\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = BigInt(coercedValue);\n      if (num.toString() !== coercedValue) {\n        throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n      }\n    }\n    if (typeof coercedValue === 'number') {\n      if (!Number.isInteger(coercedValue)) {\n        throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n      }\n      num = BigInt(coercedValue);\n    }\n    if (typeof num !== 'bigint') {\n      throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n    }\n    return serializeSafeBigInt(num);\n  },\n  parseValue(inputValue) {\n    const bigint = BigInt(inputValue.toString());\n    if (inputValue.toString() !== bigint.toString()) {\n      throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent value: ${inputValue}`);\n    }\n    if (isSafeInteger(bigint) && !isBigIntSerializable()) {\n      return Number(bigint.toString());\n    }\n    return bigint;\n  },\n  parseLiteral(valueNode) {\n    if (!('value' in valueNode)) {\n      throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${(0, graphql_1.print)(valueNode)}`, {\n        nodes: valueNode\n      });\n    }\n    const strOrBooleanValue = valueNode.value;\n    const bigint = BigInt(strOrBooleanValue);\n    if (strOrBooleanValue.toString() !== bigint.toString()) {\n      throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent value: ${strOrBooleanValue}`);\n    }\n    if (isSafeInteger(bigint) && !isBigIntSerializable()) {\n      return Number(bigint.toString());\n    }\n    return bigint;\n  },\n  extensions: {\n    codegenScalarType: 'bigint',\n    jsonSchema: {\n      type: 'integer',\n      format: 'int64'\n    }\n  }\n};\nexports.GraphQLBigInt = new graphql_1.GraphQLScalarType(exports.GraphQLBigIntConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLBigInt","GraphQLBigIntConfig","graphql_1","require","error_js_1","utilities_js_1","warned","isSafeInteger","val","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","serializeSafeBigInt","isBigIntSerializable","toString","BigInt","prototype","console","warn","name","description","serialize","outputValue","coercedValue","serializeObject","num","createGraphQLError","isInteger","parseValue","inputValue","bigint","parseLiteral","valueNode","print","nodes","strOrBooleanValue","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/BigInt.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLBigInt = exports.GraphQLBigIntConfig = void 0;\n/* eslint-disable @typescript-eslint/ban-types */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nlet warned = false;\nfunction isSafeInteger(val) {\n    return val <= Number.MAX_SAFE_INTEGER && val >= Number.MIN_SAFE_INTEGER;\n}\nfunction serializeSafeBigInt(val) {\n    if (isSafeInteger(val)) {\n        return Number(val);\n    }\n    if (isBigIntSerializable()) {\n        return val;\n    }\n    return val.toString();\n}\nfunction isBigIntSerializable() {\n    if (!('toJSON' in BigInt.prototype)) {\n        if (!warned) {\n            warned = true;\n            console.warn('By default, BigInts are not serialized to JSON as numbers but instead as strings which may lead an unintegrity in your data. ' +\n                'To fix this, you can use \"json-bigint-patch\" to enable correct serialization for BigInts.');\n        }\n        return false;\n    }\n    return true;\n}\nexports.GraphQLBigIntConfig = {\n    name: 'BigInt',\n    description: 'The `BigInt` scalar type represents non-fractional signed whole numeric values.',\n    serialize(outputValue) {\n        const coercedValue = (0, utilities_js_1.serializeObject)(outputValue);\n        let num = coercedValue;\n        if (typeof coercedValue === 'object' && coercedValue != null && 'toString' in coercedValue) {\n            num = BigInt(coercedValue.toString());\n            if (num.toString() !== coercedValue.toString()) {\n                throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n            }\n        }\n        if (typeof coercedValue === 'boolean') {\n            num = BigInt(coercedValue);\n        }\n        if (typeof coercedValue === 'string' && coercedValue !== '') {\n            num = BigInt(coercedValue);\n            if (num.toString() !== coercedValue) {\n                throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n            }\n        }\n        if (typeof coercedValue === 'number') {\n            if (!Number.isInteger(coercedValue)) {\n                throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n            }\n            num = BigInt(coercedValue);\n        }\n        if (typeof num !== 'bigint') {\n            throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${coercedValue}`);\n        }\n        return serializeSafeBigInt(num);\n    },\n    parseValue(inputValue) {\n        const bigint = BigInt(inputValue.toString());\n        if (inputValue.toString() !== bigint.toString()) {\n            throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent value: ${inputValue}`);\n        }\n        if (isSafeInteger(bigint) && !isBigIntSerializable()) {\n            return Number(bigint.toString());\n        }\n        return bigint;\n    },\n    parseLiteral(valueNode) {\n        if (!('value' in valueNode)) {\n            throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent non-integer value: ${(0, graphql_1.print)(valueNode)}`, {\n                nodes: valueNode,\n            });\n        }\n        const strOrBooleanValue = valueNode.value;\n        const bigint = BigInt(strOrBooleanValue);\n        if (strOrBooleanValue.toString() !== bigint.toString()) {\n            throw (0, error_js_1.createGraphQLError)(`BigInt cannot represent value: ${strOrBooleanValue}`);\n        }\n        if (isSafeInteger(bigint) && !isBigIntSerializable()) {\n            return Number(bigint.toString());\n        }\n        return bigint;\n    },\n    extensions: {\n        codegenScalarType: 'bigint',\n        jsonSchema: {\n            type: 'integer',\n            format: 'int64',\n        },\n    },\n};\nexports.GraphQLBigInt = new graphql_1.GraphQLScalarType(exports.GraphQLBigIntConfig);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}