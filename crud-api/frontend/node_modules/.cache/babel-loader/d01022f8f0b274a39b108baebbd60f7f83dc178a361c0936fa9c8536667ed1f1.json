{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegularExpression = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"./error.js\");\nclass RegularExpression extends graphql_1.GraphQLScalarType {\n  constructor(name, regex, options = {}) {\n    const errorMessage = options.errorMessage ? options.errorMessage : (r, v) => `Value does not match ${r}: ${v}`;\n    super({\n      name,\n      description: options.description || `A field whose value matches ${regex}.`,\n      serialize(value) {\n        if (value != null && !regex.test(value.toString())) {\n          throw (0, error_js_1.createGraphQLError)(errorMessage(regex, value));\n        }\n        return value;\n      },\n      parseValue(value) {\n        if (value != null && !regex.test(value === null || value === void 0 ? void 0 : value.toString())) {\n          throw (0, error_js_1.createGraphQLError)(errorMessage(regex, value));\n        }\n        return value;\n      },\n      parseLiteral(ast) {\n        if (ast.kind === graphql_1.Kind.NULL) {\n          return null;\n        }\n        if (options.stringOnly && ast.kind !== graphql_1.Kind.STRING) {\n          throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ${name} but got a: ${ast.kind}`);\n        }\n        if (!('value' in ast) || ast.kind === graphql_1.Kind.ENUM) {\n          throw (0, error_js_1.createGraphQLError)(`Can only validate primitive values as ${name} but got a: ${ast.kind}`, {\n            nodes: [ast]\n          });\n        }\n        if (ast.value != null && !regex.test(ast.value.toString())) {\n          throw (0, error_js_1.createGraphQLError)(errorMessage(regex, ast.value), {\n            nodes: ast\n          });\n        }\n        return ast.value;\n      },\n      extensions: {\n        codegenScalarType: options.stringOnly ? 'string' : 'string | number | boolean'\n      }\n    });\n  }\n}\nexports.RegularExpression = RegularExpression;","map":{"version":3,"names":["Object","defineProperty","exports","value","RegularExpression","graphql_1","require","error_js_1","GraphQLScalarType","constructor","name","regex","options","errorMessage","r","v","description","serialize","test","toString","createGraphQLError","parseValue","parseLiteral","ast","kind","Kind","NULL","stringOnly","STRING","ENUM","nodes","extensions","codegenScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/RegularExpression.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegularExpression = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"./error.js\");\nclass RegularExpression extends graphql_1.GraphQLScalarType {\n    constructor(name, regex, options = {}) {\n        const errorMessage = options.errorMessage\n            ? options.errorMessage\n            : (r, v) => `Value does not match ${r}: ${v}`;\n        super({\n            name,\n            description: options.description || `A field whose value matches ${regex}.`,\n            serialize(value) {\n                if (value != null && !regex.test(value.toString())) {\n                    throw (0, error_js_1.createGraphQLError)(errorMessage(regex, value));\n                }\n                return value;\n            },\n            parseValue(value) {\n                if (value != null && !regex.test(value === null || value === void 0 ? void 0 : value.toString())) {\n                    throw (0, error_js_1.createGraphQLError)(errorMessage(regex, value));\n                }\n                return value;\n            },\n            parseLiteral(ast) {\n                if (ast.kind === graphql_1.Kind.NULL) {\n                    return null;\n                }\n                if (options.stringOnly && ast.kind !== graphql_1.Kind.STRING) {\n                    throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ${name} but got a: ${ast.kind}`);\n                }\n                if (!('value' in ast) || ast.kind === graphql_1.Kind.ENUM) {\n                    throw (0, error_js_1.createGraphQLError)(`Can only validate primitive values as ${name} but got a: ${ast.kind}`, {\n                        nodes: [ast],\n                    });\n                }\n                if (ast.value != null && !regex.test(ast.value.toString())) {\n                    throw (0, error_js_1.createGraphQLError)(errorMessage(regex, ast.value), { nodes: ast });\n                }\n                return ast.value;\n            },\n            extensions: {\n                codegenScalarType: options.stringOnly ? 'string' : 'string | number | boolean',\n            },\n        });\n    }\n}\nexports.RegularExpression = RegularExpression;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}