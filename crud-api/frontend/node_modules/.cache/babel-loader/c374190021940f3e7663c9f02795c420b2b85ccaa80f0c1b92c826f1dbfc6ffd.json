{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapResolverWithAuthChecker = exports.createBasicFieldResolver = exports.createAdvancedFieldResolver = exports.createHandlerResolver = void 0;\nconst auth_middleware_1 = require(\"../helpers/auth-middleware\");\nconst types_1 = require(\"../helpers/types\");\nconst build_context_1 = require(\"../schema/build-context\");\nconst isPromiseLike_1 = require(\"../utils/isPromiseLike\");\nconst helpers_1 = require(\"./helpers\");\nfunction createHandlerResolver(resolverMetadata) {\n  const {\n    validate: globalValidate,\n    validateFn,\n    authChecker,\n    authMode,\n    globalMiddlewares,\n    container\n  } = build_context_1.BuildContext;\n  const middlewares = globalMiddlewares.concat(resolverMetadata.middlewares);\n  (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, resolverMetadata.roles);\n  return (root, args, context, info) => {\n    const resolverData = {\n      root,\n      args,\n      context,\n      info\n    };\n    const targetInstanceOrPromise = container.getInstance(resolverMetadata.target, resolverData);\n    if ((0, isPromiseLike_1.isPromiseLike)(targetInstanceOrPromise)) {\n      return targetInstanceOrPromise.then(targetInstance => (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n        const params = (0, helpers_1.getParams)(resolverMetadata.params, resolverData, globalValidate, validateFn);\n        if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n          return params.then(resolvedParams => targetInstance[resolverMetadata.methodName].apply(targetInstance, resolvedParams));\n        }\n        return targetInstance[resolverMetadata.methodName].apply(targetInstance, params);\n      }));\n    }\n    return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n      const params = (0, helpers_1.getParams)(resolverMetadata.params, resolverData, globalValidate, validateFn);\n      const targetInstance = targetInstanceOrPromise;\n      if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n        return params.then(resolvedParams => targetInstance[resolverMetadata.methodName].apply(targetInstance, resolvedParams));\n      }\n      return targetInstance[resolverMetadata.methodName].apply(targetInstance, params);\n    });\n  };\n}\nexports.createHandlerResolver = createHandlerResolver;\nfunction createAdvancedFieldResolver(fieldResolverMetadata) {\n  if (fieldResolverMetadata.kind === \"external\") {\n    return createHandlerResolver(fieldResolverMetadata);\n  }\n  const targetType = fieldResolverMetadata.getObjectType();\n  const {\n    validate: globalValidate,\n    validateFn,\n    authChecker,\n    authMode,\n    globalMiddlewares,\n    container\n  } = build_context_1.BuildContext;\n  const middlewares = globalMiddlewares.concat(fieldResolverMetadata.middlewares);\n  (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, fieldResolverMetadata.roles);\n  return (root, args, context, info) => {\n    const resolverData = {\n      root,\n      args,\n      context,\n      info\n    };\n    const targetInstance = (0, types_1.convertToType)(targetType, root);\n    return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n      const handlerOrGetterValue = targetInstance[fieldResolverMetadata.methodName];\n      if (typeof handlerOrGetterValue !== \"function\") {\n        return handlerOrGetterValue;\n      }\n      const params = (0, helpers_1.getParams)(fieldResolverMetadata.params, resolverData, globalValidate, validateFn);\n      if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n        return params.then(resolvedParams => handlerOrGetterValue.apply(targetInstance, resolvedParams));\n      }\n      return handlerOrGetterValue.apply(targetInstance, params);\n    });\n  };\n}\nexports.createAdvancedFieldResolver = createAdvancedFieldResolver;\nfunction createBasicFieldResolver(fieldMetadata) {\n  const {\n    authChecker,\n    authMode,\n    globalMiddlewares,\n    container\n  } = build_context_1.BuildContext;\n  const middlewares = globalMiddlewares.concat(fieldMetadata.middlewares);\n  (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, fieldMetadata.roles);\n  return (root, args, context, info) => {\n    const resolverData = {\n      root,\n      args,\n      context,\n      info\n    };\n    return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => root[fieldMetadata.name]);\n  };\n}\nexports.createBasicFieldResolver = createBasicFieldResolver;\nfunction wrapResolverWithAuthChecker(resolver, container, roles) {\n  const {\n    authChecker,\n    authMode\n  } = build_context_1.BuildContext;\n  if (!authChecker || !roles) {\n    return resolver;\n  }\n  return (root, args, context, info) => {\n    const resolverData = {\n      root,\n      args,\n      context,\n      info\n    };\n    return (0, auth_middleware_1.AuthMiddleware)(authChecker, container, authMode, roles)(resolverData, async () => resolver(root, args, context, info));\n  };\n}\nexports.wrapResolverWithAuthChecker = wrapResolverWithAuthChecker;","map":{"version":3,"names":["Object","defineProperty","exports","value","wrapResolverWithAuthChecker","createBasicFieldResolver","createAdvancedFieldResolver","createHandlerResolver","auth_middleware_1","require","types_1","build_context_1","isPromiseLike_1","helpers_1","resolverMetadata","validate","globalValidate","validateFn","authChecker","authMode","globalMiddlewares","container","BuildContext","middlewares","concat","applyAuthChecker","roles","root","args","context","info","resolverData","targetInstanceOrPromise","getInstance","target","isPromiseLike","then","targetInstance","applyMiddlewares","params","getParams","resolvedParams","methodName","apply","fieldResolverMetadata","kind","targetType","getObjectType","convertToType","handlerOrGetterValue","fieldMetadata","name","resolver","AuthMiddleware"],"sources":["/Users/snawz1/node_modules/type-graphql/build/cjs/resolvers/create.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapResolverWithAuthChecker = exports.createBasicFieldResolver = exports.createAdvancedFieldResolver = exports.createHandlerResolver = void 0;\nconst auth_middleware_1 = require(\"../helpers/auth-middleware\");\nconst types_1 = require(\"../helpers/types\");\nconst build_context_1 = require(\"../schema/build-context\");\nconst isPromiseLike_1 = require(\"../utils/isPromiseLike\");\nconst helpers_1 = require(\"./helpers\");\nfunction createHandlerResolver(resolverMetadata) {\n    const { validate: globalValidate, validateFn, authChecker, authMode, globalMiddlewares, container, } = build_context_1.BuildContext;\n    const middlewares = globalMiddlewares.concat(resolverMetadata.middlewares);\n    (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, resolverMetadata.roles);\n    return (root, args, context, info) => {\n        const resolverData = { root, args, context, info };\n        const targetInstanceOrPromise = container.getInstance(resolverMetadata.target, resolverData);\n        if ((0, isPromiseLike_1.isPromiseLike)(targetInstanceOrPromise)) {\n            return targetInstanceOrPromise.then(targetInstance => (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n                const params = (0, helpers_1.getParams)(resolverMetadata.params, resolverData, globalValidate, validateFn);\n                if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n                    return params.then(resolvedParams => targetInstance[resolverMetadata.methodName].apply(targetInstance, resolvedParams));\n                }\n                return targetInstance[resolverMetadata.methodName].apply(targetInstance, params);\n            }));\n        }\n        return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n            const params = (0, helpers_1.getParams)(resolverMetadata.params, resolverData, globalValidate, validateFn);\n            const targetInstance = targetInstanceOrPromise;\n            if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n                return params.then(resolvedParams => targetInstance[resolverMetadata.methodName].apply(targetInstance, resolvedParams));\n            }\n            return targetInstance[resolverMetadata.methodName].apply(targetInstance, params);\n        });\n    };\n}\nexports.createHandlerResolver = createHandlerResolver;\nfunction createAdvancedFieldResolver(fieldResolverMetadata) {\n    if (fieldResolverMetadata.kind === \"external\") {\n        return createHandlerResolver(fieldResolverMetadata);\n    }\n    const targetType = fieldResolverMetadata.getObjectType();\n    const { validate: globalValidate, validateFn, authChecker, authMode, globalMiddlewares, container, } = build_context_1.BuildContext;\n    const middlewares = globalMiddlewares.concat(fieldResolverMetadata.middlewares);\n    (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, fieldResolverMetadata.roles);\n    return (root, args, context, info) => {\n        const resolverData = { root, args, context, info };\n        const targetInstance = (0, types_1.convertToType)(targetType, root);\n        return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => {\n            const handlerOrGetterValue = targetInstance[fieldResolverMetadata.methodName];\n            if (typeof handlerOrGetterValue !== \"function\") {\n                return handlerOrGetterValue;\n            }\n            const params = (0, helpers_1.getParams)(fieldResolverMetadata.params, resolverData, globalValidate, validateFn);\n            if ((0, isPromiseLike_1.isPromiseLike)(params)) {\n                return params.then(resolvedParams => handlerOrGetterValue.apply(targetInstance, resolvedParams));\n            }\n            return handlerOrGetterValue.apply(targetInstance, params);\n        });\n    };\n}\nexports.createAdvancedFieldResolver = createAdvancedFieldResolver;\nfunction createBasicFieldResolver(fieldMetadata) {\n    const { authChecker, authMode, globalMiddlewares, container } = build_context_1.BuildContext;\n    const middlewares = globalMiddlewares.concat(fieldMetadata.middlewares);\n    (0, helpers_1.applyAuthChecker)(middlewares, authChecker, container, authMode, fieldMetadata.roles);\n    return (root, args, context, info) => {\n        const resolverData = { root, args, context, info };\n        return (0, helpers_1.applyMiddlewares)(container, resolverData, middlewares, () => root[fieldMetadata.name]);\n    };\n}\nexports.createBasicFieldResolver = createBasicFieldResolver;\nfunction wrapResolverWithAuthChecker(resolver, container, roles) {\n    const { authChecker, authMode } = build_context_1.BuildContext;\n    if (!authChecker || !roles) {\n        return resolver;\n    }\n    return (root, args, context, info) => {\n        const resolverData = { root, args, context, info };\n        return (0, auth_middleware_1.AuthMiddleware)(authChecker, container, authMode, roles)(resolverData, async () => resolver(root, args, context, info));\n    };\n}\nexports.wrapResolverWithAuthChecker = wrapResolverWithAuthChecker;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}