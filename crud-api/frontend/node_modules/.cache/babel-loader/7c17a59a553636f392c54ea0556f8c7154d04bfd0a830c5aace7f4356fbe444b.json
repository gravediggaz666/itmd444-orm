{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLUSCurrency = void 0;\n// https://github.com/abhiaiyer91/graphql-currency-scalars\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nfunction generateCurrency(value) {\n  if (typeof value !== 'number') {\n    throw (0, error_js_1.createGraphQLError)(`Currency cannot represent non integer type ${JSON.stringify(value)}`);\n  }\n  const currencyInCents = parseInt(value.toString(), 10);\n  return (currencyInCents / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n}\nfunction generateCents(value) {\n  const digits = value.replace('$', '').replace(',', '');\n  const number = parseFloat(digits);\n  return number * 100;\n}\n/**\n * An Currency Scalar.\n *\n * Input:\n *    This scalar takes a currency string as input and\n *    formats it to currency in cents.\n *\n * Output:\n *    This scalar serializes currency in cents to\n *    currency strings.\n */\nexports.GraphQLUSCurrency = new graphql_1.GraphQLScalarType({\n  name: 'USCurrency',\n  description: 'A currency string, such as $21.25',\n  serialize: generateCurrency,\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Currency cannot represent non string type ${JSON.stringify(value)}`);\n    }\n    return generateCents(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind === graphql_1.Kind.STRING) {\n      if (typeof ast.value === 'string') {\n        return generateCents(ast.value);\n      }\n    }\n    throw (0, error_js_1.createGraphQLError)(`Currency cannot represent an invalid currency-string ${JSON.stringify(ast)}.`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'USCurrency',\n      type: 'string',\n      pattern: '^\\\\$[0-9]+(\\\\.[0-9]{2})?$'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLUSCurrency","graphql_1","require","error_js_1","generateCurrency","createGraphQLError","JSON","stringify","currencyInCents","parseInt","toString","toLocaleString","style","currency","generateCents","digits","replace","number","parseFloat","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","type","pattern"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/USCurrency.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLUSCurrency = void 0;\n// https://github.com/abhiaiyer91/graphql-currency-scalars\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nfunction generateCurrency(value) {\n    if (typeof value !== 'number') {\n        throw (0, error_js_1.createGraphQLError)(`Currency cannot represent non integer type ${JSON.stringify(value)}`);\n    }\n    const currencyInCents = parseInt(value.toString(), 10);\n    return (currencyInCents / 100).toLocaleString('en-US', {\n        style: 'currency',\n        currency: 'USD',\n    });\n}\nfunction generateCents(value) {\n    const digits = value.replace('$', '').replace(',', '');\n    const number = parseFloat(digits);\n    return number * 100;\n}\n/**\n * An Currency Scalar.\n *\n * Input:\n *    This scalar takes a currency string as input and\n *    formats it to currency in cents.\n *\n * Output:\n *    This scalar serializes currency in cents to\n *    currency strings.\n */\nexports.GraphQLUSCurrency = new graphql_1.GraphQLScalarType({\n    name: 'USCurrency',\n    description: 'A currency string, such as $21.25',\n    serialize: generateCurrency,\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Currency cannot represent non string type ${JSON.stringify(value)}`);\n        }\n        return generateCents(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind === graphql_1.Kind.STRING) {\n            if (typeof ast.value === 'string') {\n                return generateCents(ast.value);\n            }\n        }\n        throw (0, error_js_1.createGraphQLError)(`Currency cannot represent an invalid currency-string ${JSON.stringify(ast)}.`, {\n            nodes: ast,\n        });\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'USCurrency',\n            type: 'string',\n            pattern: '^\\\\$[0-9]+(\\\\.[0-9]{2})?$',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,SAASE,gBAAgBA,CAACL,KAAK,EAAE;EAC7B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACE,kBAAkB,EAAG,8CAA6CC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAE,EAAC,CAAC;EACnH;EACA,MAAMS,eAAe,GAAGC,QAAQ,CAACV,KAAK,CAACW,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACtD,OAAO,CAACF,eAAe,GAAG,GAAG,EAAEG,cAAc,CAAC,OAAO,EAAE;IACnDC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE;EACd,CAAC,CAAC;AACN;AACA,SAASC,aAAaA,CAACf,KAAK,EAAE;EAC1B,MAAMgB,MAAM,GAAGhB,KAAK,CAACiB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EACtD,MAAMC,MAAM,GAAGC,UAAU,CAACH,MAAM,CAAC;EACjC,OAAOE,MAAM,GAAG,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAACE,iBAAiB,GAAG,IAAIC,SAAS,CAACkB,iBAAiB,CAAC;EACxDC,IAAI,EAAE,YAAY;EAClBC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAElB,gBAAgB;EAC3BmB,UAAUA,CAACxB,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACE,kBAAkB,EAAG,6CAA4CC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAE,EAAC,CAAC;IAClH;IACA,OAAOe,aAAa,CAACf,KAAK,CAAC;EAC/B,CAAC;EACDyB,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKzB,SAAS,CAAC0B,IAAI,CAACC,MAAM,EAAE;MACpC,IAAI,OAAOH,GAAG,CAAC1B,KAAK,KAAK,QAAQ,EAAE;QAC/B,OAAOe,aAAa,CAACW,GAAG,CAAC1B,KAAK,CAAC;MACnC;IACJ;IACA,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACE,kBAAkB,EAAG,wDAAuDC,IAAI,CAACC,SAAS,CAACkB,GAAG,CAAE,GAAE,EAAE;MACrHI,KAAK,EAAEJ;IACX,CAAC,CAAC;EACN,CAAC;EACDK,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,YAAY;MACnBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}