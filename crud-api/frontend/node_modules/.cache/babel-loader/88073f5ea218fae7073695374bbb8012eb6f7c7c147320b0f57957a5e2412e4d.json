{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLRoutingNumber = exports.GraphQLRoutingNumberConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst routingNumber = rtn => '' + rtn;\nconst haveNineDigits = rtn => /^\\d{9}$/.test(rtn);\n/**\n * Calculates checksum for MIRC format XXXXYYYYC where C is the check digit\n *\n * The checksum is position-weighted sum of each of the digits. So, given the\n * routing number `031001175`, which The last digit (5 in the example), is the\n * check digit. The calculation is given in terms of the eight first digits:\n *\n * 0    3   1   0   0   1   1   7\n *                x\n * 3    7   1   3   7   1   3   7\n * ____________________________________\n * 0 + 21 + 1 + 0 + 0 + 1 + 3 + 49 = 75\n * ____________________________________\n * 75 + 5 (check digit) = 80 (Must multiple of 10)\n */\nconst checksum = rtn => {\n  const weight = [3, 7, 1];\n  const accumulator = (acc, curr) => acc + curr;\n  const digits = rtn.split('').map(digit => Number.parseInt(digit, 10));\n  const checkDigit = digits.pop();\n  const sum = digits.map((digit, index) => digit * weight[index % 3]).reduce(accumulator, 0);\n  return (sum + checkDigit) % 10 === 0;\n};\nconst validate = (value, ast) => {\n  if (typeof value !== 'string' && !(typeof value === 'number' && Number.isInteger(value))) {\n    throw (0, error_js_1.createGraphQLError)('must be integer or string', ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  const rtn = routingNumber(value);\n  if (!haveNineDigits(rtn)) {\n    throw (0, error_js_1.createGraphQLError)('must have nine digits', ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!checksum(rtn)) {\n    throw (0, error_js_1.createGraphQLError)(\"checksum doesn't match\", ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return rtn;\n};\nexports.GraphQLRoutingNumberConfig = {\n  name: 'RoutingNumber',\n  description: 'In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit ' + 'code to identify the financial institution.',\n  specifiedByURL: 'https://en.wikipedia.org/wiki/ABA_routing_transit_number',\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind === graphql_1.Kind.INT || ast.kind === graphql_1.Kind.STRING) {\n      return validate(ast.value, ast);\n    }\n    throw (0, error_js_1.createGraphQLError)(`ABA Routing Transit Number can only parse Integer or String but got '${ast.kind}'`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'RoutingNumber',\n      type: 'string',\n      pattern: /^\\d{9}$/.source\n    }\n  }\n};\nexports.GraphQLRoutingNumber = new graphql_1.GraphQLScalarType(exports.GraphQLRoutingNumberConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLRoutingNumber","GraphQLRoutingNumberConfig","graphql_1","require","error_js_1","routingNumber","rtn","haveNineDigits","test","checksum","weight","accumulator","acc","curr","digits","split","map","digit","Number","parseInt","checkDigit","pop","sum","index","reduce","validate","ast","isInteger","createGraphQLError","nodes","undefined","name","description","specifiedByURL","serialize","parseValue","parseLiteral","kind","Kind","INT","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/RoutingNumber.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLRoutingNumber = exports.GraphQLRoutingNumberConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst routingNumber = (rtn) => '' + rtn;\nconst haveNineDigits = rtn => /^\\d{9}$/.test(rtn);\n/**\n * Calculates checksum for MIRC format XXXXYYYYC where C is the check digit\n *\n * The checksum is position-weighted sum of each of the digits. So, given the\n * routing number `031001175`, which The last digit (5 in the example), is the\n * check digit. The calculation is given in terms of the eight first digits:\n *\n * 0    3   1   0   0   1   1   7\n *                x\n * 3    7   1   3   7   1   3   7\n * ____________________________________\n * 0 + 21 + 1 + 0 + 0 + 1 + 3 + 49 = 75\n * ____________________________________\n * 75 + 5 (check digit) = 80 (Must multiple of 10)\n */\nconst checksum = rtn => {\n    const weight = [3, 7, 1];\n    const accumulator = (acc, curr) => acc + curr;\n    const digits = rtn.split('').map(digit => Number.parseInt(digit, 10));\n    const checkDigit = digits.pop();\n    const sum = digits.map((digit, index) => digit * weight[index % 3]).reduce(accumulator, 0);\n    return (sum + checkDigit) % 10 === 0;\n};\nconst validate = (value, ast) => {\n    if (typeof value !== 'string' && !(typeof value === 'number' && Number.isInteger(value))) {\n        throw (0, error_js_1.createGraphQLError)('must be integer or string', ast ? { nodes: ast } : undefined);\n    }\n    const rtn = routingNumber(value);\n    if (!haveNineDigits(rtn)) {\n        throw (0, error_js_1.createGraphQLError)('must have nine digits', ast ? { nodes: ast } : undefined);\n    }\n    if (!checksum(rtn)) {\n        throw (0, error_js_1.createGraphQLError)(\"checksum doesn't match\", ast ? { nodes: ast } : undefined);\n    }\n    return rtn;\n};\nexports.GraphQLRoutingNumberConfig = {\n    name: 'RoutingNumber',\n    description: 'In the US, an ABA routing transit number (`ABA RTN`) is a nine-digit ' +\n        'code to identify the financial institution.',\n    specifiedByURL: 'https://en.wikipedia.org/wiki/ABA_routing_transit_number',\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind === graphql_1.Kind.INT || ast.kind === graphql_1.Kind.STRING) {\n            return validate(ast.value, ast);\n        }\n        throw (0, error_js_1.createGraphQLError)(`ABA Routing Transit Number can only parse Integer or String but got '${ast.kind}'`, {\n            nodes: ast,\n        });\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'RoutingNumber',\n            type: 'string',\n            pattern: /^\\d{9}$/.source,\n        },\n    },\n};\nexports.GraphQLRoutingNumber = new graphql_1.GraphQLScalarType(exports.GraphQLRoutingNumberConfig);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}