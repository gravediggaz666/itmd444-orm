{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLDID = exports.GraphQLDIDConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// See: https://www.w3.org/TR/2021/PR-did-core-20210803/#did-syntax\nconst DID_REGEX = /^did:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*:?[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*:?[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*$/;\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!DID_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid DID: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nconst specifiedByURL = 'https://www.w3.org/TR/did-core/';\nexports.GraphQLDIDConfig = {\n  name: 'DID',\n  description: 'A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.',\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as DID but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  specifiedByURL,\n  specifiedByUrl: specifiedByURL,\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'DID',\n      type: 'string',\n      pattern: DID_REGEX.source\n    }\n  }\n};\nexports.GraphQLDID = new graphql_1.GraphQLScalarType(exports.GraphQLDIDConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLDID","GraphQLDIDConfig","graphql_1","require","error_js_1","DID_REGEX","validate","ast","createGraphQLError","nodes","undefined","test","specifiedByURL","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","specifiedByUrl","extensions","codegenScalarType","jsonSchema","title","type","pattern","source","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/DID.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLDID = exports.GraphQLDIDConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// See: https://www.w3.org/TR/2021/PR-did-core-20210803/#did-syntax\nconst DID_REGEX = /^did:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+:[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*:?[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*:?[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]*$/;\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (!DID_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid DID: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nconst specifiedByURL = 'https://www.w3.org/TR/did-core/';\nexports.GraphQLDIDConfig = {\n    name: 'DID',\n    description: 'A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.',\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as DID but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    specifiedByURL,\n    specifiedByUrl: specifiedByURL,\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'DID',\n            type: 'string',\n            pattern: DID_REGEX.source,\n        },\n    },\n};\nexports.GraphQLDID = new graphql_1.GraphQLScalarType(exports.GraphQLDIDConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AACtD,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC;AACA,MAAME,SAAS,GAAG,iJAAiJ;AACnK,MAAMC,QAAQ,GAAGA,CAACP,KAAK,EAAEQ,GAAG,KAAK;EAC7B,IAAI,OAAOR,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,wBAAuBT,KAAM,EAAC,EAAEQ,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,IAAI,CAACL,SAAS,CAACM,IAAI,CAACZ,KAAK,CAAC,EAAE;IACxB,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,6BAA4BT,KAAM,EAAC,EAAEQ,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EACpH;EACA,OAAOX,KAAK;AAChB,CAAC;AACD,MAAMa,cAAc,GAAG,iCAAiC;AACxDd,OAAO,CAACG,gBAAgB,GAAG;EACvBY,IAAI,EAAE,KAAK;EACXC,WAAW,EAAE,oHAAoH;EACjIC,SAAS,EAAET,QAAQ;EACnBU,UAAU,EAAEV,QAAQ;EACpBW,YAAYA,CAACV,GAAG,EAAE;IACd,IAAIA,GAAG,CAACW,IAAI,KAAKhB,SAAS,CAACiB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEhB,UAAU,CAACI,kBAAkB,EAAG,+CAA8CD,GAAG,CAACW,IAAK,EAAC,EAAE;QAChGT,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACR,KAAK,EAAEQ,GAAG,CAAC;EACnC,CAAC;EACDK,cAAc;EACdS,cAAc,EAAET,cAAc;EAC9BU,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,KAAK;MACZC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEtB,SAAS,CAACuB;IACvB;EACJ;AACJ,CAAC;AACD9B,OAAO,CAACE,UAAU,GAAG,IAAIE,SAAS,CAAC2B,iBAAiB,CAAC/B,OAAO,CAACG,gBAAgB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}