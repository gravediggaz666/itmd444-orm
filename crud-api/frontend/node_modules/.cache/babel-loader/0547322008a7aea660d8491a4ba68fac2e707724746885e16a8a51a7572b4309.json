{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterfaceTypeDefinitionNode = exports.getInputValueDefinitionNode = exports.getFieldDefinitionNode = exports.getInputObjectTypeDefinitionNode = exports.getObjectTypeDefinitionNode = exports.getDirectiveNode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst errors_1 = require(\"../errors\");\nfunction getDirectiveNode(directive) {\n  const nameOrDefinition = directive.nameOrDefinition.replaceAll(\"\\n\", \" \").trimStart();\n  const {\n    args\n  } = directive;\n  if (nameOrDefinition === \"\") {\n    throw new errors_1.InvalidDirectiveError(\"Please pass at-least one directive name or definition to the @Directive decorator\");\n  }\n  if (!nameOrDefinition.startsWith(\"@\")) {\n    return {\n      kind: graphql_1.Kind.DIRECTIVE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: nameOrDefinition\n      },\n      arguments: Object.keys(args).map(argKey => ({\n        kind: graphql_1.Kind.ARGUMENT,\n        name: {\n          kind: graphql_1.Kind.NAME,\n          value: argKey\n        },\n        value: (0, graphql_1.parseConstValue)(args[argKey])\n      }))\n    };\n  }\n  let parsed;\n  try {\n    parsed = (0, graphql_1.parse)(`type String ${nameOrDefinition}`);\n  } catch (err) {\n    throw new errors_1.InvalidDirectiveError(`Error parsing directive definition \"${directive.nameOrDefinition}\"`);\n  }\n  const definitions = parsed.definitions;\n  const directives = definitions.filter(it => !!it.directives && it.directives.length > 0).map(it => it.directives).flat();\n  if (directives.length !== 1) {\n    throw new errors_1.InvalidDirectiveError(`Please pass only one directive name or definition at a time to the @Directive decorator \"${directive.nameOrDefinition}\"`);\n  }\n  return directives[0];\n}\nexports.getDirectiveNode = getDirectiveNode;\nfunction getObjectTypeDefinitionNode(name, directiveMetadata) {\n  if (!directiveMetadata || !directiveMetadata.length) {\n    return undefined;\n  }\n  return {\n    kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    directives: directiveMetadata.map(getDirectiveNode)\n  };\n}\nexports.getObjectTypeDefinitionNode = getObjectTypeDefinitionNode;\nfunction getInputObjectTypeDefinitionNode(name, directiveMetadata) {\n  if (!directiveMetadata || !directiveMetadata.length) {\n    return undefined;\n  }\n  return {\n    kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    directives: directiveMetadata.map(getDirectiveNode)\n  };\n}\nexports.getInputObjectTypeDefinitionNode = getInputObjectTypeDefinitionNode;\nfunction getFieldDefinitionNode(name, type, directiveMetadata) {\n  if (!directiveMetadata || !directiveMetadata.length) {\n    return undefined;\n  }\n  return {\n    kind: graphql_1.Kind.FIELD_DEFINITION,\n    type: {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type.toString()\n      }\n    },\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    directives: directiveMetadata.map(getDirectiveNode)\n  };\n}\nexports.getFieldDefinitionNode = getFieldDefinitionNode;\nfunction getInputValueDefinitionNode(name, type, directiveMetadata) {\n  if (!directiveMetadata || !directiveMetadata.length) {\n    return undefined;\n  }\n  return {\n    kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n    type: {\n      kind: graphql_1.Kind.NAMED_TYPE,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: type.toString()\n      }\n    },\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    directives: directiveMetadata.map(getDirectiveNode)\n  };\n}\nexports.getInputValueDefinitionNode = getInputValueDefinitionNode;\nfunction getInterfaceTypeDefinitionNode(name, directiveMetadata) {\n  if (!directiveMetadata || !directiveMetadata.length) {\n    return undefined;\n  }\n  return {\n    kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: name\n    },\n    directives: directiveMetadata.map(getDirectiveNode)\n  };\n}\nexports.getInterfaceTypeDefinitionNode = getInterfaceTypeDefinitionNode;","map":{"version":3,"names":["Object","defineProperty","exports","value","getInterfaceTypeDefinitionNode","getInputValueDefinitionNode","getFieldDefinitionNode","getInputObjectTypeDefinitionNode","getObjectTypeDefinitionNode","getDirectiveNode","graphql_1","require","errors_1","directive","nameOrDefinition","replaceAll","trimStart","args","InvalidDirectiveError","startsWith","kind","Kind","DIRECTIVE","name","NAME","arguments","keys","map","argKey","ARGUMENT","parseConstValue","parsed","parse","err","definitions","directives","filter","it","length","flat","directiveMetadata","undefined","OBJECT_TYPE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","type","FIELD_DEFINITION","NAMED_TYPE","toString","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION"],"sources":["/Users/snawz1/node_modules/type-graphql/build/cjs/schema/definition-node.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInterfaceTypeDefinitionNode = exports.getInputValueDefinitionNode = exports.getFieldDefinitionNode = exports.getInputObjectTypeDefinitionNode = exports.getObjectTypeDefinitionNode = exports.getDirectiveNode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst errors_1 = require(\"../errors\");\nfunction getDirectiveNode(directive) {\n    const nameOrDefinition = directive.nameOrDefinition.replaceAll(\"\\n\", \" \").trimStart();\n    const { args } = directive;\n    if (nameOrDefinition === \"\") {\n        throw new errors_1.InvalidDirectiveError(\"Please pass at-least one directive name or definition to the @Directive decorator\");\n    }\n    if (!nameOrDefinition.startsWith(\"@\")) {\n        return {\n            kind: graphql_1.Kind.DIRECTIVE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: nameOrDefinition,\n            },\n            arguments: Object.keys(args).map(argKey => ({\n                kind: graphql_1.Kind.ARGUMENT,\n                name: {\n                    kind: graphql_1.Kind.NAME,\n                    value: argKey,\n                },\n                value: (0, graphql_1.parseConstValue)(args[argKey]),\n            })),\n        };\n    }\n    let parsed;\n    try {\n        parsed = (0, graphql_1.parse)(`type String ${nameOrDefinition}`);\n    }\n    catch (err) {\n        throw new errors_1.InvalidDirectiveError(`Error parsing directive definition \"${directive.nameOrDefinition}\"`);\n    }\n    const definitions = parsed.definitions;\n    const directives = definitions\n        .filter((it) => !!it.directives && it.directives.length > 0)\n        .map(it => it.directives)\n        .flat();\n    if (directives.length !== 1) {\n        throw new errors_1.InvalidDirectiveError(`Please pass only one directive name or definition at a time to the @Directive decorator \"${directive.nameOrDefinition}\"`);\n    }\n    return directives[0];\n}\nexports.getDirectiveNode = getDirectiveNode;\nfunction getObjectTypeDefinitionNode(name, directiveMetadata) {\n    if (!directiveMetadata || !directiveMetadata.length) {\n        return undefined;\n    }\n    return {\n        kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        directives: directiveMetadata.map(getDirectiveNode),\n    };\n}\nexports.getObjectTypeDefinitionNode = getObjectTypeDefinitionNode;\nfunction getInputObjectTypeDefinitionNode(name, directiveMetadata) {\n    if (!directiveMetadata || !directiveMetadata.length) {\n        return undefined;\n    }\n    return {\n        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        directives: directiveMetadata.map(getDirectiveNode),\n    };\n}\nexports.getInputObjectTypeDefinitionNode = getInputObjectTypeDefinitionNode;\nfunction getFieldDefinitionNode(name, type, directiveMetadata) {\n    if (!directiveMetadata || !directiveMetadata.length) {\n        return undefined;\n    }\n    return {\n        kind: graphql_1.Kind.FIELD_DEFINITION,\n        type: {\n            kind: graphql_1.Kind.NAMED_TYPE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: type.toString(),\n            },\n        },\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        directives: directiveMetadata.map(getDirectiveNode),\n    };\n}\nexports.getFieldDefinitionNode = getFieldDefinitionNode;\nfunction getInputValueDefinitionNode(name, type, directiveMetadata) {\n    if (!directiveMetadata || !directiveMetadata.length) {\n        return undefined;\n    }\n    return {\n        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,\n        type: {\n            kind: graphql_1.Kind.NAMED_TYPE,\n            name: {\n                kind: graphql_1.Kind.NAME,\n                value: type.toString(),\n            },\n        },\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        directives: directiveMetadata.map(getDirectiveNode),\n    };\n}\nexports.getInputValueDefinitionNode = getInputValueDefinitionNode;\nfunction getInterfaceTypeDefinitionNode(name, directiveMetadata) {\n    if (!directiveMetadata || !directiveMetadata.length) {\n        return undefined;\n    }\n    return {\n        kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n        name: {\n            kind: graphql_1.Kind.NAME,\n            value: name,\n        },\n        directives: directiveMetadata.map(getDirectiveNode),\n    };\n}\nexports.getInterfaceTypeDefinitionNode = getInterfaceTypeDefinitionNode;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}