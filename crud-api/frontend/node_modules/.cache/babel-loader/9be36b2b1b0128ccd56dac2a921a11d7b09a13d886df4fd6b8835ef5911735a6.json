{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLPort = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n  const parsed = typeof value === 'string' ? parseInt(value, 10) : value;\n  if (typeof parsed !== 'number' || Number.isNaN(parsed)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a number: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (parsed === Infinity || parsed === -Infinity) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a finite number: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (parsed <= 0 || parsed > 65535) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid TCP port: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return parsed;\n};\nexports.GraphQLPort = new graphql_1.GraphQLScalarType({\n  name: `Port`,\n  description: `A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.INT) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate integers as TCP ports but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string | number',\n    jsonSchema: {\n      title: 'Port',\n      type: 'integer',\n      minimum: 0,\n      maximum: 65535\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLPort","graphql_1","require","error_js_1","validate","ast","parsed","parseInt","Number","isNaN","createGraphQLError","nodes","undefined","Infinity","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","INT","extensions","codegenScalarType","jsonSchema","title","type","minimum","maximum"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/Port.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLPort = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n    const parsed = typeof value === 'string' ? parseInt(value, 10) : value;\n    if (typeof parsed !== 'number' || Number.isNaN(parsed)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a number: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (parsed === Infinity || parsed === -Infinity) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a finite number: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (parsed <= 0 || parsed > 65535) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid TCP port: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return parsed;\n};\nexports.GraphQLPort = new graphql_1.GraphQLScalarType({\n    name: `Port`,\n    description: `A field whose value is a valid TCP port within the range of 0 to 65535: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.INT) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate integers as TCP ports but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string | number',\n        jsonSchema: {\n            title: 'Port',\n            type: 'integer',\n            minimum: 0,\n            maximum: 65535,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,QAAQ,GAAGA,CAACL,KAAK,EAAEM,GAAG,KAAK;EAC7B,MAAMC,MAAM,GAAG,OAAOP,KAAK,KAAK,QAAQ,GAAGQ,QAAQ,CAACR,KAAK,EAAE,EAAE,CAAC,GAAGA,KAAK;EACtE,IAAI,OAAOO,MAAM,KAAK,QAAQ,IAAIE,MAAM,CAACC,KAAK,CAACH,MAAM,CAAC,EAAE;IACpD,MAAM,CAAC,CAAC,EAAEH,UAAU,CAACO,kBAAkB,EAAG,0BAAyBX,KAAM,EAAC,EAAEM,GAAG,GAAG;MAAEM,KAAK,EAAEN;IAAI,CAAC,GAAGO,SAAS,CAAC;EACjH;EACA,IAAIN,MAAM,KAAKO,QAAQ,IAAIP,MAAM,KAAK,CAACO,QAAQ,EAAE;IAC7C,MAAM,CAAC,CAAC,EAAEV,UAAU,CAACO,kBAAkB,EAAG,iCAAgCX,KAAM,EAAC,EAAEM,GAAG,GAAG;MAAEM,KAAK,EAAEN;IAAI,CAAC,GAAGO,SAAS,CAAC;EACxH;EACA,IAAIN,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,KAAK,EAAE;IAC/B,MAAM,CAAC,CAAC,EAAEH,UAAU,CAACO,kBAAkB,EAAG,kCAAiCX,KAAM,EAAC,EAAEM,GAAG,GAAG;MAAEM,KAAK,EAAEN;IAAI,CAAC,GAAGO,SAAS,CAAC;EACzH;EACA,OAAON,MAAM;AACjB,CAAC;AACDR,OAAO,CAACE,WAAW,GAAG,IAAIC,SAAS,CAACa,iBAAiB,CAAC;EAClDC,IAAI,EAAG,MAAK;EACZC,WAAW,EAAG,+IAA8I;EAC5JC,SAASA,CAAClB,KAAK,EAAE;IACb,OAAOK,QAAQ,CAACL,KAAK,CAAC;EAC1B,CAAC;EACDmB,UAAUA,CAACnB,KAAK,EAAE;IACd,OAAOK,QAAQ,CAACL,KAAK,CAAC;EAC1B,CAAC;EACDoB,YAAYA,CAACd,GAAG,EAAE;IACd,IAAIA,GAAG,CAACe,IAAI,KAAKnB,SAAS,CAACoB,IAAI,CAACC,GAAG,EAAE;MACjC,MAAM,CAAC,CAAC,EAAEnB,UAAU,CAACO,kBAAkB,EAAG,sDAAqDL,GAAG,CAACe,IAAK,EAAC,EAAE;QACvGT,KAAK,EAAEN;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACN,KAAK,EAAEM,GAAG,CAAC;EACnC,CAAC;EACDkB,UAAU,EAAE;IACRC,iBAAiB,EAAE,iBAAiB;IACpCC,UAAU,EAAE;MACRC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;IACb;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}