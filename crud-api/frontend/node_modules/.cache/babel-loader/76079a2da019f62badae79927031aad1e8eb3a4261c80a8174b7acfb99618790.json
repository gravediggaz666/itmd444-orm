{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLObjectID = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst MONGODB_OBJECTID_REGEX = /*#__PURE__*/ /^[A-Fa-f0-9]{24}$/;\nexports.GraphQLObjectID = new graphql_1.GraphQLScalarType({\n  name: 'ObjectID',\n  description: 'A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c',\n  serialize(value) {\n    if (!MONGODB_OBJECTID_REGEX.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${value}`);\n    }\n    return value;\n  },\n  parseValue(value) {\n    if (!MONGODB_OBJECTID_REGEX.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${value}`);\n    }\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as mongodb object id but got a: ${ast.kind}`, {\n        nodes: [ast]\n      });\n    }\n    if (!MONGODB_OBJECTID_REGEX.test(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${ast.value}`, {\n        nodes: ast\n      });\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'ObjectID',\n      type: 'string',\n      pattern: MONGODB_OBJECTID_REGEX.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLObjectID","graphql_1","require","error_js_1","MONGODB_OBJECTID_REGEX","GraphQLScalarType","name","description","serialize","test","createGraphQLError","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/ObjectID.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLObjectID = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst MONGODB_OBJECTID_REGEX = /*#__PURE__*/ /^[A-Fa-f0-9]{24}$/;\nexports.GraphQLObjectID = new graphql_1.GraphQLScalarType({\n    name: 'ObjectID',\n    description: 'A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c',\n    serialize(value) {\n        if (!MONGODB_OBJECTID_REGEX.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${value}`);\n        }\n        return value;\n    },\n    parseValue(value) {\n        if (!MONGODB_OBJECTID_REGEX.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${value}`);\n        }\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as mongodb object id but got a: ${ast.kind}`, {\n                nodes: [ast],\n            });\n        }\n        if (!MONGODB_OBJECTID_REGEX.test(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid mongodb object id of form: ${ast.value}`, {\n                nodes: ast,\n            });\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'ObjectID',\n            type: 'string',\n            pattern: MONGODB_OBJECTID_REGEX.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,sBAAsB,GAAG,aAAc,oBAAmB;AAChEN,OAAO,CAACE,eAAe,GAAG,IAAIC,SAAS,CAACI,iBAAiB,CAAC;EACtDC,IAAI,EAAE,UAAU;EAChBC,WAAW,EAAE,4LAA4L;EACzMC,SAASA,CAACT,KAAK,EAAE;IACb,IAAI,CAACK,sBAAsB,CAACK,IAAI,CAACV,KAAK,CAAC,EAAE;MACrC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACO,kBAAkB,EAAG,mDAAkDX,KAAM,EAAC,CAAC;IACxG;IACA,OAAOA,KAAK;EAChB,CAAC;EACDY,UAAUA,CAACZ,KAAK,EAAE;IACd,IAAI,CAACK,sBAAsB,CAACK,IAAI,CAACV,KAAK,CAAC,EAAE;MACrC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACO,kBAAkB,EAAG,mDAAkDX,KAAM,EAAC,CAAC;IACxG;IACA,OAAOA,KAAK;EAChB,CAAC;EACDa,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKb,SAAS,CAACc,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEb,UAAU,CAACO,kBAAkB,EAAG,6DAA4DG,GAAG,CAACC,IAAK,EAAC,EAAE;QAC9GG,KAAK,EAAE,CAACJ,GAAG;MACf,CAAC,CAAC;IACN;IACA,IAAI,CAACT,sBAAsB,CAACK,IAAI,CAACI,GAAG,CAACd,KAAK,CAAC,EAAE;MACzC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACO,kBAAkB,EAAG,mDAAkDG,GAAG,CAACd,KAAM,EAAC,EAAE;QACrGkB,KAAK,EAAEJ;MACX,CAAC,CAAC;IACN;IACA,OAAOA,GAAG,CAACd,KAAK;EACpB,CAAC;EACDmB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEnB,sBAAsB,CAACoB;IACpC;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}