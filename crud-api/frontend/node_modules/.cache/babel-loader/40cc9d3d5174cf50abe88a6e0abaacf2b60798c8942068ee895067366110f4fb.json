{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLByte = exports.GraphQLByteConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst base64Validator = /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/;\nfunction hexValidator(value) {\n  // Ensure that any leading 0 is removed from the hex string to avoid false negatives.\n  const sanitizedValue = value.charAt(0) === '0' ? value.slice(1) : value;\n  // For larger strings, we run into issues with MAX_SAFE_INTEGER, so split the string\n  // into smaller pieces to avoid this issue.\n  if (value.length > 8) {\n    let parsedString = '';\n    for (let startIndex = 0, endIndex = 8; startIndex < value.length; startIndex += 8, endIndex += 8) {\n      parsedString += parseInt(value.slice(startIndex, endIndex), 16).toString(16);\n    }\n    return parsedString === sanitizedValue;\n  }\n  return parseInt(value, 16).toString(16) === sanitizedValue;\n}\nfunction validate(value, ast) {\n  if (typeof value !== 'string' && !(value instanceof global.Buffer)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not an instance of Buffer: ${JSON.stringify(value)}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (typeof value === 'string') {\n    const isBase64 = base64Validator.test(value);\n    const isHex = hexValidator(value);\n    if (!isBase64 && !isHex) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid base64 or hex encoded string: ${JSON.stringify(value)}`, ast ? {\n        nodes: ast\n      } : undefined);\n    }\n    return global.Buffer.from(value, isHex ? 'hex' : 'base64');\n  }\n  return value;\n}\nfunction parseObject(ast) {\n  const key = ast.fields[0].value;\n  const value = ast.fields[1].value;\n  if (ast.fields.length === 2 && key.kind === graphql_1.Kind.STRING && key.value === 'Buffer' && value.kind === graphql_1.Kind.LIST) {\n    return global.Buffer.from(value.values.map(astValue => parseInt(astValue.value)));\n  }\n  throw (0, error_js_1.createGraphQLError)(`Value is not a JSON representation of Buffer: ${(0, graphql_1.print)(ast)}`, {\n    nodes: [ast]\n  });\n}\nexports.GraphQLByteConfig = /*#__PURE__*/{\n  name: 'Byte',\n  description: 'The `Byte` scalar type represents byte value as a Buffer',\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    switch (ast.kind) {\n      case graphql_1.Kind.STRING:\n        return validate(ast.value, ast);\n      case graphql_1.Kind.OBJECT:\n        return parseObject(ast);\n      default:\n        throw (0, error_js_1.createGraphQLError)(`Can only parse base64 or hex encoded strings as Byte, but got a: ${ast.kind}`, {\n          nodes: [ast]\n        });\n    }\n  },\n  extensions: {\n    codegenScalarType: 'Buffer | string',\n    jsonSchema: {\n      type: 'string',\n      format: 'byte'\n    }\n  }\n};\nexports.GraphQLByte = new graphql_1.GraphQLScalarType(exports.GraphQLByteConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLByte","GraphQLByteConfig","graphql_1","require","error_js_1","base64Validator","hexValidator","sanitizedValue","charAt","slice","length","parsedString","startIndex","endIndex","parseInt","toString","validate","ast","global","Buffer","createGraphQLError","JSON","stringify","nodes","undefined","isBase64","test","isHex","from","parseObject","key","fields","kind","Kind","STRING","LIST","values","map","astValue","print","name","description","serialize","parseValue","parseLiteral","OBJECT","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/Byte.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLByte = exports.GraphQLByteConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst base64Validator = /^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$/;\nfunction hexValidator(value) {\n    // Ensure that any leading 0 is removed from the hex string to avoid false negatives.\n    const sanitizedValue = value.charAt(0) === '0' ? value.slice(1) : value;\n    // For larger strings, we run into issues with MAX_SAFE_INTEGER, so split the string\n    // into smaller pieces to avoid this issue.\n    if (value.length > 8) {\n        let parsedString = '';\n        for (let startIndex = 0, endIndex = 8; startIndex < value.length; startIndex += 8, endIndex += 8) {\n            parsedString += parseInt(value.slice(startIndex, endIndex), 16).toString(16);\n        }\n        return parsedString === sanitizedValue;\n    }\n    return parseInt(value, 16).toString(16) === sanitizedValue;\n}\nfunction validate(value, ast) {\n    if (typeof value !== 'string' && !(value instanceof global.Buffer)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not an instance of Buffer: ${JSON.stringify(value)}`, ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    if (typeof value === 'string') {\n        const isBase64 = base64Validator.test(value);\n        const isHex = hexValidator(value);\n        if (!isBase64 && !isHex) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid base64 or hex encoded string: ${JSON.stringify(value)}`, ast\n                ? {\n                    nodes: ast,\n                }\n                : undefined);\n        }\n        return global.Buffer.from(value, isHex ? 'hex' : 'base64');\n    }\n    return value;\n}\nfunction parseObject(ast) {\n    const key = ast.fields[0].value;\n    const value = ast.fields[1].value;\n    if (ast.fields.length === 2 &&\n        key.kind === graphql_1.Kind.STRING &&\n        key.value === 'Buffer' &&\n        value.kind === graphql_1.Kind.LIST) {\n        return global.Buffer.from(value.values.map((astValue) => parseInt(astValue.value)));\n    }\n    throw (0, error_js_1.createGraphQLError)(`Value is not a JSON representation of Buffer: ${(0, graphql_1.print)(ast)}`, {\n        nodes: [ast],\n    });\n}\nexports.GraphQLByteConfig = \n/*#__PURE__*/ {\n    name: 'Byte',\n    description: 'The `Byte` scalar type represents byte value as a Buffer',\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        switch (ast.kind) {\n            case graphql_1.Kind.STRING:\n                return validate(ast.value, ast);\n            case graphql_1.Kind.OBJECT:\n                return parseObject(ast);\n            default:\n                throw (0, error_js_1.createGraphQLError)(`Can only parse base64 or hex encoded strings as Byte, but got a: ${ast.kind}`, {\n                    nodes: [ast],\n                });\n        }\n    },\n    extensions: {\n        codegenScalarType: 'Buffer | string',\n        jsonSchema: {\n            type: 'string',\n            format: 'byte',\n        },\n    },\n};\nexports.GraphQLByte = new graphql_1.GraphQLScalarType(exports.GraphQLByteConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,iBAAiB,GAAG,KAAK,CAAC;AACxD,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,eAAe,GAAG,qEAAqE;AAC7F,SAASC,YAAYA,CAACP,KAAK,EAAE;EACzB;EACA,MAAMQ,cAAc,GAAGR,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGT,KAAK,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGV,KAAK;EACvE;EACA;EACA,IAAIA,KAAK,CAACW,MAAM,GAAG,CAAC,EAAE;IAClB,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEC,QAAQ,GAAG,CAAC,EAAED,UAAU,GAAGb,KAAK,CAACW,MAAM,EAAEE,UAAU,IAAI,CAAC,EAAEC,QAAQ,IAAI,CAAC,EAAE;MAC9FF,YAAY,IAAIG,QAAQ,CAACf,KAAK,CAACU,KAAK,CAACG,UAAU,EAAEC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;IAChF;IACA,OAAOJ,YAAY,KAAKJ,cAAc;EAC1C;EACA,OAAOO,QAAQ,CAACf,KAAK,EAAE,EAAE,CAAC,CAACgB,QAAQ,CAAC,EAAE,CAAC,KAAKR,cAAc;AAC9D;AACA,SAASS,QAAQA,CAACjB,KAAK,EAAEkB,GAAG,EAAE;EAC1B,IAAI,OAAOlB,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYmB,MAAM,CAACC,MAAM,CAAC,EAAE;IAChE,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACgB,kBAAkB,EAAG,uCAAsCC,IAAI,CAACC,SAAS,CAACvB,KAAK,CAAE,EAAC,EAAEkB,GAAG,GACtG;MACEM,KAAK,EAAEN;IACX,CAAC,GACCO,SAAS,CAAC;EACpB;EACA,IAAI,OAAOzB,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM0B,QAAQ,GAAGpB,eAAe,CAACqB,IAAI,CAAC3B,KAAK,CAAC;IAC5C,MAAM4B,KAAK,GAAGrB,YAAY,CAACP,KAAK,CAAC;IACjC,IAAI,CAAC0B,QAAQ,IAAI,CAACE,KAAK,EAAE;MACrB,MAAM,CAAC,CAAC,EAAEvB,UAAU,CAACgB,kBAAkB,EAAG,sDAAqDC,IAAI,CAACC,SAAS,CAACvB,KAAK,CAAE,EAAC,EAAEkB,GAAG,GACrH;QACEM,KAAK,EAAEN;MACX,CAAC,GACCO,SAAS,CAAC;IACpB;IACA,OAAON,MAAM,CAACC,MAAM,CAACS,IAAI,CAAC7B,KAAK,EAAE4B,KAAK,GAAG,KAAK,GAAG,QAAQ,CAAC;EAC9D;EACA,OAAO5B,KAAK;AAChB;AACA,SAAS8B,WAAWA,CAACZ,GAAG,EAAE;EACtB,MAAMa,GAAG,GAAGb,GAAG,CAACc,MAAM,CAAC,CAAC,CAAC,CAAChC,KAAK;EAC/B,MAAMA,KAAK,GAAGkB,GAAG,CAACc,MAAM,CAAC,CAAC,CAAC,CAAChC,KAAK;EACjC,IAAIkB,GAAG,CAACc,MAAM,CAACrB,MAAM,KAAK,CAAC,IACvBoB,GAAG,CAACE,IAAI,KAAK9B,SAAS,CAAC+B,IAAI,CAACC,MAAM,IAClCJ,GAAG,CAAC/B,KAAK,KAAK,QAAQ,IACtBA,KAAK,CAACiC,IAAI,KAAK9B,SAAS,CAAC+B,IAAI,CAACE,IAAI,EAAE;IACpC,OAAOjB,MAAM,CAACC,MAAM,CAACS,IAAI,CAAC7B,KAAK,CAACqC,MAAM,CAACC,GAAG,CAAEC,QAAQ,IAAKxB,QAAQ,CAACwB,QAAQ,CAACvC,KAAK,CAAC,CAAC,CAAC;EACvF;EACA,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACgB,kBAAkB,EAAG,iDAAgD,CAAC,CAAC,EAAElB,SAAS,CAACqC,KAAK,EAAEtB,GAAG,CAAE,EAAC,EAAE;IACnHM,KAAK,EAAE,CAACN,GAAG;EACf,CAAC,CAAC;AACN;AACAnB,OAAO,CAACG,iBAAiB,GACzB,aAAc;EACVuC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,0DAA0D;EACvEC,SAAS,EAAE1B,QAAQ;EACnB2B,UAAU,EAAE3B,QAAQ;EACpB4B,YAAYA,CAAC3B,GAAG,EAAE;IACd,QAAQA,GAAG,CAACe,IAAI;MACZ,KAAK9B,SAAS,CAAC+B,IAAI,CAACC,MAAM;QACtB,OAAOlB,QAAQ,CAACC,GAAG,CAAClB,KAAK,EAAEkB,GAAG,CAAC;MACnC,KAAKf,SAAS,CAAC+B,IAAI,CAACY,MAAM;QACtB,OAAOhB,WAAW,CAACZ,GAAG,CAAC;MAC3B;QACI,MAAM,CAAC,CAAC,EAAEb,UAAU,CAACgB,kBAAkB,EAAG,oEAAmEH,GAAG,CAACe,IAAK,EAAC,EAAE;UACrHT,KAAK,EAAE,CAACN,GAAG;QACf,CAAC,CAAC;IACV;EACJ,CAAC;EACD6B,UAAU,EAAE;IACRC,iBAAiB,EAAE,iBAAiB;IACpCC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC;AACDpD,OAAO,CAACE,WAAW,GAAG,IAAIE,SAAS,CAACiD,iBAAiB,CAACrD,OAAO,CAACG,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}