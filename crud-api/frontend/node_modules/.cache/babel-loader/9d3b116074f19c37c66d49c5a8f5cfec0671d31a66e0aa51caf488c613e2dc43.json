{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeDateTimeString = exports.parseDateTime = exports.serializeDate = exports.parseDate = exports.serializeTimeString = exports.serializeTime = exports.parseTime = void 0;\n// Parses an RFC 3339 compliant time-string into a Date.\n// It does this by combining the current date with the time-string\n// to create a new Date instance.\n//\n// Example:\n// Suppose the current date is 2016-01-01, then\n// parseTime('11:00:12Z') parses to a Date corresponding to\n// 2016-01-01T11:00:12Z.\nconst parseTime = time => {\n  const currentDateString = new Date().toISOString();\n  return new Date(currentDateString.substr(0, currentDateString.indexOf('T') + 1) + time);\n};\nexports.parseTime = parseTime;\n// Serializes a Date into an RFC 3339 compliant time-string in the\n// format hh:mm:ss.sssZ.\nconst serializeTime = date => {\n  const dateTimeString = date.toISOString();\n  return dateTimeString.substr(dateTimeString.indexOf('T') + 1);\n};\nexports.serializeTime = serializeTime;\n// Serializes an RFC 3339 compliant time-string by shifting\n// it to UTC.\nconst serializeTimeString = time => {\n  // If already formatted to UTC then return the time string\n  if (time.indexOf('Z') !== -1) {\n    return time;\n  } else {\n    // These are time-strings with timezone information,\n    // these need to be shifted to UTC.\n    // Convert to UTC time string in\n    // format hh:mm:ss.sssZ.\n    const date = (0, exports.parseTime)(time);\n    let timeUTC = (0, exports.serializeTime)(date);\n    // Regex to look for fractional second part in time string\n    // such as 00:00:00.345+01:00\n    const regexFracSec = /\\.\\d{1,}/;\n    // Retrieve the fractional second part of the time\n    // string if it exists.\n    const fractionalPart = time.match(regexFracSec);\n    if (fractionalPart == null) {\n      // These are time-strings without the fractional\n      // seconds. So we remove them from the UTC time-string.\n      timeUTC = timeUTC.replace(regexFracSec, '');\n      return timeUTC;\n    } else {\n      // These are time-string with fractional seconds.\n      // Make sure that we inject the fractional\n      // second part back in. The `timeUTC` variable\n      // has millisecond precision, we may want more or less\n      // depending on the string that was passed.\n      timeUTC = timeUTC.replace(regexFracSec, fractionalPart[0]);\n      return timeUTC;\n    }\n  }\n};\nexports.serializeTimeString = serializeTimeString;\n// Parses an RFC 3339 compliant date-string into a Date.\n//\n// Example:\n// parseDate('2016-01-01') parses to a Date corresponding to\n// 2016-01-01T00:00:00.000Z.\nconst parseDate = date => {\n  return new Date(date);\n};\nexports.parseDate = parseDate;\n// Serializes a Date into a RFC 3339 compliant date-string\n// in the format YYYY-MM-DD.\nconst serializeDate = date => {\n  return date.toISOString().split('T')[0];\n};\nexports.serializeDate = serializeDate;\n// Parses an RFC 3339 compliant date-time-string into a Date.\nconst parseDateTime = dateTime => {\n  return new Date(dateTime);\n};\nexports.parseDateTime = parseDateTime;\n// Serializes an RFC 3339 compliant date-time-string by shifting\n// it to UTC.\nconst serializeDateTimeString = dateTime => {\n  // If already formatted to UTC then return the time string\n  if (dateTime.indexOf('Z') !== -1) {\n    return new Date(dateTime);\n  } else {\n    // These are time-strings with timezone information,\n    // these need to be shifted to UTC.\n    // Convert to UTC time string in\n    // format YYYY-MM-DDThh:mm:ss.sssZ.\n    let dateTimeUTC = new Date(dateTime).toISOString();\n    // Regex to look for fractional second part in date-time string\n    const regexFracSec = /\\.\\d{1,}/;\n    // Retrieve the fractional second part of the time\n    // string if it exists.\n    const fractionalPart = dateTime.match(regexFracSec);\n    if (fractionalPart == null) {\n      // The date-time-string has no fractional part,\n      // so we remove it from the dateTimeUTC variable.\n      dateTimeUTC = dateTimeUTC.replace(regexFracSec, '');\n      return new Date(dateTimeUTC);\n    } else {\n      // These are datetime-string with fractional seconds.\n      // Make sure that we inject the fractional\n      // second part back in. The `dateTimeUTC` variable\n      // has millisecond precision, we may want more or less\n      // depending on the string that was passed.\n      dateTimeUTC = dateTimeUTC.replace(regexFracSec, fractionalPart[0]);\n      return new Date(dateTimeUTC);\n    }\n  }\n};\nexports.serializeDateTimeString = serializeDateTimeString;","map":{"version":3,"names":["Object","defineProperty","exports","value","serializeDateTimeString","parseDateTime","serializeDate","parseDate","serializeTimeString","serializeTime","parseTime","time","currentDateString","Date","toISOString","substr","indexOf","date","dateTimeString","timeUTC","regexFracSec","fractionalPart","match","replace","split","dateTime","dateTimeUTC"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/iso-date/formatter.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeDateTimeString = exports.parseDateTime = exports.serializeDate = exports.parseDate = exports.serializeTimeString = exports.serializeTime = exports.parseTime = void 0;\n// Parses an RFC 3339 compliant time-string into a Date.\n// It does this by combining the current date with the time-string\n// to create a new Date instance.\n//\n// Example:\n// Suppose the current date is 2016-01-01, then\n// parseTime('11:00:12Z') parses to a Date corresponding to\n// 2016-01-01T11:00:12Z.\nconst parseTime = (time) => {\n    const currentDateString = new Date().toISOString();\n    return new Date(currentDateString.substr(0, currentDateString.indexOf('T') + 1) + time);\n};\nexports.parseTime = parseTime;\n// Serializes a Date into an RFC 3339 compliant time-string in the\n// format hh:mm:ss.sssZ.\nconst serializeTime = (date) => {\n    const dateTimeString = date.toISOString();\n    return dateTimeString.substr(dateTimeString.indexOf('T') + 1);\n};\nexports.serializeTime = serializeTime;\n// Serializes an RFC 3339 compliant time-string by shifting\n// it to UTC.\nconst serializeTimeString = (time) => {\n    // If already formatted to UTC then return the time string\n    if (time.indexOf('Z') !== -1) {\n        return time;\n    }\n    else {\n        // These are time-strings with timezone information,\n        // these need to be shifted to UTC.\n        // Convert to UTC time string in\n        // format hh:mm:ss.sssZ.\n        const date = (0, exports.parseTime)(time);\n        let timeUTC = (0, exports.serializeTime)(date);\n        // Regex to look for fractional second part in time string\n        // such as 00:00:00.345+01:00\n        const regexFracSec = /\\.\\d{1,}/;\n        // Retrieve the fractional second part of the time\n        // string if it exists.\n        const fractionalPart = time.match(regexFracSec);\n        if (fractionalPart == null) {\n            // These are time-strings without the fractional\n            // seconds. So we remove them from the UTC time-string.\n            timeUTC = timeUTC.replace(regexFracSec, '');\n            return timeUTC;\n        }\n        else {\n            // These are time-string with fractional seconds.\n            // Make sure that we inject the fractional\n            // second part back in. The `timeUTC` variable\n            // has millisecond precision, we may want more or less\n            // depending on the string that was passed.\n            timeUTC = timeUTC.replace(regexFracSec, fractionalPart[0]);\n            return timeUTC;\n        }\n    }\n};\nexports.serializeTimeString = serializeTimeString;\n// Parses an RFC 3339 compliant date-string into a Date.\n//\n// Example:\n// parseDate('2016-01-01') parses to a Date corresponding to\n// 2016-01-01T00:00:00.000Z.\nconst parseDate = (date) => {\n    return new Date(date);\n};\nexports.parseDate = parseDate;\n// Serializes a Date into a RFC 3339 compliant date-string\n// in the format YYYY-MM-DD.\nconst serializeDate = (date) => {\n    return date.toISOString().split('T')[0];\n};\nexports.serializeDate = serializeDate;\n// Parses an RFC 3339 compliant date-time-string into a Date.\nconst parseDateTime = (dateTime) => {\n    return new Date(dateTime);\n};\nexports.parseDateTime = parseDateTime;\n// Serializes an RFC 3339 compliant date-time-string by shifting\n// it to UTC.\nconst serializeDateTimeString = (dateTime) => {\n    // If already formatted to UTC then return the time string\n    if (dateTime.indexOf('Z') !== -1) {\n        return new Date(dateTime);\n    }\n    else {\n        // These are time-strings with timezone information,\n        // these need to be shifted to UTC.\n        // Convert to UTC time string in\n        // format YYYY-MM-DDThh:mm:ss.sssZ.\n        let dateTimeUTC = new Date(dateTime).toISOString();\n        // Regex to look for fractional second part in date-time string\n        const regexFracSec = /\\.\\d{1,}/;\n        // Retrieve the fractional second part of the time\n        // string if it exists.\n        const fractionalPart = dateTime.match(regexFracSec);\n        if (fractionalPart == null) {\n            // The date-time-string has no fractional part,\n            // so we remove it from the dateTimeUTC variable.\n            dateTimeUTC = dateTimeUTC.replace(regexFracSec, '');\n            return new Date(dateTimeUTC);\n        }\n        else {\n            // These are datetime-string with fractional seconds.\n            // Make sure that we inject the fractional\n            // second part back in. The `dateTimeUTC` variable\n            // has millisecond precision, we may want more or less\n            // depending on the string that was passed.\n            dateTimeUTC = dateTimeUTC.replace(regexFracSec, fractionalPart[0]);\n            return new Date(dateTimeUTC);\n        }\n    }\n};\nexports.serializeDateTimeString = serializeDateTimeString;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}