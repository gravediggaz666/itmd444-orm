{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLTime = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\n// eslint-disable-line\nconst validator_js_1 = require(\"./validator.js\");\n/**\n * An RFC 3339 compliant time scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 time string as input and\n *    parses it to a javascript Date (with a year-month-day relative\n *    to the current day).\n *\n * Output:\n *    This scalar serializes javascript Dates and\n *    RFC 3339 time strings to RFC 3339 UTC time strings.\n */\nconst config = {\n  name: 'Time',\n  description: 'A time string at UTC, such as 10:15:30Z, compliant with ' + 'the `full-time` format outlined in section 5.6 of the RFC 3339' + 'profile of the ISO 8601 standard for representation of dates and ' + 'times using the Gregorian calendar.',\n  serialize(value) {\n    if (value instanceof Date) {\n      if ((0, validator_js_1.validateJSDate)(value)) {\n        return (0, formatter_js_1.serializeTime)(value);\n      }\n      throw (0, error_js_1.createGraphQLError)('Time cannot represent an invalid Date instance');\n    } else if (typeof value === 'string') {\n      if ((0, validator_js_1.validateTime)(value)) {\n        return (0, formatter_js_1.serializeTimeString)(value);\n      }\n      throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${value}.`);\n    } else {\n      throw (0, error_js_1.createGraphQLError)('Time cannot be serialized from a non string, ' + 'or non Date type ' + JSON.stringify(value));\n    }\n  },\n  parseValue(value) {\n    if (!(typeof value === 'string')) {\n      throw (0, error_js_1.createGraphQLError)(`Time cannot represent non string type ${JSON.stringify(value)}`);\n    }\n    if ((0, validator_js_1.validateTime)(value)) {\n      return (0, formatter_js_1.parseTime)(value);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${value}.`);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Time cannot represent non string type ${'value' in ast && ast.value}`, {\n        nodes: ast\n      });\n    }\n    const value = ast.value;\n    if ((0, validator_js_1.validateTime)(value)) {\n      return (0, formatter_js_1.parseTime)(value);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${String(value)}.`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'Date | string',\n    jsonSchema: {\n      type: 'string',\n      format: 'time'\n    }\n  }\n};\nexports.GraphQLTime = new graphql_1.GraphQLScalarType(config);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLTime","graphql_1","require","error_js_1","formatter_js_1","validator_js_1","config","name","description","serialize","Date","validateJSDate","serializeTime","createGraphQLError","validateTime","serializeTimeString","JSON","stringify","parseValue","parseTime","parseLiteral","ast","kind","Kind","STRING","nodes","String","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/iso-date/Time.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLTime = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\n// eslint-disable-line\nconst validator_js_1 = require(\"./validator.js\");\n/**\n * An RFC 3339 compliant time scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 time string as input and\n *    parses it to a javascript Date (with a year-month-day relative\n *    to the current day).\n *\n * Output:\n *    This scalar serializes javascript Dates and\n *    RFC 3339 time strings to RFC 3339 UTC time strings.\n */\nconst config = {\n    name: 'Time',\n    description: 'A time string at UTC, such as 10:15:30Z, compliant with ' +\n        'the `full-time` format outlined in section 5.6 of the RFC 3339' +\n        'profile of the ISO 8601 standard for representation of dates and ' +\n        'times using the Gregorian calendar.',\n    serialize(value) {\n        if (value instanceof Date) {\n            if ((0, validator_js_1.validateJSDate)(value)) {\n                return (0, formatter_js_1.serializeTime)(value);\n            }\n            throw (0, error_js_1.createGraphQLError)('Time cannot represent an invalid Date instance');\n        }\n        else if (typeof value === 'string') {\n            if ((0, validator_js_1.validateTime)(value)) {\n                return (0, formatter_js_1.serializeTimeString)(value);\n            }\n            throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${value}.`);\n        }\n        else {\n            throw (0, error_js_1.createGraphQLError)('Time cannot be serialized from a non string, ' +\n                'or non Date type ' +\n                JSON.stringify(value));\n        }\n    },\n    parseValue(value) {\n        if (!(typeof value === 'string')) {\n            throw (0, error_js_1.createGraphQLError)(`Time cannot represent non string type ${JSON.stringify(value)}`);\n        }\n        if ((0, validator_js_1.validateTime)(value)) {\n            return (0, formatter_js_1.parseTime)(value);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${value}.`);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Time cannot represent non string type ${'value' in ast && ast.value}`, { nodes: ast });\n        }\n        const value = ast.value;\n        if ((0, validator_js_1.validateTime)(value)) {\n            return (0, formatter_js_1.parseTime)(value);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Time cannot represent an invalid time-string ${String(value)}.`, {\n            nodes: ast,\n        });\n    },\n    extensions: {\n        codegenScalarType: 'Date | string',\n        jsonSchema: {\n            type: 'string',\n            format: 'time',\n        },\n    },\n};\nexports.GraphQLTime = new graphql_1.GraphQLScalarType(config);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}