{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLDate = exports.GraphQLDateConfig = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\nconst validator_js_1 = require(\"./validator.js\");\nexports.GraphQLDateConfig = {\n  name: 'Date',\n  description: 'A date string, such as 2007-12-03, compliant with the `full-date` ' + 'format outlined in section 5.6 of the RFC 3339 profile of the ' + 'ISO 8601 standard for representation of dates and times using ' + 'the Gregorian calendar.',\n  serialize(value) {\n    if (value instanceof Date) {\n      if ((0, validator_js_1.validateJSDate)(value)) {\n        return (0, formatter_js_1.serializeDate)(value);\n      }\n      throw (0, error_js_1.createGraphQLError)('Date cannot represent an invalid Date instance');\n    } else if (typeof value === 'string') {\n      if ((0, validator_js_1.validateDate)(value)) {\n        return value;\n      }\n      throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${value}.`);\n    } else {\n      throw (0, error_js_1.createGraphQLError)('Date cannot represent a non string, or non Date type ' + JSON.stringify(value));\n    }\n  },\n  parseValue(value) {\n    if (!(typeof value === 'string')) {\n      throw (0, error_js_1.createGraphQLError)(`Date cannot represent non string type ${JSON.stringify(value)}`);\n    }\n    if ((0, validator_js_1.validateDate)(value)) {\n      return (0, formatter_js_1.parseDate)(value);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${value}.`);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Date cannot represent non string type ${'value' in ast && ast.value}`, {\n        nodes: ast\n      });\n    }\n    const {\n      value\n    } = ast;\n    if ((0, validator_js_1.validateDate)(value)) {\n      return (0, formatter_js_1.parseDate)(value);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${String(value)}.`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'Date | string',\n    jsonSchema: {\n      type: 'string',\n      format: 'date'\n    }\n  }\n};\n/**\n * An RFC 3339 compliant date scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 date string as input and\n *    parses it to a javascript Date.\n *\n * Output:\n *    This scalar serializes javascript Dates and\n *    RFC 3339 date strings to RFC 3339 date strings.\n */\nexports.GraphQLDate = new graphql_1.GraphQLScalarType(exports.GraphQLDateConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLDate","GraphQLDateConfig","graphql_1","require","error_js_1","formatter_js_1","validator_js_1","name","description","serialize","Date","validateJSDate","serializeDate","createGraphQLError","validateDate","JSON","stringify","parseValue","parseDate","parseLiteral","ast","kind","Kind","STRING","nodes","String","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/iso-date/Date.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLDate = exports.GraphQLDateConfig = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\nconst validator_js_1 = require(\"./validator.js\");\nexports.GraphQLDateConfig = {\n    name: 'Date',\n    description: 'A date string, such as 2007-12-03, compliant with the `full-date` ' +\n        'format outlined in section 5.6 of the RFC 3339 profile of the ' +\n        'ISO 8601 standard for representation of dates and times using ' +\n        'the Gregorian calendar.',\n    serialize(value) {\n        if (value instanceof Date) {\n            if ((0, validator_js_1.validateJSDate)(value)) {\n                return (0, formatter_js_1.serializeDate)(value);\n            }\n            throw (0, error_js_1.createGraphQLError)('Date cannot represent an invalid Date instance');\n        }\n        else if (typeof value === 'string') {\n            if ((0, validator_js_1.validateDate)(value)) {\n                return value;\n            }\n            throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${value}.`);\n        }\n        else {\n            throw (0, error_js_1.createGraphQLError)('Date cannot represent a non string, or non Date type ' + JSON.stringify(value));\n        }\n    },\n    parseValue(value) {\n        if (!(typeof value === 'string')) {\n            throw (0, error_js_1.createGraphQLError)(`Date cannot represent non string type ${JSON.stringify(value)}`);\n        }\n        if ((0, validator_js_1.validateDate)(value)) {\n            return (0, formatter_js_1.parseDate)(value);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${value}.`);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Date cannot represent non string type ${'value' in ast && ast.value}`, { nodes: ast });\n        }\n        const { value } = ast;\n        if ((0, validator_js_1.validateDate)(value)) {\n            return (0, formatter_js_1.parseDate)(value);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Date cannot represent an invalid date-string ${String(value)}.`, {\n            nodes: ast,\n        });\n    },\n    extensions: {\n        codegenScalarType: 'Date | string',\n        jsonSchema: {\n            type: 'string',\n            format: 'date',\n        },\n    },\n};\n/**\n * An RFC 3339 compliant date scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 date string as input and\n *    parses it to a javascript Date.\n *\n * Output:\n *    This scalar serializes javascript Dates and\n *    RFC 3339 date strings to RFC 3339 date strings.\n */\nexports.GraphQLDate = new graphql_1.GraphQLScalarType(exports.GraphQLDateConfig);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}