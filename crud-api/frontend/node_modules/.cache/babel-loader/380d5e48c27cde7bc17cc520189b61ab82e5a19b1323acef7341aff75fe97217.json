{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLocalTime = exports.validateLocalTime = exports.LOCAL_TIME_FORMAT = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// 24-hour time with optional seconds and milliseconds - `HH:mm[:ss[.SSS]]`\nexports.LOCAL_TIME_FORMAT = /^([0-1][0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9](\\.\\d{3})?)?$/;\nfunction validateLocalTime(value, ast) {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  const isValidFormat = exports.LOCAL_TIME_FORMAT.test(value);\n  if (!isValidFormat) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid LocalTime: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n}\nexports.validateLocalTime = validateLocalTime;\nexports.GraphQLLocalTime = new graphql_1.GraphQLScalarType({\n  name: 'LocalTime',\n  description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.',\n  serialize(value) {\n    // value sent to client as string\n    return validateLocalTime(value);\n  },\n  parseValue(value) {\n    // value from client as json\n    return validateLocalTime(value);\n  },\n  parseLiteral(ast) {\n    // value from client in ast\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local times but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validateLocalTime(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'LocalTime',\n      type: 'string',\n      pattern: exports.LOCAL_TIME_FORMAT.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLLocalTime","validateLocalTime","LOCAL_TIME_FORMAT","graphql_1","require","error_js_1","ast","createGraphQLError","nodes","undefined","isValidFormat","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/LocalTime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLLocalTime = exports.validateLocalTime = exports.LOCAL_TIME_FORMAT = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// 24-hour time with optional seconds and milliseconds - `HH:mm[:ss[.SSS]]`\nexports.LOCAL_TIME_FORMAT = /^([0-1][0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9](\\.\\d{3})?)?$/;\nfunction validateLocalTime(value, ast) {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    const isValidFormat = exports.LOCAL_TIME_FORMAT.test(value);\n    if (!isValidFormat) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid LocalTime: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n}\nexports.validateLocalTime = validateLocalTime;\nexports.GraphQLLocalTime = new graphql_1.GraphQLScalarType({\n    name: 'LocalTime',\n    description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.',\n    serialize(value) {\n        // value sent to client as string\n        return validateLocalTime(value);\n    },\n    parseValue(value) {\n        // value from client as json\n        return validateLocalTime(value);\n    },\n    parseLiteral(ast) {\n        // value from client in ast\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local times but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validateLocalTime(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'LocalTime',\n            type: 'string',\n            pattern: exports.LOCAL_TIME_FORMAT.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,iBAAiB,GAAGH,OAAO,CAACI,iBAAiB,GAAG,KAAK,CAAC;AACzF,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC;AACAN,OAAO,CAACI,iBAAiB,GAAG,4DAA4D;AACxF,SAASD,iBAAiBA,CAACF,KAAK,EAAEO,GAAG,EAAE;EACnC,IAAI,OAAOP,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACE,kBAAkB,EAAG,wBAAuBR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,MAAMC,aAAa,GAAGZ,OAAO,CAACI,iBAAiB,CAACS,IAAI,CAACZ,KAAK,CAAC;EAC3D,IAAI,CAACW,aAAa,EAAE;IAChB,MAAM,CAAC,CAAC,EAAEL,UAAU,CAACE,kBAAkB,EAAG,mCAAkCR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC1H;EACA,OAAOV,KAAK;AAChB;AACAD,OAAO,CAACG,iBAAiB,GAAGA,iBAAiB;AAC7CH,OAAO,CAACE,gBAAgB,GAAG,IAAIG,SAAS,CAACS,iBAAiB,CAAC;EACvDC,IAAI,EAAE,WAAW;EACjBC,WAAW,EAAE,2IAA2I;EACxJC,SAASA,CAAChB,KAAK,EAAE;IACb;IACA,OAAOE,iBAAiB,CAACF,KAAK,CAAC;EACnC,CAAC;EACDiB,UAAUA,CAACjB,KAAK,EAAE;IACd;IACA,OAAOE,iBAAiB,CAACF,KAAK,CAAC;EACnC,CAAC;EACDkB,YAAYA,CAACX,GAAG,EAAE;IACd;IACA,IAAIA,GAAG,CAACY,IAAI,KAAKf,SAAS,CAACgB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACE,kBAAkB,EAAG,uDAAsDD,GAAG,CAACY,IAAK,EAAC,EAAE;QACxGV,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOL,iBAAiB,CAACK,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EAC5C,CAAC;EACDe,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE5B,OAAO,CAACI,iBAAiB,CAACyB;IACvC;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}