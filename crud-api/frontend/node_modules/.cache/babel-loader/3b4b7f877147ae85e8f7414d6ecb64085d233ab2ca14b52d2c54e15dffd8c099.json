{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLDateTime = exports.GraphQLDateTimeConfig = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\n// eslint-disable-line\nconst validator_js_1 = require(\"./validator.js\");\nexports.GraphQLDateTimeConfig = {\n  name: 'DateTime',\n  description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z, ' + 'compliant with the `date-time` format outlined in section 5.6 of ' + 'the RFC 3339 profile of the ISO 8601 standard for representation ' + 'of dates and times using the Gregorian calendar.',\n  serialize(value) {\n    if (value instanceof Date) {\n      if ((0, validator_js_1.validateJSDate)(value)) {\n        return value;\n      }\n      throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Date instance');\n    } else if (typeof value === 'string') {\n      if ((0, validator_js_1.validateDateTime)(value)) {\n        return (0, formatter_js_1.parseDateTime)(value);\n      }\n      throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${value}.`);\n    } else if (typeof value === 'number') {\n      try {\n        return new Date(value);\n      } catch (e) {\n        throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Unix timestamp ' + value);\n      }\n    } else {\n      throw (0, error_js_1.createGraphQLError)('DateTime cannot be serialized from a non string, ' + 'non numeric or non Date type ' + JSON.stringify(value));\n    }\n  },\n  parseValue(value) {\n    if (value instanceof Date) {\n      if ((0, validator_js_1.validateJSDate)(value)) {\n        return value;\n      }\n      throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Date instance');\n    }\n    if (typeof value === 'string') {\n      if ((0, validator_js_1.validateDateTime)(value)) {\n        return (0, formatter_js_1.parseDateTime)(value);\n      }\n      throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${value}.`);\n    }\n    throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent non string or Date type ${JSON.stringify(value)}`);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent non string or Date type ${'value' in ast && ast.value}`, {\n        nodes: ast\n      });\n    }\n    const {\n      value\n    } = ast;\n    if ((0, validator_js_1.validateDateTime)(value)) {\n      return (0, formatter_js_1.parseDateTime)(value);\n    }\n    throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${String(value)}.`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'Date | string',\n    jsonSchema: {\n      type: 'string',\n      format: 'date-time'\n    }\n  }\n};\n/**\n * An RFC 3339 compliant date-time scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 date-time string as input and\n *    parses it to a javascript Date.\n *\n * Output:\n *    This scalar serializes javascript Dates,\n *    RFC 3339 date-time strings and unix timestamps\n *    to RFC 3339 UTC date-time strings.\n */\nexports.GraphQLDateTime = new graphql_1.GraphQLScalarType(exports.GraphQLDateTimeConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLDateTime","GraphQLDateTimeConfig","graphql_1","require","error_js_1","formatter_js_1","validator_js_1","name","description","serialize","Date","validateJSDate","createGraphQLError","validateDateTime","parseDateTime","e","JSON","stringify","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","String","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/iso-date/DateTime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLDateTime = exports.GraphQLDateTimeConfig = void 0;\n/**\n * Copyright (c) 2017, Dirk-Jan Rutten\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\nconst formatter_js_1 = require(\"./formatter.js\");\n// eslint-disable-line\nconst validator_js_1 = require(\"./validator.js\");\nexports.GraphQLDateTimeConfig = {\n    name: 'DateTime',\n    description: 'A date-time string at UTC, such as 2007-12-03T10:15:30Z, ' +\n        'compliant with the `date-time` format outlined in section 5.6 of ' +\n        'the RFC 3339 profile of the ISO 8601 standard for representation ' +\n        'of dates and times using the Gregorian calendar.',\n    serialize(value) {\n        if (value instanceof Date) {\n            if ((0, validator_js_1.validateJSDate)(value)) {\n                return value;\n            }\n            throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Date instance');\n        }\n        else if (typeof value === 'string') {\n            if ((0, validator_js_1.validateDateTime)(value)) {\n                return (0, formatter_js_1.parseDateTime)(value);\n            }\n            throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${value}.`);\n        }\n        else if (typeof value === 'number') {\n            try {\n                return new Date(value);\n            }\n            catch (e) {\n                throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Unix timestamp ' + value);\n            }\n        }\n        else {\n            throw (0, error_js_1.createGraphQLError)('DateTime cannot be serialized from a non string, ' +\n                'non numeric or non Date type ' +\n                JSON.stringify(value));\n        }\n    },\n    parseValue(value) {\n        if (value instanceof Date) {\n            if ((0, validator_js_1.validateJSDate)(value)) {\n                return value;\n            }\n            throw (0, error_js_1.createGraphQLError)('DateTime cannot represent an invalid Date instance');\n        }\n        if (typeof value === 'string') {\n            if ((0, validator_js_1.validateDateTime)(value)) {\n                return (0, formatter_js_1.parseDateTime)(value);\n            }\n            throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${value}.`);\n        }\n        throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent non string or Date type ${JSON.stringify(value)}`);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent non string or Date type ${'value' in ast && ast.value}`, {\n                nodes: ast,\n            });\n        }\n        const { value } = ast;\n        if ((0, validator_js_1.validateDateTime)(value)) {\n            return (0, formatter_js_1.parseDateTime)(value);\n        }\n        throw (0, error_js_1.createGraphQLError)(`DateTime cannot represent an invalid date-time-string ${String(value)}.`, { nodes: ast });\n    },\n    extensions: {\n        codegenScalarType: 'Date | string',\n        jsonSchema: {\n            type: 'string',\n            format: 'date-time',\n        },\n    },\n};\n/**\n * An RFC 3339 compliant date-time scalar.\n *\n * Input:\n *    This scalar takes an RFC 3339 date-time string as input and\n *    parses it to a javascript Date.\n *\n * Output:\n *    This scalar serializes javascript Dates,\n *    RFC 3339 date-time strings and unix timestamps\n *    to RFC 3339 UTC date-time strings.\n */\nexports.GraphQLDateTime = new graphql_1.GraphQLScalarType(exports.GraphQLDateTimeConfig);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}