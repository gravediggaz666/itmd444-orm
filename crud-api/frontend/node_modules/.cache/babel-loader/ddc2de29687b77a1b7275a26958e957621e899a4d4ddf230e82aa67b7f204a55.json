{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLDuration = exports.GraphQLISO8601Duration = exports.GraphQLDurationConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n// original implementation\n// https://stackoverflow.com/questions/32044846/regex-for-iso-8601-durations\n// const ISO_DURATION_NEGATIVE_ALLOWED = /^-?P(?!$)(-?\\d+(?:\\.\\d+)?Y)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?W)?(-?\\d+(?:\\.\\d+)?D)?(T(?=-?\\d)(-?\\d+(?:\\.\\d+)?H)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?S)?)?$/\n// const ISO_DURATION_WITHOUT_SIGN = /^P(?!$)(\\d+(?:\\.\\d+)?Y)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?W)?(\\d+(?:\\.\\d+)?D)?(T(?=\\d)(\\d+(?:\\.\\d+)?H)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?S)?)?$/\n// negative and positive durations allowed, commas and decimal points valid for fractions\nconst ISO_DURATION = /^(-|\\+)?P(?!$)((-|\\+)?\\d+(?:(\\.|,)\\d+)?Y)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?W)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?D)?(T(?=(-|\\+)?\\d)((-|\\+)?\\d+(?:(\\.|,)\\d+)?H)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?S)?)?$/;\nexports.GraphQLDurationConfig = {\n  name: 'Duration',\n  description: `\n    A string representing a duration conforming to the ISO8601 standard,\n    such as: P1W1DT13H23M34S\n    P is the duration designator (for period) placed at the start of the duration representation.\n    Y is the year designator that follows the value for the number of years.\n    M is the month designator that follows the value for the number of months.\n    W is the week designator that follows the value for the number of weeks.\n    D is the day designator that follows the value for the number of days.\n    T is the time designator that precedes the time components of the representation.\n    H is the hour designator that follows the value for the number of hours.\n    M is the minute designator that follows the value for the number of minutes.\n    S is the second designator that follows the value for the number of seconds.\n\n    Note the time designator, T, that precedes the time value.\n\n    Matches moment.js, Luxon and DateFns implementations\n    ,/. is valid for decimal places and +/- is a valid prefix\n  `,\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!ISO_DURATION.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${value}`);\n    }\n    return value;\n  },\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!ISO_DURATION.test(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${value}`);\n    }\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ISO Durations but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (!ISO_DURATION.test(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${ast.value}`, {\n        nodes: ast\n      });\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'Duration',\n      type: 'string',\n      pattern: ISO_DURATION.source\n    }\n  }\n};\nexports.GraphQLISO8601Duration = new graphql_1.GraphQLScalarType({\n  ...exports.GraphQLDurationConfig,\n  name: 'ISO8601Duration'\n});\nexports.GraphQLDuration = new graphql_1.GraphQLScalarType({\n  ...exports.GraphQLDurationConfig,\n  name: 'Duration'\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLDuration","GraphQLISO8601Duration","GraphQLDurationConfig","graphql_1","require","error_js_1","ISO_DURATION","name","description","serialize","createGraphQLError","test","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","type","pattern","source","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/iso-date/Duration.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLDuration = exports.GraphQLISO8601Duration = exports.GraphQLDurationConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n// original implementation\n// https://stackoverflow.com/questions/32044846/regex-for-iso-8601-durations\n// const ISO_DURATION_NEGATIVE_ALLOWED = /^-?P(?!$)(-?\\d+(?:\\.\\d+)?Y)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?W)?(-?\\d+(?:\\.\\d+)?D)?(T(?=-?\\d)(-?\\d+(?:\\.\\d+)?H)?(-?\\d+(?:\\.\\d+)?M)?(-?\\d+(?:\\.\\d+)?S)?)?$/\n// const ISO_DURATION_WITHOUT_SIGN = /^P(?!$)(\\d+(?:\\.\\d+)?Y)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?W)?(\\d+(?:\\.\\d+)?D)?(T(?=\\d)(\\d+(?:\\.\\d+)?H)?(\\d+(?:\\.\\d+)?M)?(\\d+(?:\\.\\d+)?S)?)?$/\n// negative and positive durations allowed, commas and decimal points valid for fractions\nconst ISO_DURATION = /^(-|\\+)?P(?!$)((-|\\+)?\\d+(?:(\\.|,)\\d+)?Y)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?W)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?D)?(T(?=(-|\\+)?\\d)((-|\\+)?\\d+(?:(\\.|,)\\d+)?H)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?M)?((-|\\+)?\\d+(?:(\\.|,)\\d+)?S)?)?$/;\nexports.GraphQLDurationConfig = {\n    name: 'Duration',\n    description: `\n    A string representing a duration conforming to the ISO8601 standard,\n    such as: P1W1DT13H23M34S\n    P is the duration designator (for period) placed at the start of the duration representation.\n    Y is the year designator that follows the value for the number of years.\n    M is the month designator that follows the value for the number of months.\n    W is the week designator that follows the value for the number of weeks.\n    D is the day designator that follows the value for the number of days.\n    T is the time designator that precedes the time components of the representation.\n    H is the hour designator that follows the value for the number of hours.\n    M is the minute designator that follows the value for the number of minutes.\n    S is the second designator that follows the value for the number of seconds.\n\n    Note the time designator, T, that precedes the time value.\n\n    Matches moment.js, Luxon and DateFns implementations\n    ,/. is valid for decimal places and +/- is a valid prefix\n  `,\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!ISO_DURATION.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${value}`);\n        }\n        return value;\n    },\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!ISO_DURATION.test(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${value}`);\n        }\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ISO Durations but got a: ${ast.kind}`, { nodes: ast });\n        }\n        if (!ISO_DURATION.test(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISO Duration: ${ast.value}`, { nodes: ast });\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'Duration',\n            type: 'string',\n            pattern: ISO_DURATION.source,\n        },\n    },\n};\nexports.GraphQLISO8601Duration = new graphql_1.GraphQLScalarType({\n    ...exports.GraphQLDurationConfig,\n    name: 'ISO8601Duration',\n});\nexports.GraphQLDuration = new graphql_1.GraphQLScalarType({\n    ...exports.GraphQLDurationConfig,\n    name: 'Duration',\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,sBAAsB,GAAGH,OAAO,CAACI,qBAAqB,GAAG,KAAK,CAAC;AACjG,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA,MAAME,YAAY,GAAG,sOAAsO;AAC3PR,OAAO,CAACI,qBAAqB,GAAG;EAC5BK,IAAI,EAAE,UAAU;EAChBC,WAAW,EAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EACCC,SAASA,CAACV,KAAK,EAAE;IACb,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACK,kBAAkB,EAAG,wBAAuBX,KAAM,EAAC,CAAC;IAC7E;IACA,IAAI,CAACO,YAAY,CAACK,IAAI,CAACZ,KAAK,CAAC,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACK,kBAAkB,EAAG,sCAAqCX,KAAM,EAAC,CAAC;IAC3F;IACA,OAAOA,KAAK;EAChB,CAAC;EACDa,UAAUA,CAACb,KAAK,EAAE;IACd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACK,kBAAkB,EAAG,wBAAuBX,KAAM,EAAC,CAAC;IAC7E;IACA,IAAI,CAACO,YAAY,CAACK,IAAI,CAACZ,KAAK,CAAC,EAAE;MAC3B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACK,kBAAkB,EAAG,sCAAqCX,KAAM,EAAC,CAAC;IAC3F;IACA,OAAOA,KAAK;EAChB,CAAC;EACDc,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEZ,UAAU,CAACK,kBAAkB,EAAG,yDAAwDI,GAAG,CAACC,IAAK,EAAC,EAAE;QAAEG,KAAK,EAAEJ;MAAI,CAAC,CAAC;IACjI;IACA,IAAI,CAACR,YAAY,CAACK,IAAI,CAACG,GAAG,CAACf,KAAK,CAAC,EAAE;MAC/B,MAAM,CAAC,CAAC,EAAEM,UAAU,CAACK,kBAAkB,EAAG,sCAAqCI,GAAG,CAACf,KAAM,EAAC,EAAE;QAAEmB,KAAK,EAAEJ;MAAI,CAAC,CAAC;IAC/G;IACA,OAAOA,GAAG,CAACf,KAAK;EACpB,CAAC;EACDoB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAElB,YAAY,CAACmB;IAC1B;EACJ;AACJ,CAAC;AACD3B,OAAO,CAACG,sBAAsB,GAAG,IAAIE,SAAS,CAACuB,iBAAiB,CAAC;EAC7D,GAAG5B,OAAO,CAACI,qBAAqB;EAChCK,IAAI,EAAE;AACV,CAAC,CAAC;AACFT,OAAO,CAACE,eAAe,GAAG,IAAIG,SAAS,CAACuB,iBAAiB,CAAC;EACtD,GAAG5B,OAAO,CAACI,qBAAqB;EAChCK,IAAI,EAAE;AACV,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}