{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLIPCPatent = exports.GraphQLIPCPatentConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n/* 1. [A-H] represents the Section Level of the Classification\n   2. \\d{2} represents the class level\n   3. [A-Z] represents the subclass level\n   4. \\/ separates the subclass from the subgroup\n   5. \\d{2,4} represents the subgroup level\n      (Only four levels of subgroup, as far as I know)\n*/\nconst IPC_PATENT_REGEX = /^[A-H]\\d{2}[A-Z] \\d{1,2}\\/\\d{2,4}$/;\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, {\n      nodes: ast\n    });\n  }\n  if (!IPC_PATENT_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPC Class Symbol: ${value}`, {\n      nodes: ast\n    });\n  }\n  return value;\n};\nconst specifiedByURL = 'https://www.wipo.int/classifications/ipc/en/';\nexports.GraphQLIPCPatentConfig = {\n  name: 'IPCPatent',\n  description: `A field whose value is an IPC Class Symbol within the International Patent Classification System: https://www.wipo.int/classifications/ipc/en/`,\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as an IPC Class Symbol but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  specifiedByURL,\n  specifiedByUrl: specifiedByURL,\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'DeweyDecimal',\n      type: 'string',\n      pattern: IPC_PATENT_REGEX.source\n    }\n  }\n};\nexports.GraphQLIPCPatent = new graphql_1.GraphQLScalarType(exports.GraphQLIPCPatentConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLIPCPatent","GraphQLIPCPatentConfig","graphql_1","require","error_js_1","IPC_PATENT_REGEX","validate","ast","createGraphQLError","nodes","test","specifiedByURL","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","specifiedByUrl","extensions","codegenScalarType","jsonSchema","title","type","pattern","source","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/patent/IPCPatent.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLIPCPatent = exports.GraphQLIPCPatentConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n/* 1. [A-H] represents the Section Level of the Classification\n   2. \\d{2} represents the class level\n   3. [A-Z] represents the subclass level\n   4. \\/ separates the subclass from the subgroup\n   5. \\d{2,4} represents the subgroup level\n      (Only four levels of subgroup, as far as I know)\n*/\nconst IPC_PATENT_REGEX = /^[A-H]\\d{2}[A-Z] \\d{1,2}\\/\\d{2,4}$/;\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, { nodes: ast });\n    }\n    if (!IPC_PATENT_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPC Class Symbol: ${value}`, { nodes: ast });\n    }\n    return value;\n};\nconst specifiedByURL = 'https://www.wipo.int/classifications/ipc/en/';\nexports.GraphQLIPCPatentConfig = {\n    name: 'IPCPatent',\n    description: `A field whose value is an IPC Class Symbol within the International Patent Classification System: https://www.wipo.int/classifications/ipc/en/`,\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as an IPC Class Symbol but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    specifiedByURL,\n    specifiedByUrl: specifiedByURL,\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'DeweyDecimal',\n            type: 'string',\n            pattern: IPC_PATENT_REGEX.source,\n        },\n    },\n};\nexports.GraphQLIPCPatent = new graphql_1.GraphQLScalarType(exports.GraphQLIPCPatentConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,sBAAsB,GAAG,KAAK,CAAC;AAClE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,gBAAgB,GAAG,oCAAoC;AAC7D,MAAMC,QAAQ,GAAGA,CAACP,KAAK,EAAEQ,GAAG,KAAK;EAC7B,IAAI,OAAOR,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,wBAAuBT,KAAM,EAAC,EAAE;MAAEU,KAAK,EAAEF;IAAI,CAAC,CAAC;EAC7F;EACA,IAAI,CAACF,gBAAgB,CAACK,IAAI,CAACX,KAAK,CAAC,EAAE;IAC/B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,0CAAyCT,KAAM,EAAC,EAAE;MAAEU,KAAK,EAAEF;IAAI,CAAC,CAAC;EAC/G;EACA,OAAOR,KAAK;AAChB,CAAC;AACD,MAAMY,cAAc,GAAG,8CAA8C;AACrEb,OAAO,CAACG,sBAAsB,GAAG;EAC7BW,IAAI,EAAE,WAAW;EACjBC,WAAW,EAAG,gJAA+I;EAC7JC,SAAS,EAAER,QAAQ;EACnBS,UAAU,EAAET,QAAQ;EACpBU,YAAYA,CAACT,GAAG,EAAE;IACd,IAAIA,GAAG,CAACU,IAAI,KAAKf,SAAS,CAACgB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACI,kBAAkB,EAAG,+DAA8DD,GAAG,CAACU,IAAK,EAAC,EAAE;QAChHR,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACR,KAAK,EAAEQ,GAAG,CAAC;EACnC,CAAC;EACDI,cAAc;EACdS,cAAc,EAAET,cAAc;EAC9BU,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAErB,gBAAgB,CAACsB;IAC9B;EACJ;AACJ,CAAC;AACD7B,OAAO,CAACE,gBAAgB,GAAG,IAAIE,SAAS,CAAC0B,iBAAiB,CAAC9B,OAAO,CAACG,sBAAsB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}