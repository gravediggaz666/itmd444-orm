{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLSafeInt = exports.GraphQLSafeIntConfig = void 0;\n// Based on https://github.com/stems/graphql-bigint/\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nconst specifiedByURL = 'https://www.ecma-international.org/ecma-262/#sec-number.issafeinteger';\nexports.GraphQLSafeIntConfig = {\n  name: 'SafeInt',\n  description: 'The `SafeInt` scalar type represents non-fractional signed whole numeric values that are ' + 'considered safe as defined by the ECMAScript specification.',\n  specifiedByURL,\n  specifiedByUrl: specifiedByURL,\n  serialize(outputValue) {\n    const coercedValue = (0, utilities_js_1.serializeObject)(outputValue);\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n    let num = coercedValue;\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${coercedValue}`);\n    }\n    if (!Number.isSafeInteger(num)) {\n      throw (0, error_js_1.createGraphQLError)('SafeInt cannot represent unsafe integer value: ' + coercedValue);\n    }\n    return num;\n  },\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${inputValue}`);\n    }\n    if (!Number.isSafeInteger(inputValue)) {\n      throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent unsafe integer value: ${inputValue}`);\n    }\n    return inputValue;\n  },\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== graphql_1.Kind.INT) {\n      throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${(0, graphql_1.print)(valueNode)}`, {\n        nodes: valueNode\n      });\n    }\n    const num = parseInt(valueNode.value, 10);\n    if (!Number.isSafeInteger(num)) {\n      throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent unsafe integer value: ${valueNode.value}`, {\n        nodes: valueNode\n      });\n    }\n    return num;\n  },\n  extensions: {\n    codegenScalarType: 'number',\n    jsonSchema: {\n      title: 'SafeInt',\n      type: 'integer',\n      minimum: Number.MIN_SAFE_INTEGER,\n      maximum: Number.MAX_SAFE_INTEGER\n    }\n  }\n};\nexports.GraphQLSafeInt = new graphql_1.GraphQLScalarType(exports.GraphQLSafeIntConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLSafeInt","GraphQLSafeIntConfig","graphql_1","require","error_js_1","utilities_js_1","specifiedByURL","name","description","specifiedByUrl","serialize","outputValue","coercedValue","serializeObject","num","Number","isInteger","createGraphQLError","isSafeInteger","parseValue","inputValue","parseLiteral","valueNode","kind","Kind","INT","print","nodes","parseInt","extensions","codegenScalarType","jsonSchema","title","type","minimum","MIN_SAFE_INTEGER","maximum","MAX_SAFE_INTEGER","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/SafeInt.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLSafeInt = exports.GraphQLSafeIntConfig = void 0;\n// Based on https://github.com/stems/graphql-bigint/\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nconst specifiedByURL = 'https://www.ecma-international.org/ecma-262/#sec-number.issafeinteger';\nexports.GraphQLSafeIntConfig = {\n    name: 'SafeInt',\n    description: 'The `SafeInt` scalar type represents non-fractional signed whole numeric values that are ' +\n        'considered safe as defined by the ECMAScript specification.',\n    specifiedByURL,\n    specifiedByUrl: specifiedByURL,\n    serialize(outputValue) {\n        const coercedValue = (0, utilities_js_1.serializeObject)(outputValue);\n        if (typeof coercedValue === 'boolean') {\n            return coercedValue ? 1 : 0;\n        }\n        let num = coercedValue;\n        if (typeof coercedValue === 'string' && coercedValue !== '') {\n            num = Number(coercedValue);\n        }\n        if (typeof num !== 'number' || !Number.isInteger(num)) {\n            throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${coercedValue}`);\n        }\n        if (!Number.isSafeInteger(num)) {\n            throw (0, error_js_1.createGraphQLError)('SafeInt cannot represent unsafe integer value: ' + coercedValue);\n        }\n        return num;\n    },\n    parseValue(inputValue) {\n        if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n            throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${inputValue}`);\n        }\n        if (!Number.isSafeInteger(inputValue)) {\n            throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent unsafe integer value: ${inputValue}`);\n        }\n        return inputValue;\n    },\n    parseLiteral(valueNode) {\n        if (valueNode.kind !== graphql_1.Kind.INT) {\n            throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent non-integer value: ${(0, graphql_1.print)(valueNode)}`, {\n                nodes: valueNode,\n            });\n        }\n        const num = parseInt(valueNode.value, 10);\n        if (!Number.isSafeInteger(num)) {\n            throw (0, error_js_1.createGraphQLError)(`SafeInt cannot represent unsafe integer value: ${valueNode.value}`, {\n                nodes: valueNode,\n            });\n        }\n        return num;\n    },\n    extensions: {\n        codegenScalarType: 'number',\n        jsonSchema: {\n            title: 'SafeInt',\n            type: 'integer',\n            minimum: Number.MIN_SAFE_INTEGER,\n            maximum: Number.MAX_SAFE_INTEGER,\n        },\n    },\n};\nexports.GraphQLSafeInt = new graphql_1.GraphQLScalarType(exports.GraphQLSafeIntConfig);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}