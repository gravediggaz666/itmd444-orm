{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLURL = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nexports.GraphQLURL = new graphql_1.GraphQLScalarType({\n  name: 'URL',\n  description: 'A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.',\n  serialize(value) {\n    if (value === null) {\n      return value;\n    }\n    return new URL(value.toString()).toString();\n  },\n  parseValue: value => value === null ? value : new URL(value.toString()),\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as URLs but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (ast.value === null) {\n      return ast.value;\n    } else {\n      return new URL(ast.value.toString());\n    }\n  },\n  extensions: {\n    codegenScalarType: 'URL | string',\n    jsonSchema: {\n      type: 'string',\n      format: 'uri'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLURL","graphql_1","require","error_js_1","GraphQLScalarType","name","description","serialize","URL","toString","parseValue","parseLiteral","ast","kind","Kind","STRING","createGraphQLError","nodes","extensions","codegenScalarType","jsonSchema","type","format"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/URL.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLURL = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nexports.GraphQLURL = new graphql_1.GraphQLScalarType({\n    name: 'URL',\n    description: 'A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.',\n    serialize(value) {\n        if (value === null) {\n            return value;\n        }\n        return new URL(value.toString()).toString();\n    },\n    parseValue: value => (value === null ? value : new URL(value.toString())),\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as URLs but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        if (ast.value === null) {\n            return ast.value;\n        }\n        else {\n            return new URL(ast.value.toString());\n        }\n    },\n    extensions: {\n        codegenScalarType: 'URL | string',\n        jsonSchema: {\n            type: 'string',\n            format: 'uri',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,UAAU,GAAG,KAAK,CAAC;AAC3B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzCJ,OAAO,CAACE,UAAU,GAAG,IAAIC,SAAS,CAACG,iBAAiB,CAAC;EACjDC,IAAI,EAAE,KAAK;EACXC,WAAW,EAAE,wHAAwH;EACrIC,SAASA,CAACR,KAAK,EAAE;IACb,IAAIA,KAAK,KAAK,IAAI,EAAE;MAChB,OAAOA,KAAK;IAChB;IACA,OAAO,IAAIS,GAAG,CAACT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC,CAAC;EAC/C,CAAC;EACDC,UAAU,EAAEX,KAAK,IAAKA,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAG,IAAIS,GAAG,CAACT,KAAK,CAACU,QAAQ,CAAC,CAAC,CAAE;EACzEE,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEZ,UAAU,CAACa,kBAAkB,EAAG,gDAA+CJ,GAAG,CAACC,IAAK,EAAC,EAAE;QACjGI,KAAK,EAAEL;MACX,CAAC,CAAC;IACN;IACA,IAAIA,GAAG,CAACb,KAAK,KAAK,IAAI,EAAE;MACpB,OAAOa,GAAG,CAACb,KAAK;IACpB,CAAC,MACI;MACD,OAAO,IAAIS,GAAG,CAACI,GAAG,CAACb,KAAK,CAACU,QAAQ,CAAC,CAAC,CAAC;IACxC;EACJ,CAAC;EACDS,UAAU,EAAE;IACRC,iBAAiB,EAAE,cAAc;IACjCC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}