{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLEmailAddress = exports.GraphQLEmailAddressConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n  const EMAIL_ADDRESS_REGEX = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, {\n      nodes: ast\n    });\n  }\n  if (!EMAIL_ADDRESS_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid email address: ${value}`, {\n      nodes: ast\n    });\n  }\n  return value;\n};\nconst specifiedByURL = 'https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address';\nexports.GraphQLEmailAddressConfig = {\n  name: 'EmailAddress',\n  description: 'A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.',\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as email addresses but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  specifiedByURL,\n  specifiedByUrl: specifiedByURL,\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      type: 'string',\n      format: 'email'\n    }\n  }\n};\nexports.GraphQLEmailAddress = new graphql_1.GraphQLScalarType(exports.GraphQLEmailAddressConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLEmailAddress","GraphQLEmailAddressConfig","graphql_1","require","error_js_1","validate","ast","EMAIL_ADDRESS_REGEX","createGraphQLError","nodes","test","specifiedByURL","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","specifiedByUrl","extensions","codegenScalarType","jsonSchema","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/EmailAddress.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLEmailAddress = exports.GraphQLEmailAddressConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n    const EMAIL_ADDRESS_REGEX = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, { nodes: ast });\n    }\n    if (!EMAIL_ADDRESS_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid email address: ${value}`, { nodes: ast });\n    }\n    return value;\n};\nconst specifiedByURL = 'https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address';\nexports.GraphQLEmailAddressConfig = {\n    name: 'EmailAddress',\n    description: 'A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.',\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as email addresses but got a: ${ast.kind}`, { nodes: ast });\n        }\n        return validate(ast.value, ast);\n    },\n    specifiedByURL,\n    specifiedByUrl: specifiedByURL,\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            type: 'string',\n            format: 'email',\n        },\n    },\n};\nexports.GraphQLEmailAddress = new graphql_1.GraphQLScalarType(exports.GraphQLEmailAddressConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,yBAAyB,GAAG,KAAK,CAAC;AACxE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,QAAQ,GAAGA,CAACN,KAAK,EAAEO,GAAG,KAAK;EAC7B,MAAMC,mBAAmB,GAAG,uIAAuI;EACnK,IAAI,OAAOR,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,wBAAuBT,KAAM,EAAC,EAAE;MAAEU,KAAK,EAAEH;IAAI,CAAC,CAAC;EAC7F;EACA,IAAI,CAACC,mBAAmB,CAACG,IAAI,CAACX,KAAK,CAAC,EAAE;IAClC,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,uCAAsCT,KAAM,EAAC,EAAE;MAAEU,KAAK,EAAEH;IAAI,CAAC,CAAC;EAC5G;EACA,OAAOP,KAAK;AAChB,CAAC;AACD,MAAMY,cAAc,GAAG,wEAAwE;AAC/Fb,OAAO,CAACG,yBAAyB,GAAG;EAChCW,IAAI,EAAE,cAAc;EACpBC,WAAW,EAAE,+KAA+K;EAC5LC,SAAS,EAAET,QAAQ;EACnBU,UAAU,EAAEV,QAAQ;EACpBW,YAAYA,CAACV,GAAG,EAAE;IACd,IAAIA,GAAG,CAACW,IAAI,KAAKf,SAAS,CAACgB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACI,kBAAkB,EAAG,2DAA0DF,GAAG,CAACW,IAAK,EAAC,EAAE;QAAER,KAAK,EAAEH;MAAI,CAAC,CAAC;IACnI;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EACnC,CAAC;EACDK,cAAc;EACdS,cAAc,EAAET,cAAc;EAC9BU,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC;AACD3B,OAAO,CAACE,mBAAmB,GAAG,IAAIE,SAAS,CAACwB,iBAAiB,CAAC5B,OAAO,CAACG,yBAAyB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}