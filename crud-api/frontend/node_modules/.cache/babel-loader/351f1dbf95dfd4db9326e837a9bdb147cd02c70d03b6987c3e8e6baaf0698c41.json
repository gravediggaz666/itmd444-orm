{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLTimeZone = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validateTimeZone = (str, ast) => {\n  if (!(Intl === null || Intl === void 0 ? void 0 : Intl.DateTimeFormat().resolvedOptions().timeZone)) {\n    throw (0, error_js_1.createGraphQLError)('Time zones are not available in this environment', ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  try {\n    Intl.DateTimeFormat(undefined, {\n      timeZone: str\n    });\n    return str;\n  } catch (ex) {\n    if (ex instanceof RangeError) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid IANA time zone: ${str}`, ast ? {\n        nodes: ast\n      } : undefined);\n    } else {\n      throw (0, error_js_1.createGraphQLError)('Could not validate time zone.', ast ? {\n        nodes: ast\n      } : undefined);\n    }\n  }\n};\nexports.GraphQLTimeZone = new graphql_1.GraphQLScalarType({\n  name: 'TimeZone',\n  description: 'A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones',\n  serialize: validateTimeZone,\n  parseValue: validateTimeZone,\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only sanitize time zone strings, but got: ${ast.kind}`);\n    }\n    return validateTimeZone(ast.value);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'TimeZone',\n      type: 'string',\n      pattern: '^(?:[A-Za-z0-9_]|(?:%[0-9A-Fa-f]{2}))+'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLTimeZone","graphql_1","require","error_js_1","validateTimeZone","str","ast","Intl","DateTimeFormat","resolvedOptions","timeZone","createGraphQLError","nodes","undefined","ex","RangeError","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/TimeZone.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLTimeZone = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validateTimeZone = (str, ast) => {\n    if (!(Intl === null || Intl === void 0 ? void 0 : Intl.DateTimeFormat().resolvedOptions().timeZone)) {\n        throw (0, error_js_1.createGraphQLError)('Time zones are not available in this environment', ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    try {\n        Intl.DateTimeFormat(undefined, { timeZone: str });\n        return str;\n    }\n    catch (ex) {\n        if (ex instanceof RangeError) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid IANA time zone: ${str}`, ast\n                ? {\n                    nodes: ast,\n                }\n                : undefined);\n        }\n        else {\n            throw (0, error_js_1.createGraphQLError)('Could not validate time zone.', ast\n                ? {\n                    nodes: ast,\n                }\n                : undefined);\n        }\n    }\n};\nexports.GraphQLTimeZone = new graphql_1.GraphQLScalarType({\n    name: 'TimeZone',\n    description: 'A field whose value exists in the standard IANA Time Zone Database: https://www.iana.org/time-zones',\n    serialize: validateTimeZone,\n    parseValue: validateTimeZone,\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only sanitize time zone strings, but got: ${ast.kind}`);\n        }\n        return validateTimeZone(ast.value);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'TimeZone',\n            type: 'string',\n            pattern: '^(?:[A-Za-z0-9_]|(?:%[0-9A-Fa-f]{2}))+',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnC,IAAI,EAAEC,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE;IACjG,MAAM,CAAC,CAAC,EAAEP,UAAU,CAACQ,kBAAkB,EAAE,kDAAkD,EAAEL,GAAG,GAC1F;MACEM,KAAK,EAAEN;IACX,CAAC,GACCO,SAAS,CAAC;EACpB;EACA,IAAI;IACAN,IAAI,CAACC,cAAc,CAACK,SAAS,EAAE;MAAEH,QAAQ,EAAEL;IAAI,CAAC,CAAC;IACjD,OAAOA,GAAG;EACd,CAAC,CACD,OAAOS,EAAE,EAAE;IACP,IAAIA,EAAE,YAAYC,UAAU,EAAE;MAC1B,MAAM,CAAC,CAAC,EAAEZ,UAAU,CAACQ,kBAAkB,EAAG,wCAAuCN,GAAI,EAAC,EAAEC,GAAG,GACrF;QACEM,KAAK,EAAEN;MACX,CAAC,GACCO,SAAS,CAAC;IACpB,CAAC,MACI;MACD,MAAM,CAAC,CAAC,EAAEV,UAAU,CAACQ,kBAAkB,EAAE,+BAA+B,EAAEL,GAAG,GACvE;QACEM,KAAK,EAAEN;MACX,CAAC,GACCO,SAAS,CAAC;IACpB;EACJ;AACJ,CAAC;AACDf,OAAO,CAACE,eAAe,GAAG,IAAIC,SAAS,CAACe,iBAAiB,CAAC;EACtDC,IAAI,EAAE,UAAU;EAChBC,WAAW,EAAE,qGAAqG;EAClHC,SAAS,EAAEf,gBAAgB;EAC3BgB,UAAU,EAAEhB,gBAAgB;EAC5BiB,YAAYA,CAACf,GAAG,EAAE;IACd,IAAIA,GAAG,CAACgB,IAAI,KAAKrB,SAAS,CAACsB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAErB,UAAU,CAACQ,kBAAkB,EAAG,iDAAgDL,GAAG,CAACgB,IAAK,EAAC,CAAC;IACzG;IACA,OAAOlB,gBAAgB,CAACE,GAAG,CAACP,KAAK,CAAC;EACtC,CAAC;EACD0B,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,UAAU;MACjBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}