{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLNonPositiveFloat = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nexports.GraphQLNonPositiveFloat = new graphql_1.GraphQLScalarType({\n  name: 'NonPositiveFloat',\n  description: 'Floats that will have a value of 0 or less.',\n  serialize(value) {\n    return (0, utilities_js_1.processValue)(value, 'NonPositiveFloat');\n  },\n  parseValue(value) {\n    return (0, utilities_js_1.processValue)(value, 'NonPositiveFloat');\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.FLOAT && ast.kind !== graphql_1.Kind.INT) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate floating point numbers as non-positive floating point numbers but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return (0, utilities_js_1.processValue)(ast.value, 'NonPositiveFloat');\n  },\n  extensions: {\n    codegenScalarType: 'number',\n    jsonSchema: {\n      title: 'NonPositiveFloat',\n      type: 'number',\n      maximum: 0\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLNonPositiveFloat","graphql_1","require","error_js_1","utilities_js_1","GraphQLScalarType","name","description","serialize","processValue","parseValue","parseLiteral","ast","kind","Kind","FLOAT","INT","createGraphQLError","nodes","extensions","codegenScalarType","jsonSchema","title","type","maximum"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/NonPositiveFloat.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLNonPositiveFloat = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\nexports.GraphQLNonPositiveFloat = new graphql_1.GraphQLScalarType({\n    name: 'NonPositiveFloat',\n    description: 'Floats that will have a value of 0 or less.',\n    serialize(value) {\n        return (0, utilities_js_1.processValue)(value, 'NonPositiveFloat');\n    },\n    parseValue(value) {\n        return (0, utilities_js_1.processValue)(value, 'NonPositiveFloat');\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.FLOAT && ast.kind !== graphql_1.Kind.INT) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate floating point numbers as non-positive floating point numbers but got a: ${ast.kind}`, { nodes: ast });\n        }\n        return (0, utilities_js_1.processValue)(ast.value, 'NonPositiveFloat');\n    },\n    extensions: {\n        codegenScalarType: 'number',\n        jsonSchema: {\n            title: 'NonPositiveFloat',\n            type: 'number',\n            maximum: 0,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAChDJ,OAAO,CAACE,uBAAuB,GAAG,IAAIC,SAAS,CAACI,iBAAiB,CAAC;EAC9DC,IAAI,EAAE,kBAAkB;EACxBC,WAAW,EAAE,6CAA6C;EAC1DC,SAASA,CAACT,KAAK,EAAE;IACb,OAAO,CAAC,CAAC,EAAEK,cAAc,CAACK,YAAY,EAAEV,KAAK,EAAE,kBAAkB,CAAC;EACtE,CAAC;EACDW,UAAUA,CAACX,KAAK,EAAE;IACd,OAAO,CAAC,CAAC,EAAEK,cAAc,CAACK,YAAY,EAAEV,KAAK,EAAE,kBAAkB,CAAC;EACtE,CAAC;EACDY,YAAYA,CAACC,GAAG,EAAE;IACd,IAAIA,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACC,KAAK,IAAIH,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACE,GAAG,EAAE;MACtE,MAAM,CAAC,CAAC,EAAEb,UAAU,CAACc,kBAAkB,EAAG,8FAA6FL,GAAG,CAACC,IAAK,EAAC,EAAE;QAAEK,KAAK,EAAEN;MAAI,CAAC,CAAC;IACtK;IACA,OAAO,CAAC,CAAC,EAAER,cAAc,CAACK,YAAY,EAAEG,GAAG,CAACb,KAAK,EAAE,kBAAkB,CAAC;EAC1E,CAAC;EACDoB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAE;IACb;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}