{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLAccountNumber = exports.GraphQLAccountNumberConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst regexp = /^([a-zA-Z0-9]){5,17}$/;\nconst validator = rtn => regexp.test(rtn);\nconst validate = (account, ast) => {\n  if (typeof account !== 'string') {\n    throw (0, error_js_1.createGraphQLError)('can only parse String', ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!validator(account)) {\n    throw (0, error_js_1.createGraphQLError)('must be alphanumeric between 5-17', ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return account;\n};\nexports.GraphQLAccountNumberConfig = {\n  name: 'AccountNumber',\n  description: 'Banking account number is a string of 5 to 17 alphanumeric values for ' + 'representing an generic account number',\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind === graphql_1.Kind.STRING) {\n      return validate(ast.value, ast);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Account Number can only parse String but got '${ast.kind}'`, {\n      nodes: [ast]\n    });\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'AccountNumber',\n      type: 'string',\n      pattern: regexp.source\n    }\n  }\n};\nexports.GraphQLAccountNumber = new graphql_1.GraphQLScalarType(exports.GraphQLAccountNumberConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLAccountNumber","GraphQLAccountNumberConfig","graphql_1","require","error_js_1","regexp","validator","rtn","test","validate","account","ast","createGraphQLError","nodes","undefined","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/AccountNumber.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLAccountNumber = exports.GraphQLAccountNumberConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst regexp = /^([a-zA-Z0-9]){5,17}$/;\nconst validator = rtn => regexp.test(rtn);\nconst validate = (account, ast) => {\n    if (typeof account !== 'string') {\n        throw (0, error_js_1.createGraphQLError)('can only parse String', ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    if (!validator(account)) {\n        throw (0, error_js_1.createGraphQLError)('must be alphanumeric between 5-17', ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    return account;\n};\nexports.GraphQLAccountNumberConfig = {\n    name: 'AccountNumber',\n    description: 'Banking account number is a string of 5 to 17 alphanumeric values for ' +\n        'representing an generic account number',\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind === graphql_1.Kind.STRING) {\n            return validate(ast.value, ast);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Account Number can only parse String but got '${ast.kind}'`, {\n            nodes: [ast],\n        });\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'AccountNumber',\n            type: 'string',\n            pattern: regexp.source,\n        },\n    },\n};\nexports.GraphQLAccountNumber = new graphql_1.GraphQLScalarType(exports.GraphQLAccountNumberConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,0BAA0B,GAAG,KAAK,CAAC;AAC1E,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,MAAM,GAAG,uBAAuB;AACtC,MAAMC,SAAS,GAAGC,GAAG,IAAIF,MAAM,CAACG,IAAI,CAACD,GAAG,CAAC;AACzC,MAAME,QAAQ,GAAGA,CAACC,OAAO,EAAEC,GAAG,KAAK;EAC/B,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;IAC7B,MAAM,CAAC,CAAC,EAAEN,UAAU,CAACQ,kBAAkB,EAAE,uBAAuB,EAAED,GAAG,GAC/D;MACEE,KAAK,EAAEF;IACX,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,IAAI,CAACR,SAAS,CAACI,OAAO,CAAC,EAAE;IACrB,MAAM,CAAC,CAAC,EAAEN,UAAU,CAACQ,kBAAkB,EAAE,mCAAmC,EAAED,GAAG,GAC3E;MACEE,KAAK,EAAEF;IACX,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,OAAOJ,OAAO;AAClB,CAAC;AACDZ,OAAO,CAACG,0BAA0B,GAAG;EACjCc,IAAI,EAAE,eAAe;EACrBC,WAAW,EAAE,wEAAwE,GACjF,wCAAwC;EAC5CC,SAASA,CAAClB,KAAK,EAAE;IACb,OAAOU,QAAQ,CAACV,KAAK,CAAC;EAC1B,CAAC;EACDmB,UAAUA,CAACnB,KAAK,EAAE;IACd,OAAOU,QAAQ,CAACV,KAAK,CAAC;EAC1B,CAAC;EACDoB,YAAYA,CAACR,GAAG,EAAE;IACd,IAAIA,GAAG,CAACS,IAAI,KAAKlB,SAAS,CAACmB,IAAI,CAACC,MAAM,EAAE;MACpC,OAAOb,QAAQ,CAACE,GAAG,CAACZ,KAAK,EAAEY,GAAG,CAAC;IACnC;IACA,MAAM,CAAC,CAAC,EAAEP,UAAU,CAACQ,kBAAkB,EAAG,iDAAgDD,GAAG,CAACS,IAAK,GAAE,EAAE;MACnGP,KAAK,EAAE,CAACF,GAAG;IACf,CAAC,CAAC;EACN,CAAC;EACDY,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,eAAe;MACtBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEvB,MAAM,CAACwB;IACpB;EACJ;AACJ,CAAC;AACD/B,OAAO,CAACE,oBAAoB,GAAG,IAAIE,SAAS,CAAC4B,iBAAiB,CAAChC,OAAO,CAACG,0BAA0B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}