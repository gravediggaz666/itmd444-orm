{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLPostalCode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// We're going to start with a limited set as suggested here:\n// http://www.pixelenvision.com/1708/zip-postal-code-validation-regex-php-code-for-12-countries/\n// and here:\n// https://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex\n//\n// Which gives us the following countries:\n//\n// US - United States\n// UK - United Kingdom\n// DE - Germany\n// CA - Canada\n// FR - France\n// IT - Italy\n// AU - Australia\n// NL - Netherlands\n// ES - Spain\n// DK - Denmark\n// SE - Sweden\n// BE - Belgium\n// IN - India\n// AT - Austria\n// PT - Portugal\n// CH - Switzerland\n// LU - Luxembourg\n// IR - Iran\n// JP - Japan\n// UA - Ukraine\n//\n// This is really a practical decision of weight (of the package) vs. completeness.\n//\n// In the future we might expand this list and use the more comprehensive list found here:\n// http://unicode.org/cldr/trac/browser/tags/release-26-0-1/common/supplemental/postalCodeData.xml\n// prettier-ignore\nconst POSTAL_CODE_REGEXES = [/* US */ /*#__PURE__*/ /^\\d{5}([-]?\\d{4})?$/, /* UK */ /*#__PURE__*/ /^(GIR|[A-Z]\\d[A-Z\\d]??|[A-Z]{2}\\d[A-Z\\d]??)[ ]??(\\d[A-Z]{2})$/, /* DE */ /*#__PURE__*/ /\\b((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))\\b/, /* CA */ /*#__PURE__*/ /^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) {0,1}(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$/, /* FR */ /*#__PURE__*/ /^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/, /* IT */ /*#__PURE__*/ /^(V-|I-)?[0-9]{5}$/, /* AU */ /*#__PURE__*/ /^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/, /* NL */ /*#__PURE__*/ /^[1-9][0-9]{3}\\s?([a-zA-Z]{2})?$/, /* ES */ /*#__PURE__*/ /^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$/, /* DK */ /*#__PURE__*/ /^([D|d][K|k]( |-))?[1-9]{1}[0-9]{3}$/, /* SE */ /*#__PURE__*/ /^(s-|S-){0,1}[0-9]{3}\\s?[0-9]{2}$/, /* BE */ /*#__PURE__*/ /^[1-9]{1}[0-9]{3}$/, /* IN */ /*#__PURE__*/ /^\\d{6}$/, /* AT */ /*#__PURE__*/ /^\\d{4}$/, /* PT */ /*#__PURE__*/ /^\\d{4}([\\-]\\d{3})?$/, /* CH */ /*#__PURE__*/ /^\\d{4}$/, /* LU */ /*#__PURE__*/ /^\\d{4}$/, /* IR */ /*#__PURE__*/ /^[1,3-9]{10}$/, /* JP */ /*#__PURE__*/ /^\\d{3}-\\d{4}$/, /* UA */ /*#__PURE__*/ /^\\d{5}$/];\nfunction _testPostalCode(postalCode) {\n  let result = false;\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < POSTAL_CODE_REGEXES.length; i++) {\n    const regex = POSTAL_CODE_REGEXES[i];\n    if (regex.test(postalCode)) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\nexports.GraphQLPostalCode = new graphql_1.GraphQLScalarType({\n  name: 'PostalCode',\n  description: 'A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.',\n  serialize(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!_testPostalCode(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${value}`);\n    }\n    return value;\n  },\n  parseValue(value) {\n    if (typeof value !== 'string') {\n      throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n    if (!_testPostalCode(value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${value}`);\n    }\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as postal codes but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (!_testPostalCode(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${ast.value}`, {\n        nodes: ast\n      });\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'PostalCode',\n      oneOf: POSTAL_CODE_REGEXES.map(regex => ({\n        type: 'string',\n        pattern: regex.source\n      }))\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLPostalCode","graphql_1","require","error_js_1","POSTAL_CODE_REGEXES","_testPostalCode","postalCode","result","i","length","regex","test","GraphQLScalarType","name","description","serialize","createGraphQLError","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","oneOf","map","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/PostalCode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLPostalCode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\n// We're going to start with a limited set as suggested here:\n// http://www.pixelenvision.com/1708/zip-postal-code-validation-regex-php-code-for-12-countries/\n// and here:\n// https://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex\n//\n// Which gives us the following countries:\n//\n// US - United States\n// UK - United Kingdom\n// DE - Germany\n// CA - Canada\n// FR - France\n// IT - Italy\n// AU - Australia\n// NL - Netherlands\n// ES - Spain\n// DK - Denmark\n// SE - Sweden\n// BE - Belgium\n// IN - India\n// AT - Austria\n// PT - Portugal\n// CH - Switzerland\n// LU - Luxembourg\n// IR - Iran\n// JP - Japan\n// UA - Ukraine\n//\n// This is really a practical decision of weight (of the package) vs. completeness.\n//\n// In the future we might expand this list and use the more comprehensive list found here:\n// http://unicode.org/cldr/trac/browser/tags/release-26-0-1/common/supplemental/postalCodeData.xml\n// prettier-ignore\nconst POSTAL_CODE_REGEXES = [\n    /* US */ /*#__PURE__*/ /^\\d{5}([-]?\\d{4})?$/,\n    /* UK */ /*#__PURE__*/ /^(GIR|[A-Z]\\d[A-Z\\d]??|[A-Z]{2}\\d[A-Z\\d]??)[ ]??(\\d[A-Z]{2})$/,\n    /* DE */ /*#__PURE__*/ /\\b((?:0[1-46-9]\\d{3})|(?:[1-357-9]\\d{4})|(?:[4][0-24-9]\\d{3})|(?:[6][013-9]\\d{3}))\\b/,\n    /* CA */ /*#__PURE__*/ /^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) {0,1}(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$/,\n    /* FR */ /*#__PURE__*/ /^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$/,\n    /* IT */ /*#__PURE__*/ /^(V-|I-)?[0-9]{5}$/,\n    /* AU */ /*#__PURE__*/ /^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/,\n    /* NL */ /*#__PURE__*/ /^[1-9][0-9]{3}\\s?([a-zA-Z]{2})?$/,\n    /* ES */ /*#__PURE__*/ /^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$/,\n    /* DK */ /*#__PURE__*/ /^([D|d][K|k]( |-))?[1-9]{1}[0-9]{3}$/,\n    /* SE */ /*#__PURE__*/ /^(s-|S-){0,1}[0-9]{3}\\s?[0-9]{2}$/,\n    /* BE */ /*#__PURE__*/ /^[1-9]{1}[0-9]{3}$/,\n    /* IN */ /*#__PURE__*/ /^\\d{6}$/,\n    /* AT */ /*#__PURE__*/ /^\\d{4}$/,\n    /* PT */ /*#__PURE__*/ /^\\d{4}([\\-]\\d{3})?$/,\n    /* CH */ /*#__PURE__*/ /^\\d{4}$/,\n    /* LU */ /*#__PURE__*/ /^\\d{4}$/,\n    /* IR */ /*#__PURE__*/ /^[1,3-9]{10}$/,\n    /* JP */ /*#__PURE__*/ /^\\d{3}-\\d{4}$/,\n    /* UA */ /*#__PURE__*/ /^\\d{5}$/,\n];\nfunction _testPostalCode(postalCode) {\n    let result = false;\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < POSTAL_CODE_REGEXES.length; i++) {\n        const regex = POSTAL_CODE_REGEXES[i];\n        if (regex.test(postalCode)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nexports.GraphQLPostalCode = new graphql_1.GraphQLScalarType({\n    name: 'PostalCode',\n    description: 'A field whose value conforms to the standard postal code formats for United States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands, Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.',\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!_testPostalCode(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${value}`);\n        }\n        return value;\n    },\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n        }\n        if (!_testPostalCode(value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${value}`);\n        }\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as postal codes but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        if (!_testPostalCode(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid postal code: ${ast.value}`, { nodes: ast });\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'PostalCode',\n            oneOf: POSTAL_CODE_REGEXES.map(regex => ({\n                type: 'string',\n                pattern: regex.source,\n            })),\n        },\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}