{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Field = void 0;\nconst errors_1 = require(\"../errors\");\nconst decorators_1 = require(\"../helpers/decorators\");\nconst findType_1 = require(\"../helpers/findType\");\nconst getMetadataStorage_1 = require(\"../metadata/getMetadataStorage\");\nfunction Field(returnTypeFuncOrOptions, maybeOptions) {\n  return (prototype, propertyKey, descriptor) => {\n    if (typeof propertyKey === \"symbol\") {\n      throw new errors_1.SymbolKeysNotSupportedError();\n    }\n    const {\n      options,\n      returnTypeFunc\n    } = (0, decorators_1.getTypeDecoratorParams)(returnTypeFuncOrOptions, maybeOptions);\n    const isResolver = Boolean(descriptor);\n    const isResolverMethod = Boolean(descriptor && descriptor.value);\n    const {\n      getType,\n      typeOptions\n    } = (0, findType_1.findType)({\n      metadataKey: isResolverMethod ? \"design:returntype\" : \"design:type\",\n      prototype,\n      propertyKey,\n      returnTypeFunc,\n      typeOptions: options\n    });\n    (0, getMetadataStorage_1.getMetadataStorage)().collectClassFieldMetadata({\n      name: propertyKey,\n      schemaName: options.name || propertyKey,\n      getType,\n      typeOptions,\n      complexity: options.complexity,\n      target: prototype.constructor,\n      description: options.description,\n      deprecationReason: options.deprecationReason,\n      simple: options.simple\n    });\n    if (isResolver) {\n      (0, getMetadataStorage_1.getMetadataStorage)().collectFieldResolverMetadata({\n        kind: \"internal\",\n        methodName: propertyKey,\n        schemaName: options.name || propertyKey,\n        target: prototype.constructor,\n        complexity: options.complexity\n      });\n    }\n  };\n}\nexports.Field = Field;","map":{"version":3,"names":["Object","defineProperty","exports","value","Field","errors_1","require","decorators_1","findType_1","getMetadataStorage_1","returnTypeFuncOrOptions","maybeOptions","prototype","propertyKey","descriptor","SymbolKeysNotSupportedError","options","returnTypeFunc","getTypeDecoratorParams","isResolver","Boolean","isResolverMethod","getType","typeOptions","findType","metadataKey","getMetadataStorage","collectClassFieldMetadata","name","schemaName","complexity","target","constructor","description","deprecationReason","simple","collectFieldResolverMetadata","kind","methodName"],"sources":["/Users/snawz1/node_modules/type-graphql/build/cjs/decorators/Field.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Field = void 0;\nconst errors_1 = require(\"../errors\");\nconst decorators_1 = require(\"../helpers/decorators\");\nconst findType_1 = require(\"../helpers/findType\");\nconst getMetadataStorage_1 = require(\"../metadata/getMetadataStorage\");\nfunction Field(returnTypeFuncOrOptions, maybeOptions) {\n    return (prototype, propertyKey, descriptor) => {\n        if (typeof propertyKey === \"symbol\") {\n            throw new errors_1.SymbolKeysNotSupportedError();\n        }\n        const { options, returnTypeFunc } = (0, decorators_1.getTypeDecoratorParams)(returnTypeFuncOrOptions, maybeOptions);\n        const isResolver = Boolean(descriptor);\n        const isResolverMethod = Boolean(descriptor && descriptor.value);\n        const { getType, typeOptions } = (0, findType_1.findType)({\n            metadataKey: isResolverMethod ? \"design:returntype\" : \"design:type\",\n            prototype,\n            propertyKey,\n            returnTypeFunc,\n            typeOptions: options,\n        });\n        (0, getMetadataStorage_1.getMetadataStorage)().collectClassFieldMetadata({\n            name: propertyKey,\n            schemaName: options.name || propertyKey,\n            getType,\n            typeOptions,\n            complexity: options.complexity,\n            target: prototype.constructor,\n            description: options.description,\n            deprecationReason: options.deprecationReason,\n            simple: options.simple,\n        });\n        if (isResolver) {\n            (0, getMetadataStorage_1.getMetadataStorage)().collectFieldResolverMetadata({\n                kind: \"internal\",\n                methodName: propertyKey,\n                schemaName: options.name || propertyKey,\n                target: prototype.constructor,\n                complexity: options.complexity,\n            });\n        }\n    };\n}\nexports.Field = Field;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,KAAK,GAAG,KAAK,CAAC;AACtB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACtE,SAASF,KAAKA,CAACM,uBAAuB,EAAEC,YAAY,EAAE;EAClD,OAAO,CAACC,SAAS,EAAEC,WAAW,EAAEC,UAAU,KAAK;IAC3C,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE;MACjC,MAAM,IAAIR,QAAQ,CAACU,2BAA2B,CAAC,CAAC;IACpD;IACA,MAAM;MAAEC,OAAO;MAAEC;IAAe,CAAC,GAAG,CAAC,CAAC,EAAEV,YAAY,CAACW,sBAAsB,EAAER,uBAAuB,EAAEC,YAAY,CAAC;IACnH,MAAMQ,UAAU,GAAGC,OAAO,CAACN,UAAU,CAAC;IACtC,MAAMO,gBAAgB,GAAGD,OAAO,CAACN,UAAU,IAAIA,UAAU,CAACX,KAAK,CAAC;IAChE,MAAM;MAAEmB,OAAO;MAAEC;IAAY,CAAC,GAAG,CAAC,CAAC,EAAEf,UAAU,CAACgB,QAAQ,EAAE;MACtDC,WAAW,EAAEJ,gBAAgB,GAAG,mBAAmB,GAAG,aAAa;MACnET,SAAS;MACTC,WAAW;MACXI,cAAc;MACdM,WAAW,EAAEP;IACjB,CAAC,CAAC;IACF,CAAC,CAAC,EAAEP,oBAAoB,CAACiB,kBAAkB,EAAE,CAAC,CAACC,yBAAyB,CAAC;MACrEC,IAAI,EAAEf,WAAW;MACjBgB,UAAU,EAAEb,OAAO,CAACY,IAAI,IAAIf,WAAW;MACvCS,OAAO;MACPC,WAAW;MACXO,UAAU,EAAEd,OAAO,CAACc,UAAU;MAC9BC,MAAM,EAAEnB,SAAS,CAACoB,WAAW;MAC7BC,WAAW,EAAEjB,OAAO,CAACiB,WAAW;MAChCC,iBAAiB,EAAElB,OAAO,CAACkB,iBAAiB;MAC5CC,MAAM,EAAEnB,OAAO,CAACmB;IACpB,CAAC,CAAC;IACF,IAAIhB,UAAU,EAAE;MACZ,CAAC,CAAC,EAAEV,oBAAoB,CAACiB,kBAAkB,EAAE,CAAC,CAACU,4BAA4B,CAAC;QACxEC,IAAI,EAAE,UAAU;QAChBC,UAAU,EAAEzB,WAAW;QACvBgB,UAAU,EAAEb,OAAO,CAACY,IAAI,IAAIf,WAAW;QACvCkB,MAAM,EAAEnB,SAAS,CAACoB,WAAW;QAC7BF,UAAU,EAAEd,OAAO,CAACc;MACxB,CAAC,CAAC;IACN;EACJ,CAAC;AACL;AACA5B,OAAO,CAACE,KAAK,GAAGA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}