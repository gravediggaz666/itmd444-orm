{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLocalEndTime = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst LocalTime_js_1 = require(\"./LocalTime.js\");\nconst LOCAL_END_TIMES = ['24:00', '24:00:00', '24:00:00.000'];\nfunction validateLocalEndTime(value) {\n  // first check if it's any of the special \"end time\" values\n  if (LOCAL_END_TIMES.indexOf(value) >= 0) {\n    return value;\n  }\n  // otherwise, fall back on the standard LocalTime validation\n  return (0, LocalTime_js_1.validateLocalTime)(value);\n}\nexports.GraphQLLocalEndTime = new graphql_1.GraphQLScalarType({\n  name: 'LocalEndTime',\n  description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.',\n  serialize(value) {\n    // value sent to client as string\n    return validateLocalEndTime(value);\n  },\n  parseValue(value) {\n    // value from client as json\n    return validateLocalEndTime(value);\n  },\n  parseLiteral(ast) {\n    // value from client in ast\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local times but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validateLocalEndTime(ast.value);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'LocalEndTime',\n      type: 'string',\n      oneOf: [{\n        type: 'string',\n        pattern: LocalTime_js_1.LOCAL_TIME_FORMAT.source\n      }, {\n        type: 'string',\n        enum: LOCAL_END_TIMES\n      }]\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLLocalEndTime","graphql_1","require","error_js_1","LocalTime_js_1","LOCAL_END_TIMES","validateLocalEndTime","indexOf","validateLocalTime","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","ast","kind","Kind","STRING","createGraphQLError","nodes","extensions","codegenScalarType","jsonSchema","title","type","oneOf","pattern","LOCAL_TIME_FORMAT","source","enum"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/LocalEndTime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLLocalEndTime = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst LocalTime_js_1 = require(\"./LocalTime.js\");\nconst LOCAL_END_TIMES = ['24:00', '24:00:00', '24:00:00.000'];\nfunction validateLocalEndTime(value) {\n    // first check if it's any of the special \"end time\" values\n    if (LOCAL_END_TIMES.indexOf(value) >= 0) {\n        return value;\n    }\n    // otherwise, fall back on the standard LocalTime validation\n    return (0, LocalTime_js_1.validateLocalTime)(value);\n}\nexports.GraphQLLocalEndTime = new graphql_1.GraphQLScalarType({\n    name: 'LocalEndTime',\n    description: 'A local time string (i.e., with no associated timezone) in 24-hr `HH:mm[:ss[.SSS]]` format, e.g. `14:25` or `14:25:06` or `14:25:06.123`.  This scalar is very similar to the `LocalTime`, with the only difference being that `LocalEndTime` also allows `24:00` as a valid value to indicate midnight of the following day.  This is useful when using the scalar to represent the exclusive upper bound of a time block.',\n    serialize(value) {\n        // value sent to client as string\n        return validateLocalEndTime(value);\n    },\n    parseValue(value) {\n        // value from client as json\n        return validateLocalEndTime(value);\n    },\n    parseLiteral(ast) {\n        // value from client in ast\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local times but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validateLocalEndTime(ast.value);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'LocalEndTime',\n            type: 'string',\n            oneOf: [\n                {\n                    type: 'string',\n                    pattern: LocalTime_js_1.LOCAL_TIME_FORMAT.source,\n                },\n                {\n                    type: 'string',\n                    enum: LOCAL_END_TIMES,\n                },\n            ],\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,cAAc,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMG,eAAe,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,cAAc,CAAC;AAC7D,SAASC,oBAAoBA,CAACP,KAAK,EAAE;EACjC;EACA,IAAIM,eAAe,CAACE,OAAO,CAACR,KAAK,CAAC,IAAI,CAAC,EAAE;IACrC,OAAOA,KAAK;EAChB;EACA;EACA,OAAO,CAAC,CAAC,EAAEK,cAAc,CAACI,iBAAiB,EAAET,KAAK,CAAC;AACvD;AACAD,OAAO,CAACE,mBAAmB,GAAG,IAAIC,SAAS,CAACQ,iBAAiB,CAAC;EAC1DC,IAAI,EAAE,cAAc;EACpBC,WAAW,EAAE,6ZAA6Z;EAC1aC,SAASA,CAACb,KAAK,EAAE;IACb;IACA,OAAOO,oBAAoB,CAACP,KAAK,CAAC;EACtC,CAAC;EACDc,UAAUA,CAACd,KAAK,EAAE;IACd;IACA,OAAOO,oBAAoB,CAACP,KAAK,CAAC;EACtC,CAAC;EACDe,YAAYA,CAACC,GAAG,EAAE;IACd;IACA,IAAIA,GAAG,CAACC,IAAI,KAAKf,SAAS,CAACgB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACgB,kBAAkB,EAAG,uDAAsDJ,GAAG,CAACC,IAAK,EAAC,EAAE;QACxGI,KAAK,EAAEL;MACX,CAAC,CAAC;IACN;IACA,OAAOT,oBAAoB,CAACS,GAAG,CAAChB,KAAK,CAAC;EAC1C,CAAC;EACDsB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,cAAc;MACrBC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE,CACH;QACID,IAAI,EAAE,QAAQ;QACdE,OAAO,EAAEvB,cAAc,CAACwB,iBAAiB,CAACC;MAC9C,CAAC,EACD;QACIJ,IAAI,EAAE,QAAQ;QACdK,IAAI,EAAEzB;MACV,CAAC;IAET;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}