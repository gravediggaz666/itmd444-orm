{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLIP = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst IPv4_js_1 = require(\"./IPv4.js\");\nconst IPv6_js_1 = require(\"./IPv6.js\");\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!IPv4_js_1.IPV4_REGEX.test(value) && !IPv6_js_1.IPV6_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPv4 or IPv6 address: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLIP = new graphql_1.GraphQLScalarType({\n  name: `IP`,\n  description: `A field whose value is either an IPv4 or IPv6 address: https://en.wikipedia.org/wiki/IP_address.`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IP addresses but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'IP',\n      oneOf: [{\n        type: 'string',\n        format: 'ipv4'\n      }, {\n        type: 'string',\n        format: 'ipv6'\n      }]\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLIP","graphql_1","require","error_js_1","IPv4_js_1","IPv6_js_1","validate","ast","createGraphQLError","nodes","undefined","IPV4_REGEX","test","IPV6_REGEX","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","oneOf","type","format"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/IP.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLIP = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst IPv4_js_1 = require(\"./IPv4.js\");\nconst IPv6_js_1 = require(\"./IPv6.js\");\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (!IPv4_js_1.IPV4_REGEX.test(value) && !IPv6_js_1.IPV6_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPv4 or IPv6 address: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nexports.GraphQLIP = new graphql_1.GraphQLScalarType({\n    name: `IP`,\n    description: `A field whose value is either an IPv4 or IPv6 address: https://en.wikipedia.org/wiki/IP_address.`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IP addresses but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'IP',\n            oneOf: [\n                {\n                    type: 'string',\n                    format: 'ipv4',\n                },\n                {\n                    type: 'string',\n                    format: 'ipv6',\n                },\n            ],\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMG,SAAS,GAAGH,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMI,QAAQ,GAAGA,CAACP,KAAK,EAAEQ,GAAG,KAAK;EAC7B,IAAI,OAAOR,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACK,kBAAkB,EAAG,wBAAuBT,KAAM,EAAC,EAAEQ,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,IAAI,CAACN,SAAS,CAACO,UAAU,CAACC,IAAI,CAACb,KAAK,CAAC,IAAI,CAACM,SAAS,CAACQ,UAAU,CAACD,IAAI,CAACb,KAAK,CAAC,EAAE;IACxE,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACK,kBAAkB,EAAG,8CAA6CT,KAAM,EAAC,EAAEQ,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EACrI;EACA,OAAOX,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,SAAS,GAAG,IAAIC,SAAS,CAACa,iBAAiB,CAAC;EAChDC,IAAI,EAAG,IAAG;EACVC,WAAW,EAAG,kGAAiG;EAC/GC,SAASA,CAAClB,KAAK,EAAE;IACb,OAAOO,QAAQ,CAACP,KAAK,CAAC;EAC1B,CAAC;EACDmB,UAAUA,CAACnB,KAAK,EAAE;IACd,OAAOO,QAAQ,CAACP,KAAK,CAAC;EAC1B,CAAC;EACDoB,YAAYA,CAACZ,GAAG,EAAE;IACd,IAAIA,GAAG,CAACa,IAAI,KAAKnB,SAAS,CAACoB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEnB,UAAU,CAACK,kBAAkB,EAAG,wDAAuDD,GAAG,CAACa,IAAK,EAAC,EAAE;QACzGX,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACR,KAAK,EAAEQ,GAAG,CAAC;EACnC,CAAC;EACDgB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,IAAI;MACXC,KAAK,EAAE,CACH;QACIC,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;MACZ,CAAC,EACD;QACID,IAAI,EAAE,QAAQ;QACdC,MAAM,EAAE;MACZ,CAAC;IAET;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}