{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLIPv6 = exports.IPV6_REGEX = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nexports.IPV6_REGEX = /^(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)(?:\\/(?:0?0?[0-9]|0?[1-9][0-9]|1[01][0-9]|12[0-8]))?)$/;\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!exports.IPV6_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPv6 address: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLIPv6 = new graphql_1.GraphQLScalarType({\n  name: `IPv6`,\n  description: `A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IPv6 addresses but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      type: 'string',\n      format: 'ipv6'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLIPv6","IPV6_REGEX","graphql_1","require","error_js_1","validate","ast","createGraphQLError","nodes","undefined","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","type","format"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/IPv6.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLIPv6 = exports.IPV6_REGEX = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nexports.IPV6_REGEX = /^(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)(?:\\/(?:0?0?[0-9]|0?[1-9][0-9]|1[01][0-9]|12[0-8]))?)$/;\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (!exports.IPV6_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid IPv6 address: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nexports.GraphQLIPv6 = new graphql_1.GraphQLScalarType({\n    name: `IPv6`,\n    description: `A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as IPv6 addresses but got a: ${ast.kind}`, { nodes: ast });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            type: 'string',\n            format: 'ipv6',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AACjD,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzCL,OAAO,CAACG,UAAU,GAAG,qpDAAqpD;AAC1qD,MAAMI,QAAQ,GAAGA,CAACN,KAAK,EAAEO,GAAG,KAAK;EAC7B,IAAI,OAAOP,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACG,kBAAkB,EAAG,wBAAuBR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,IAAI,CAACX,OAAO,CAACG,UAAU,CAACS,IAAI,CAACX,KAAK,CAAC,EAAE;IACjC,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACG,kBAAkB,EAAG,sCAAqCR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC7H;EACA,OAAOV,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,WAAW,GAAG,IAAIE,SAAS,CAACS,iBAAiB,CAAC;EAClDC,IAAI,EAAG,MAAK;EACZC,WAAW,EAAG,4EAA2E;EACzFC,SAASA,CAACf,KAAK,EAAE;IACb,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDgB,UAAUA,CAAChB,KAAK,EAAE;IACd,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDiB,YAAYA,CAACV,GAAG,EAAE;IACd,IAAIA,GAAG,CAACW,IAAI,KAAKf,SAAS,CAACgB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEf,UAAU,CAACG,kBAAkB,EAAG,0DAAyDD,GAAG,CAACW,IAAK,EAAC,EAAE;QAAET,KAAK,EAAEF;MAAI,CAAC,CAAC;IAClI;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EACnC,CAAC;EACDc,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}