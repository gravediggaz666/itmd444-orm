{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLocalDateTime = exports.LocalDateTimeConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst LOCAL_DATE_TIME_REGEX = /^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\+-]\\d{2}:\\d{2})?)$/;\nfunction validateLocalDateTime(value, ast) {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: [ast]\n    } : undefined);\n  }\n  if (!LOCAL_DATE_TIME_REGEX.test(value.toUpperCase())) {\n    throw (0, error_js_1.createGraphQLError)(`LocalDateTime cannot represent an invalid local date-time-string ${value}.`, ast ? {\n      nodes: [ast]\n    } : undefined);\n  }\n  const valueAsDate = new Date(value);\n  const isValidDate = !isNaN(valueAsDate.getTime());\n  if (!isValidDate) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid LocalDateTime: ${value}`, ast ? {\n      nodes: [ast]\n    } : undefined);\n  }\n  return value;\n}\nexports.LocalDateTimeConfig = {\n  name: 'LocalDateTime',\n  description: 'A local date-time string (i.e., with no associated timezone) in `YYYY-MM-DDTHH:mm:ss` format, e.g. `2020-01-01T00:00:00`.',\n  serialize(value) {\n    return validateLocalDateTime(value);\n  },\n  parseValue(value) {\n    return validateLocalDateTime(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local date-times but got a: ${ast.kind}`, {\n        nodes: [ast]\n      });\n    }\n    return validateLocalDateTime(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType:\n    // eslint-disable-next-line no-template-curly-in-string\n    '`${number}${number}${number}${number}-${number}${number}-${number}${number}T${number}${number}:${number}${number}:${number}${number}`',\n    jsonSchema: {\n      title: 'LocalDateTime',\n      type: 'string',\n      format: 'date-time'\n    }\n  }\n};\nexports.GraphQLLocalDateTime = new graphql_1.GraphQLScalarType(exports.LocalDateTimeConfig);","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLLocalDateTime","LocalDateTimeConfig","graphql_1","require","error_js_1","LOCAL_DATE_TIME_REGEX","validateLocalDateTime","ast","createGraphQLError","nodes","undefined","test","toUpperCase","valueAsDate","Date","isValidDate","isNaN","getTime","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","format","GraphQLScalarType"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/LocalDateTime.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLLocalDateTime = exports.LocalDateTimeConfig = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst LOCAL_DATE_TIME_REGEX = /^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\+-]\\d{2}:\\d{2})?)$/;\nfunction validateLocalDateTime(value, ast) {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast\n            ? {\n                nodes: [ast],\n            }\n            : undefined);\n    }\n    if (!LOCAL_DATE_TIME_REGEX.test(value.toUpperCase())) {\n        throw (0, error_js_1.createGraphQLError)(`LocalDateTime cannot represent an invalid local date-time-string ${value}.`, ast\n            ? {\n                nodes: [ast],\n            }\n            : undefined);\n    }\n    const valueAsDate = new Date(value);\n    const isValidDate = !isNaN(valueAsDate.getTime());\n    if (!isValidDate) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid LocalDateTime: ${value}`, ast\n            ? {\n                nodes: [ast],\n            }\n            : undefined);\n    }\n    return value;\n}\nexports.LocalDateTimeConfig = {\n    name: 'LocalDateTime',\n    description: 'A local date-time string (i.e., with no associated timezone) in `YYYY-MM-DDTHH:mm:ss` format, e.g. `2020-01-01T00:00:00`.',\n    serialize(value) {\n        return validateLocalDateTime(value);\n    },\n    parseValue(value) {\n        return validateLocalDateTime(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as local date-times but got a: ${ast.kind}`, {\n                nodes: [ast],\n            });\n        }\n        return validateLocalDateTime(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: \n        // eslint-disable-next-line no-template-curly-in-string\n        '`${number}${number}${number}${number}-${number}${number}-${number}${number}T${number}${number}:${number}${number}:${number}${number}`',\n        jsonSchema: {\n            title: 'LocalDateTime',\n            type: 'string',\n            format: 'date-time',\n        },\n    },\n};\nexports.GraphQLLocalDateTime = new graphql_1.GraphQLScalarType(exports.LocalDateTimeConfig);\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AACnE,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,qBAAqB,GAAG,gFAAgF;AAC9G,SAASC,qBAAqBA,CAACP,KAAK,EAAEQ,GAAG,EAAE;EACvC,IAAI,OAAOR,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEK,UAAU,CAACI,kBAAkB,EAAG,wBAAuBT,KAAM,EAAC,EAAEQ,GAAG,GACvE;MACEE,KAAK,EAAE,CAACF,GAAG;IACf,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,IAAI,CAACL,qBAAqB,CAACM,IAAI,CAACZ,KAAK,CAACa,WAAW,CAAC,CAAC,CAAC,EAAE;IAClD,MAAM,CAAC,CAAC,EAAER,UAAU,CAACI,kBAAkB,EAAG,oEAAmET,KAAM,GAAE,EAAEQ,GAAG,GACpH;MACEE,KAAK,EAAE,CAACF,GAAG;IACf,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,MAAMG,WAAW,GAAG,IAAIC,IAAI,CAACf,KAAK,CAAC;EACnC,MAAMgB,WAAW,GAAG,CAACC,KAAK,CAACH,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC;EACjD,IAAI,CAACF,WAAW,EAAE;IACd,MAAM,CAAC,CAAC,EAAEX,UAAU,CAACI,kBAAkB,EAAG,uCAAsCT,KAAM,EAAC,EAAEQ,GAAG,GACtF;MACEE,KAAK,EAAE,CAACF,GAAG;IACf,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,OAAOX,KAAK;AAChB;AACAD,OAAO,CAACG,mBAAmB,GAAG;EAC1BiB,IAAI,EAAE,eAAe;EACrBC,WAAW,EAAE,2HAA2H;EACxIC,SAASA,CAACrB,KAAK,EAAE;IACb,OAAOO,qBAAqB,CAACP,KAAK,CAAC;EACvC,CAAC;EACDsB,UAAUA,CAACtB,KAAK,EAAE;IACd,OAAOO,qBAAqB,CAACP,KAAK,CAAC;EACvC,CAAC;EACDuB,YAAYA,CAACf,GAAG,EAAE;IACd,IAAIA,GAAG,CAACgB,IAAI,KAAKrB,SAAS,CAACsB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAErB,UAAU,CAACI,kBAAkB,EAAG,4DAA2DD,GAAG,CAACgB,IAAK,EAAC,EAAE;QAC7Gd,KAAK,EAAE,CAACF,GAAG;MACf,CAAC,CAAC;IACN;IACA,OAAOD,qBAAqB,CAACC,GAAG,CAACR,KAAK,EAAEQ,GAAG,CAAC;EAChD,CAAC;EACDmB,UAAU,EAAE;IACRC,iBAAiB;IACjB;IACA,uIAAuI;IACvIC,UAAU,EAAE;MACRC,KAAK,EAAE,eAAe;MACtBC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC;AACDjC,OAAO,CAACE,oBAAoB,GAAG,IAAIE,SAAS,CAAC8B,iBAAiB,CAAClC,OAAO,CAACG,mBAAmB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}