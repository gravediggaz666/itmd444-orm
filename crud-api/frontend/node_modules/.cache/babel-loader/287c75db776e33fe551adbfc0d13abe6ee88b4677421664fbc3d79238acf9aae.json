{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLNonEmptyString = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!value.trim().length) {\n    throw (0, error_js_1.createGraphQLError)(`Value cannot be an empty string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLNonEmptyString = new graphql_1.GraphQLScalarType({\n  name: 'NonEmptyString',\n  description: 'A string that cannot be passed as an empty value',\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'NonEmptyString',\n      type: 'string',\n      minLength: 1\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLNonEmptyString","graphql_1","require","error_js_1","validate","ast","createGraphQLError","nodes","undefined","trim","length","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","minLength"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/NonEmptyString.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLNonEmptyString = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if (!value.trim().length) {\n        throw (0, error_js_1.createGraphQLError)(`Value cannot be an empty string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nexports.GraphQLNonEmptyString = new graphql_1.GraphQLScalarType({\n    name: 'NonEmptyString',\n    description: 'A string that cannot be passed as an empty value',\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings but got a: ${ast.kind}`, { nodes: ast });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'NonEmptyString',\n            type: 'string',\n            minLength: 1,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,QAAQ,GAAGA,CAACL,KAAK,EAAEM,GAAG,KAAK;EAC7B,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACG,kBAAkB,EAAG,0BAAyBP,KAAM,EAAC,EAAEM,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EACjH;EACA,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,CAAC,CAACC,MAAM,EAAE;IACtB,MAAM,CAAC,CAAC,EAAEP,UAAU,CAACG,kBAAkB,EAAG,oCAAmCP,KAAM,EAAC,EAAEM,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC3H;EACA,OAAOT,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,qBAAqB,GAAG,IAAIC,SAAS,CAACU,iBAAiB,CAAC;EAC5DC,IAAI,EAAE,gBAAgB;EACtBC,WAAW,EAAE,kDAAkD;EAC/DC,SAAS,EAAEV,QAAQ;EACnBW,UAAU,EAAEX,QAAQ;EACpBY,YAAYA,CAACX,GAAG,EAAE;IACd,IAAIA,GAAG,CAACY,IAAI,KAAKhB,SAAS,CAACiB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEhB,UAAU,CAACG,kBAAkB,EAAG,wCAAuCD,GAAG,CAACY,IAAK,EAAC,EAAE;QAAEV,KAAK,EAAEF;MAAI,CAAC,CAAC;IAChH;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACN,KAAK,EAAEM,GAAG,CAAC;EACnC,CAAC;EACDe,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAE;IACf;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}