{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLCountryCode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst COUNTRY_CODE_REGEX = /^(AD|AE|AF|AG|AI|AL|AM|AO|AQ|AR|AS|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BJ|BL|BM|BN|BO|BQ|BR|BS|BT|BV|BW|BY|BZ|CA|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|CR|CU|CV|CW|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EE|EG|EH|ER|ES|ET|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|IO|IQ|IR|IS|IT|JE|JM|JO|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MF|MG|MH|MK|ML|MM|MN|MO|MP|MQ|MR|MS|MT|MU|MV|MW|MX|MY|MZ|NA|NC|NE|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|SS|ST|SV|SX|SY|SZ|TC|TD|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TR|TT|TV|TW|TZ|UA|UG|UM|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|XK|YE|YT|ZA|ZM|ZW)$/i;\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if (!COUNTRY_CODE_REGEX.test(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid country code: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLCountryCode = new graphql_1.GraphQLScalarType({\n  name: 'CountryCode',\n  description: 'A country code as defined by ISO 3166-1 alpha-2',\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as country codes but got a: ${ast.kind}`, {\n        nodes: [ast]\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'CountryCode',\n      type: 'string',\n      pattern: COUNTRY_CODE_REGEX.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLCountryCode","graphql_1","require","error_js_1","COUNTRY_CODE_REGEX","validate","ast","createGraphQLError","nodes","undefined","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/CountryCode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLCountryCode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst COUNTRY_CODE_REGEX = /^(AD|AE|AF|AG|AI|AL|AM|AO|AQ|AR|AS|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BJ|BL|BM|BN|BO|BQ|BR|BS|BT|BV|BW|BY|BZ|CA|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|CR|CU|CV|CW|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EE|EG|EH|ER|ES|ET|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|IO|IQ|IR|IS|IT|JE|JM|JO|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MF|MG|MH|MK|ML|MM|MN|MO|MP|MQ|MR|MS|MT|MU|MV|MW|MX|MY|MZ|NA|NC|NE|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|SS|ST|SV|SX|SY|SZ|TC|TD|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TR|TT|TV|TW|TZ|UA|UG|UM|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|XK|YE|YT|ZA|ZM|ZW)$/i;\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    if (!COUNTRY_CODE_REGEX.test(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid country code: ${value}`, ast\n            ? {\n                nodes: ast,\n            }\n            : undefined);\n    }\n    return value;\n};\nexports.GraphQLCountryCode = new graphql_1.GraphQLScalarType({\n    name: 'CountryCode',\n    description: 'A country code as defined by ISO 3166-1 alpha-2',\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as country codes but got a: ${ast.kind}`, {\n                nodes: [ast],\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'CountryCode',\n            type: 'string',\n            pattern: COUNTRY_CODE_REGEX.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,kBAAkB,GAAG,ovBAAovB;AAC/wB,MAAMC,QAAQ,GAAGA,CAACN,KAAK,EAAEO,GAAG,KAAK;EAC7B,IAAI,OAAOP,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,wBAAuBR,KAAM,EAAC,EAAEO,GAAG,GACvE;MACEE,KAAK,EAAEF;IACX,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,IAAI,CAACL,kBAAkB,CAACM,IAAI,CAACX,KAAK,CAAC,EAAE;IACjC,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,sCAAqCR,KAAM,EAAC,EAAEO,GAAG,GACrF;MACEE,KAAK,EAAEF;IACX,CAAC,GACCG,SAAS,CAAC;EACpB;EACA,OAAOV,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,kBAAkB,GAAG,IAAIC,SAAS,CAACU,iBAAiB,CAAC;EACzDC,IAAI,EAAE,aAAa;EACnBC,WAAW,EAAE,iDAAiD;EAC9DC,SAASA,CAACf,KAAK,EAAE;IACb,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDgB,UAAUA,CAAChB,KAAK,EAAE;IACd,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDiB,YAAYA,CAACV,GAAG,EAAE;IACd,IAAIA,GAAG,CAACW,IAAI,KAAKhB,SAAS,CAACiB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAEhB,UAAU,CAACI,kBAAkB,EAAG,yDAAwDD,GAAG,CAACW,IAAK,EAAC,EAAE;QAC1GT,KAAK,EAAE,CAACF,GAAG;MACf,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EACnC,CAAC;EACDc,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAErB,kBAAkB,CAACsB;IAChC;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}