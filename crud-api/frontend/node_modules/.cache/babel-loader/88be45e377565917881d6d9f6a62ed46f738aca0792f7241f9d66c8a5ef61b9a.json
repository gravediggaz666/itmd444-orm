{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createResolversMap = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction generateTypeResolver(abstractType, schema) {\n  if (abstractType.resolveType) {\n    return abstractType.resolveType;\n  }\n  const possibleObjectTypes = schema.getPossibleTypes(abstractType);\n  return async (source, context, info) => {\n    for (const objectType of possibleObjectTypes) {\n      if (objectType.isTypeOf && (await objectType.isTypeOf(source, context, info))) {\n        return objectType.name;\n      }\n    }\n    return undefined;\n  };\n}\nfunction generateFieldsResolvers(fields) {\n  return Object.keys(fields).reduce((fieldsMap, fieldName) => {\n    const field = fields[fieldName];\n    if (field.subscribe) {\n      fieldsMap[fieldName] = {\n        subscribe: field.subscribe,\n        resolve: field.resolve\n      };\n    } else if (field.resolve) {\n      fieldsMap[fieldName] = field.resolve;\n    }\n    return fieldsMap;\n  }, {});\n}\nfunction createResolversMap(schema) {\n  const typeMap = schema.getTypeMap();\n  return Object.keys(typeMap).filter(typeName => !typeName.startsWith(\"__\")).reduce((resolversMap, typeName) => {\n    const type = typeMap[typeName];\n    if (type instanceof graphql_1.GraphQLObjectType) {\n      resolversMap[typeName] = {\n        ...(type.isTypeOf && {\n          __isTypeOf: type.isTypeOf\n        }),\n        ...generateFieldsResolvers(type.getFields())\n      };\n    }\n    if (type instanceof graphql_1.GraphQLInterfaceType) {\n      resolversMap[typeName] = {\n        __resolveType: generateTypeResolver(type, schema),\n        ...generateFieldsResolvers(type.getFields())\n      };\n    }\n    if (type instanceof graphql_1.GraphQLScalarType) {\n      resolversMap[typeName] = type;\n    }\n    if (type instanceof graphql_1.GraphQLEnumType) {\n      const enumValues = type.getValues();\n      resolversMap[typeName] = enumValues.reduce((enumMap, {\n        name,\n        value\n      }) => {\n        enumMap[name] = value;\n        return enumMap;\n      }, {});\n    }\n    if (type instanceof graphql_1.GraphQLUnionType) {\n      resolversMap[typeName] = {\n        __resolveType: generateTypeResolver(type, schema)\n      };\n    }\n    return resolversMap;\n  }, {});\n}\nexports.createResolversMap = createResolversMap;","map":{"version":3,"names":["Object","defineProperty","exports","value","createResolversMap","graphql_1","require","generateTypeResolver","abstractType","schema","resolveType","possibleObjectTypes","getPossibleTypes","source","context","info","objectType","isTypeOf","name","undefined","generateFieldsResolvers","fields","keys","reduce","fieldsMap","fieldName","field","subscribe","resolve","typeMap","getTypeMap","filter","typeName","startsWith","resolversMap","type","GraphQLObjectType","__isTypeOf","getFields","GraphQLInterfaceType","__resolveType","GraphQLScalarType","GraphQLEnumType","enumValues","getValues","enumMap","GraphQLUnionType"],"sources":["/Users/snawz1/node_modules/type-graphql/build/cjs/utils/createResolversMap.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createResolversMap = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction generateTypeResolver(abstractType, schema) {\n    if (abstractType.resolveType) {\n        return abstractType.resolveType;\n    }\n    const possibleObjectTypes = schema.getPossibleTypes(abstractType);\n    return async (source, context, info) => {\n        for (const objectType of possibleObjectTypes) {\n            if (objectType.isTypeOf && (await objectType.isTypeOf(source, context, info))) {\n                return objectType.name;\n            }\n        }\n        return undefined;\n    };\n}\nfunction generateFieldsResolvers(fields) {\n    return Object.keys(fields).reduce((fieldsMap, fieldName) => {\n        const field = fields[fieldName];\n        if (field.subscribe) {\n            fieldsMap[fieldName] = {\n                subscribe: field.subscribe,\n                resolve: field.resolve,\n            };\n        }\n        else if (field.resolve) {\n            fieldsMap[fieldName] = field.resolve;\n        }\n        return fieldsMap;\n    }, {});\n}\nfunction createResolversMap(schema) {\n    const typeMap = schema.getTypeMap();\n    return Object.keys(typeMap)\n        .filter(typeName => !typeName.startsWith(\"__\"))\n        .reduce((resolversMap, typeName) => {\n        const type = typeMap[typeName];\n        if (type instanceof graphql_1.GraphQLObjectType) {\n            resolversMap[typeName] = {\n                ...(type.isTypeOf && {\n                    __isTypeOf: type.isTypeOf,\n                }),\n                ...generateFieldsResolvers(type.getFields()),\n            };\n        }\n        if (type instanceof graphql_1.GraphQLInterfaceType) {\n            resolversMap[typeName] = {\n                __resolveType: generateTypeResolver(type, schema),\n                ...generateFieldsResolvers(type.getFields()),\n            };\n        }\n        if (type instanceof graphql_1.GraphQLScalarType) {\n            resolversMap[typeName] = type;\n        }\n        if (type instanceof graphql_1.GraphQLEnumType) {\n            const enumValues = type.getValues();\n            resolversMap[typeName] = enumValues.reduce((enumMap, { name, value }) => {\n                enumMap[name] = value;\n                return enumMap;\n            }, {});\n        }\n        if (type instanceof graphql_1.GraphQLUnionType) {\n            resolversMap[typeName] = {\n                __resolveType: generateTypeResolver(type, schema),\n            };\n        }\n        return resolversMap;\n    }, {});\n}\nexports.createResolversMap = createResolversMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}