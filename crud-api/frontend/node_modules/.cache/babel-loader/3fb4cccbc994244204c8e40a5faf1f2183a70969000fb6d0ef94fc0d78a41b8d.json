{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLatitude = void 0;\n// Inspired by Geolib: https://github.com/manuelbieh/geolib\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\n// Minimum latitude\nconst MIN_LAT = -90.0;\n// Maximum latitude\nconst MAX_LAT = 90.0;\n// See https://en.wikipedia.org/wiki/Decimal_degrees#Precision\nconst MAX_PRECISION = 8;\nconst validate = (value, ast) => {\n  // Check if value is a string or a number\n  if (typeof value !== 'string' && typeof value !== 'number' || value === null || typeof value === 'undefined' || Number.isNaN(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is neither a number nor a string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  if ((0, utilities_js_1.isDecimal)(value)) {\n    const decimalValue = typeof value === 'string' ? Number.parseFloat(value) : value;\n    if (decimalValue < MIN_LAT || decimalValue > MAX_LAT) {\n      throw (0, error_js_1.createGraphQLError)(`Value must be between ${MIN_LAT} and ${MAX_LAT}: ${value}`, ast ? {\n        nodes: ast\n      } : undefined);\n    }\n    return Number.parseFloat(decimalValue.toFixed(MAX_PRECISION));\n  }\n  if ((0, utilities_js_1.isSexagesimal)(value)) {\n    return validate((0, utilities_js_1.sexagesimalToDecimal)(value));\n  }\n  throw (0, error_js_1.createGraphQLError)(`Value is not a valid latitude: ${value}`, ast ? {\n    nodes: ast\n  } : undefined);\n};\nexports.GraphQLLatitude = new graphql_1.GraphQLScalarType({\n  name: `Latitude`,\n  description: `A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.FLOAT && ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate floats or strings as latitude but got a: ${ast.kind}`, {\n        nodes: [ast]\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string | number',\n    jsonSchema: {\n      title: 'Latitude',\n      type: 'number',\n      minimum: MIN_LAT,\n      maximum: MAX_LAT\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLLatitude","graphql_1","require","error_js_1","utilities_js_1","MIN_LAT","MAX_LAT","MAX_PRECISION","validate","ast","Number","isNaN","createGraphQLError","nodes","undefined","isDecimal","decimalValue","parseFloat","toFixed","isSexagesimal","sexagesimalToDecimal","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","FLOAT","STRING","extensions","codegenScalarType","jsonSchema","title","type","minimum","maximum"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/Latitude.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLLatitude = void 0;\n// Inspired by Geolib: https://github.com/manuelbieh/geolib\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst utilities_js_1 = require(\"./utilities.js\");\n// Minimum latitude\nconst MIN_LAT = -90.0;\n// Maximum latitude\nconst MAX_LAT = 90.0;\n// See https://en.wikipedia.org/wiki/Decimal_degrees#Precision\nconst MAX_PRECISION = 8;\nconst validate = (value, ast) => {\n    // Check if value is a string or a number\n    if ((typeof value !== 'string' && typeof value !== 'number') ||\n        value === null ||\n        typeof value === 'undefined' ||\n        Number.isNaN(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is neither a number nor a string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    if ((0, utilities_js_1.isDecimal)(value)) {\n        const decimalValue = typeof value === 'string' ? Number.parseFloat(value) : value;\n        if (decimalValue < MIN_LAT || decimalValue > MAX_LAT) {\n            throw (0, error_js_1.createGraphQLError)(`Value must be between ${MIN_LAT} and ${MAX_LAT}: ${value}`, ast ? { nodes: ast } : undefined);\n        }\n        return Number.parseFloat(decimalValue.toFixed(MAX_PRECISION));\n    }\n    if ((0, utilities_js_1.isSexagesimal)(value)) {\n        return validate((0, utilities_js_1.sexagesimalToDecimal)(value));\n    }\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid latitude: ${value}`, ast ? { nodes: ast } : undefined);\n};\nexports.GraphQLLatitude = new graphql_1.GraphQLScalarType({\n    name: `Latitude`,\n    description: `A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.FLOAT && ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate floats or strings as latitude but got a: ${ast.kind}`, {\n                nodes: [ast],\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string | number',\n        jsonSchema: {\n            title: 'Latitude',\n            type: 'number',\n            minimum: MIN_LAT,\n            maximum: MAX_LAT,\n        },\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}