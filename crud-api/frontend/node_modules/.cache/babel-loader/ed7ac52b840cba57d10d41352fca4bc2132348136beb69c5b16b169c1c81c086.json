{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLTimestamp = void 0;\nconst graphql_1 = require(\"graphql\");\n// Taken from https://gist.github.com/langpavel/b30f3d507a47713b0c6e89016e4e9eb7\nfunction serializeDate(value) {\n  if (value instanceof Date) {\n    return value.getTime();\n  } else if (typeof value === 'number') {\n    return Math.trunc(value);\n  } else if (typeof value === 'string') {\n    return Date.parse(value);\n  }\n  return null;\n}\nfunction parseDate(value) {\n  if (value === null) {\n    return null;\n  }\n  try {\n    return new Date(value);\n  } catch (err) {\n    return null;\n  }\n}\nfunction parseDateFromLiteral(ast) {\n  if (ast.kind === graphql_1.Kind.INT) {\n    const num = parseInt(ast.value, 10);\n    return new Date(num);\n  } else if (ast.kind === graphql_1.Kind.STRING) {\n    return parseDate(ast.value);\n  }\n  return null;\n}\nexports.GraphQLTimestamp = new graphql_1.GraphQLScalarType({\n  name: 'Timestamp',\n  description: 'The javascript `Date` as integer. Type represents date and time ' + 'as number of milliseconds from start of UNIX epoch.',\n  serialize: serializeDate,\n  parseValue: parseDate,\n  parseLiteral: parseDateFromLiteral,\n  extensions: {\n    codegenScalarType: 'Date | string | number',\n    jsonSchema: {\n      type: 'string',\n      format: 'unix-time'\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLTimestamp","graphql_1","require","serializeDate","Date","getTime","Math","trunc","parse","parseDate","err","parseDateFromLiteral","ast","kind","Kind","INT","num","parseInt","STRING","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","extensions","codegenScalarType","jsonSchema","type","format"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/Timestamp.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLTimestamp = void 0;\nconst graphql_1 = require(\"graphql\");\n// Taken from https://gist.github.com/langpavel/b30f3d507a47713b0c6e89016e4e9eb7\nfunction serializeDate(value) {\n    if (value instanceof Date) {\n        return value.getTime();\n    }\n    else if (typeof value === 'number') {\n        return Math.trunc(value);\n    }\n    else if (typeof value === 'string') {\n        return Date.parse(value);\n    }\n    return null;\n}\nfunction parseDate(value) {\n    if (value === null) {\n        return null;\n    }\n    try {\n        return new Date(value);\n    }\n    catch (err) {\n        return null;\n    }\n}\nfunction parseDateFromLiteral(ast) {\n    if (ast.kind === graphql_1.Kind.INT) {\n        const num = parseInt(ast.value, 10);\n        return new Date(num);\n    }\n    else if (ast.kind === graphql_1.Kind.STRING) {\n        return parseDate(ast.value);\n    }\n    return null;\n}\nexports.GraphQLTimestamp = new graphql_1.GraphQLScalarType({\n    name: 'Timestamp',\n    description: 'The javascript `Date` as integer. Type represents date and time ' +\n        'as number of milliseconds from start of UNIX epoch.',\n    serialize: serializeDate,\n    parseValue: parseDate,\n    parseLiteral: parseDateFromLiteral,\n    extensions: {\n        codegenScalarType: 'Date | string | number',\n        jsonSchema: {\n            type: 'string',\n            format: 'unix-time',\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC;AACA,SAASC,aAAaA,CAACJ,KAAK,EAAE;EAC1B,IAAIA,KAAK,YAAYK,IAAI,EAAE;IACvB,OAAOL,KAAK,CAACM,OAAO,CAAC,CAAC;EAC1B,CAAC,MACI,IAAI,OAAON,KAAK,KAAK,QAAQ,EAAE;IAChC,OAAOO,IAAI,CAACC,KAAK,CAACR,KAAK,CAAC;EAC5B,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAChC,OAAOK,IAAI,CAACI,KAAK,CAACT,KAAK,CAAC;EAC5B;EACA,OAAO,IAAI;AACf;AACA,SAASU,SAASA,CAACV,KAAK,EAAE;EACtB,IAAIA,KAAK,KAAK,IAAI,EAAE;IAChB,OAAO,IAAI;EACf;EACA,IAAI;IACA,OAAO,IAAIK,IAAI,CAACL,KAAK,CAAC;EAC1B,CAAC,CACD,OAAOW,GAAG,EAAE;IACR,OAAO,IAAI;EACf;AACJ;AACA,SAASC,oBAAoBA,CAACC,GAAG,EAAE;EAC/B,IAAIA,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACC,GAAG,EAAE;IACjC,MAAMC,GAAG,GAAGC,QAAQ,CAACL,GAAG,CAACb,KAAK,EAAE,EAAE,CAAC;IACnC,OAAO,IAAIK,IAAI,CAACY,GAAG,CAAC;EACxB,CAAC,MACI,IAAIJ,GAAG,CAACC,IAAI,KAAKZ,SAAS,CAACa,IAAI,CAACI,MAAM,EAAE;IACzC,OAAOT,SAAS,CAACG,GAAG,CAACb,KAAK,CAAC;EAC/B;EACA,OAAO,IAAI;AACf;AACAD,OAAO,CAACE,gBAAgB,GAAG,IAAIC,SAAS,CAACkB,iBAAiB,CAAC;EACvDC,IAAI,EAAE,WAAW;EACjBC,WAAW,EAAE,kEAAkE,GAC3E,qDAAqD;EACzDC,SAAS,EAAEnB,aAAa;EACxBoB,UAAU,EAAEd,SAAS;EACrBe,YAAY,EAAEb,oBAAoB;EAClCc,UAAU,EAAE;IACRC,iBAAiB,EAAE,wBAAwB;IAC3CC,UAAU,EAAE;MACRC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE;IACZ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}