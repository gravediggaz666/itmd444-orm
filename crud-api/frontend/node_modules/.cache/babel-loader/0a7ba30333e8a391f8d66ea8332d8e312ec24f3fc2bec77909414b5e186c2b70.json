{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLocale = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst BCP_47_REGEX = /^(((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(x(-[A-Za-z0-9]{1,8})+))?)|(x(-[A-Za-z0-9]{1,8})+))$/;\nfunction validate(value, ast) {\n  if (!value) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid string. Received: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  const isValidFormat = BCP_47_REGEX.test(value);\n  if (!isValidFormat) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid BCP-47 standard formatted string. Received: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n}\nexports.GraphQLLocale = new graphql_1.GraphQLScalarType({\n  name: 'Locale',\n  description: 'The locale in the format of a BCP 47 (RFC 5646) standard string',\n  serialize: validate,\n  parseValue: validate,\n  parseLiteral(ast) {\n    if (ast.kind === graphql_1.Kind.STRING) {\n      return validate(ast.value, ast);\n    }\n    throw (0, error_js_1.createGraphQLError)(`Value is not a string. Received: ${ast.kind}`, {\n      nodes: ast\n    });\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'Locale',\n      type: 'string',\n      pattern: BCP_47_REGEX.source\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLLocale","graphql_1","require","error_js_1","BCP_47_REGEX","validate","ast","createGraphQLError","nodes","undefined","isValidFormat","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/Locale.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLLocale = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst BCP_47_REGEX = /^(((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(x(-[A-Za-z0-9]{1,8})+))?)|(x(-[A-Za-z0-9]{1,8})+))$/;\nfunction validate(value, ast) {\n    if (!value) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid string. Received: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    const isValidFormat = BCP_47_REGEX.test(value);\n    if (!isValidFormat) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid BCP-47 standard formatted string. Received: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n}\nexports.GraphQLLocale = new graphql_1.GraphQLScalarType({\n    name: 'Locale',\n    description: 'The locale in the format of a BCP 47 (RFC 5646) standard string',\n    serialize: validate,\n    parseValue: validate,\n    parseLiteral(ast) {\n        if (ast.kind === graphql_1.Kind.STRING) {\n            return validate(ast.value, ast);\n        }\n        throw (0, error_js_1.createGraphQLError)(`Value is not a string. Received: ${ast.kind}`, { nodes: ast });\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'Locale',\n            type: 'string',\n            pattern: BCP_47_REGEX.source,\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,YAAY,GAAG,0eAA0e;AAC/f,SAASC,QAAQA,CAACN,KAAK,EAAEO,GAAG,EAAE;EAC1B,IAAI,CAACP,KAAK,EAAE;IACR,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,0CAAyCR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EACjI;EACA,MAAMC,aAAa,GAAGN,YAAY,CAACO,IAAI,CAACZ,KAAK,CAAC;EAC9C,IAAI,CAACW,aAAa,EAAE;IAChB,MAAM,CAAC,CAAC,EAAEP,UAAU,CAACI,kBAAkB,EAAG,oEAAmER,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC3J;EACA,OAAOV,KAAK;AAChB;AACAD,OAAO,CAACE,aAAa,GAAG,IAAIC,SAAS,CAACW,iBAAiB,CAAC;EACpDC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,iEAAiE;EAC9EC,SAAS,EAAEV,QAAQ;EACnBW,UAAU,EAAEX,QAAQ;EACpBY,YAAYA,CAACX,GAAG,EAAE;IACd,IAAIA,GAAG,CAACY,IAAI,KAAKjB,SAAS,CAACkB,IAAI,CAACC,MAAM,EAAE;MACpC,OAAOf,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;IACnC;IACA,MAAM,CAAC,CAAC,EAAEH,UAAU,CAACI,kBAAkB,EAAG,oCAAmCD,GAAG,CAACY,IAAK,EAAC,EAAE;MAAEV,KAAK,EAAEF;IAAI,CAAC,CAAC;EAC5G,CAAC;EACDe,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE,QAAQ;MACdC,OAAO,EAAEtB,YAAY,CAACuB;IAC1B;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}