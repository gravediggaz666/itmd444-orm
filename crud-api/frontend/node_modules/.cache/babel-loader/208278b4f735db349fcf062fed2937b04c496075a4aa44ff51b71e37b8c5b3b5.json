{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLSESSN = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n// Swedish Personal Number also known as 'personnummer' in swedish:\n// https://www.skatteverket.se/privat/folkbokforing/personnummer.4.3810a01c150939e893f18c29.html\n// Algorithm:\n// https://swedish.identityinfo.net/personalidentitynumber\nconst SESSN_PATTERNS = ['YYYYMMDDXXXX', 'YYMMDDXXXX'];\nfunction _isValidSwedishPersonalNumber(value) {\n  // Remove any non-digit characters\n  const pno = value.replace(/\\D/g, '');\n  // Check if the cleaned number has the correct length (10 or 12 digits)\n  if (pno.length !== 10 && pno.length !== 12) {\n    return false;\n  }\n  // Validate the birthdate\n  if (!_isValidDate(pno)) {\n    return false;\n  }\n  // Check the checksum for numbers\n  if (!_isValidChecksum(pno)) {\n    return false;\n  }\n  // If all checks pass, the personal number is valid\n  return true;\n}\nfunction _isValidDate(pno) {\n  let year;\n  let month;\n  let day;\n  if (pno.length === 10) {\n    year = Number(pno.substring(0, 2));\n    // Adjust the input 'year' to a four-digit year based on the assumption that two-digit years greater than the current year are in the past century (1900s),\n    // while two-digit years less than or equal to the current year are in the current or upcoming century (2000s).\n    year = year > Number(String(new Date().getFullYear()).substring(2)) ? 1900 + year : 2000 + year;\n    month = Number(pno.substring(2, 4));\n    day = Number(pno.substring(4, 6));\n  } else {\n    year = Number(pno.substring(0, 4));\n    month = Number(pno.substring(4, 6));\n    day = Number(pno.substring(6, 8));\n  }\n  const date = new Date(year, month - 1, day);\n  return date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n}\nfunction _isValidChecksum(pno) {\n  const shortPno = pno.length === 12 ? pno.substring(2, 12) : pno;\n  const digits = shortPno.split('').map(Number);\n  let sum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    let digit = digits[i];\n    // Double every second digit from the right\n    if (i % 2 === digits.length % 2) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    sum += digit;\n  }\n  // Check if the sum is a multiple of 10\n  return sum % 10 === 0;\n}\nfunction _checkString(value) {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n  }\n}\nfunction _checkSSN(value) {\n  if (!_isValidSwedishPersonalNumber(value)) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid swedish personal number: ${value}`);\n  }\n}\nexports.GraphQLSESSN = new graphql_1.GraphQLScalarType({\n  name: 'SESSN',\n  description: 'A field whose value conforms to the standard personal number (personnummer) formats for Sweden',\n  serialize(value) {\n    _checkString(value);\n    _checkSSN(value);\n    return value;\n  },\n  parseValue(value) {\n    _checkString(value);\n    _checkSSN(value);\n    return value;\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as swedish personal number but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    if (!_isValidSwedishPersonalNumber(ast.value)) {\n      throw (0, error_js_1.createGraphQLError)(`Value is not a valid swedish personal number: ${ast.value}`, {\n        nodes: ast\n      });\n    }\n    return ast.value;\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'SESSN',\n      oneOf: SESSN_PATTERNS.map(pattern => ({\n        type: 'string',\n        length: pattern.length,\n        pattern\n      }))\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLSESSN","graphql_1","require","error_js_1","SESSN_PATTERNS","_isValidSwedishPersonalNumber","pno","replace","length","_isValidDate","_isValidChecksum","year","month","day","Number","substring","String","Date","getFullYear","date","getMonth","getDate","shortPno","digits","split","map","sum","i","digit","_checkString","createGraphQLError","_checkSSN","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","ast","kind","Kind","STRING","nodes","extensions","codegenScalarType","jsonSchema","title","oneOf","pattern","type"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/ssn/SE.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLSESSN = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../../error.js\");\n// Swedish Personal Number also known as 'personnummer' in swedish:\n// https://www.skatteverket.se/privat/folkbokforing/personnummer.4.3810a01c150939e893f18c29.html\n// Algorithm:\n// https://swedish.identityinfo.net/personalidentitynumber\nconst SESSN_PATTERNS = ['YYYYMMDDXXXX', 'YYMMDDXXXX'];\nfunction _isValidSwedishPersonalNumber(value) {\n    // Remove any non-digit characters\n    const pno = value.replace(/\\D/g, '');\n    // Check if the cleaned number has the correct length (10 or 12 digits)\n    if (pno.length !== 10 && pno.length !== 12) {\n        return false;\n    }\n    // Validate the birthdate\n    if (!_isValidDate(pno)) {\n        return false;\n    }\n    // Check the checksum for numbers\n    if (!_isValidChecksum(pno)) {\n        return false;\n    }\n    // If all checks pass, the personal number is valid\n    return true;\n}\nfunction _isValidDate(pno) {\n    let year;\n    let month;\n    let day;\n    if (pno.length === 10) {\n        year = Number(pno.substring(0, 2));\n        // Adjust the input 'year' to a four-digit year based on the assumption that two-digit years greater than the current year are in the past century (1900s),\n        // while two-digit years less than or equal to the current year are in the current or upcoming century (2000s).\n        year = year > Number(String(new Date().getFullYear()).substring(2)) ? 1900 + year : 2000 + year;\n        month = Number(pno.substring(2, 4));\n        day = Number(pno.substring(4, 6));\n    }\n    else {\n        year = Number(pno.substring(0, 4));\n        month = Number(pno.substring(4, 6));\n        day = Number(pno.substring(6, 8));\n    }\n    const date = new Date(year, month - 1, day);\n    return date.getFullYear() === year && date.getMonth() + 1 === month && date.getDate() === day;\n}\nfunction _isValidChecksum(pno) {\n    const shortPno = pno.length === 12 ? pno.substring(2, 12) : pno;\n    const digits = shortPno.split('').map(Number);\n    let sum = 0;\n    for (let i = 0; i < digits.length; i++) {\n        let digit = digits[i];\n        // Double every second digit from the right\n        if (i % 2 === digits.length % 2) {\n            digit *= 2;\n            if (digit > 9) {\n                digit -= 9;\n            }\n        }\n        sum += digit;\n    }\n    // Check if the sum is a multiple of 10\n    return sum % 10 === 0;\n}\nfunction _checkString(value) {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`);\n    }\n}\nfunction _checkSSN(value) {\n    if (!_isValidSwedishPersonalNumber(value)) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid swedish personal number: ${value}`);\n    }\n}\nexports.GraphQLSESSN = new graphql_1.GraphQLScalarType({\n    name: 'SESSN',\n    description: 'A field whose value conforms to the standard personal number (personnummer) formats for Sweden',\n    serialize(value) {\n        _checkString(value);\n        _checkSSN(value);\n        return value;\n    },\n    parseValue(value) {\n        _checkString(value);\n        _checkSSN(value);\n        return value;\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as swedish personal number but got a: ${ast.kind}`, { nodes: ast });\n        }\n        if (!_isValidSwedishPersonalNumber(ast.value)) {\n            throw (0, error_js_1.createGraphQLError)(`Value is not a valid swedish personal number: ${ast.value}`, {\n                nodes: ast,\n            });\n        }\n        return ast.value;\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'SESSN',\n            oneOf: SESSN_PATTERNS.map((pattern) => ({\n                type: 'string',\n                length: pattern.length,\n                pattern,\n            })),\n        },\n    },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}