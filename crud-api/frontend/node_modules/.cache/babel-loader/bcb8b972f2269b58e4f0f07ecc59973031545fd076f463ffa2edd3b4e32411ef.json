{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLISBN = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst ISBN_REGEX_ARR = [/^(?:ISBN(?:-10)?:? *)?((?=\\d{1,5}([ -]?)\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}[\\dX])$/i, /^(?:ISBN(?:-13)?:? *)?(97(?:8|9)([ -]?)(?=\\d{1,5}\\2?\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}\\d)$/i];\nconst validate = (value, ast) => {\n  if (typeof value !== 'string') {\n    throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  let valid = false;\n  for (const regex of ISBN_REGEX_ARR) {\n    if (regex.test(value)) {\n      valid = true;\n      break;\n    }\n  }\n  if (!valid) {\n    throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISBN number: ${value}`, ast ? {\n      nodes: ast\n    } : undefined);\n  }\n  return value;\n};\nexports.GraphQLISBN = new graphql_1.GraphQLScalarType({\n  name: `ISBN`,\n  description: `A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.`,\n  serialize(value) {\n    return validate(value);\n  },\n  parseValue(value) {\n    return validate(value);\n  },\n  parseLiteral(ast) {\n    if (ast.kind !== graphql_1.Kind.STRING) {\n      throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ISBN numbers but got a: ${ast.kind}`, {\n        nodes: ast\n      });\n    }\n    return validate(ast.value, ast);\n  },\n  extensions: {\n    codegenScalarType: 'string',\n    jsonSchema: {\n      title: 'ISBN',\n      oneOf: ISBN_REGEX_ARR.map(regex => ({\n        type: 'string',\n        pattern: regex.source\n      }))\n    }\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","GraphQLISBN","graphql_1","require","error_js_1","ISBN_REGEX_ARR","validate","ast","createGraphQLError","nodes","undefined","valid","regex","test","GraphQLScalarType","name","description","serialize","parseValue","parseLiteral","kind","Kind","STRING","extensions","codegenScalarType","jsonSchema","title","oneOf","map","type","pattern","source"],"sources":["/Users/snawz1/node_modules/graphql-scalars/cjs/scalars/ISBN.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GraphQLISBN = void 0;\nconst graphql_1 = require(\"graphql\");\nconst error_js_1 = require(\"../error.js\");\nconst ISBN_REGEX_ARR = [\n    /^(?:ISBN(?:-10)?:? *)?((?=\\d{1,5}([ -]?)\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}[\\dX])$/i,\n    /^(?:ISBN(?:-13)?:? *)?(97(?:8|9)([ -]?)(?=\\d{1,5}\\2?\\d{1,7}\\2?\\d{1,6}\\2?\\d)(?:\\d\\2*){9}\\d)$/i,\n];\nconst validate = (value, ast) => {\n    if (typeof value !== 'string') {\n        throw (0, error_js_1.createGraphQLError)(`Value is not string: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    let valid = false;\n    for (const regex of ISBN_REGEX_ARR) {\n        if (regex.test(value)) {\n            valid = true;\n            break;\n        }\n    }\n    if (!valid) {\n        throw (0, error_js_1.createGraphQLError)(`Value is not a valid ISBN number: ${value}`, ast ? { nodes: ast } : undefined);\n    }\n    return value;\n};\nexports.GraphQLISBN = new graphql_1.GraphQLScalarType({\n    name: `ISBN`,\n    description: `A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.`,\n    serialize(value) {\n        return validate(value);\n    },\n    parseValue(value) {\n        return validate(value);\n    },\n    parseLiteral(ast) {\n        if (ast.kind !== graphql_1.Kind.STRING) {\n            throw (0, error_js_1.createGraphQLError)(`Can only validate strings as ISBN numbers but got a: ${ast.kind}`, {\n                nodes: ast,\n            });\n        }\n        return validate(ast.value, ast);\n    },\n    extensions: {\n        codegenScalarType: 'string',\n        jsonSchema: {\n            title: 'ISBN',\n            oneOf: ISBN_REGEX_ARR.map(regex => ({\n                type: 'string',\n                pattern: regex.source,\n            })),\n        },\n    },\n});\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,SAAS,GAAGC,OAAO,CAAC,SAAS,CAAC;AACpC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,cAAc,GAAG,CACnB,qFAAqF,EACrF,8FAA8F,CACjG;AACD,MAAMC,QAAQ,GAAGA,CAACN,KAAK,EAAEO,GAAG,KAAK;EAC7B,IAAI,OAAOP,KAAK,KAAK,QAAQ,EAAE;IAC3B,MAAM,CAAC,CAAC,EAAEI,UAAU,CAACI,kBAAkB,EAAG,wBAAuBR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC/G;EACA,IAAIC,KAAK,GAAG,KAAK;EACjB,KAAK,MAAMC,KAAK,IAAIP,cAAc,EAAE;IAChC,IAAIO,KAAK,CAACC,IAAI,CAACb,KAAK,CAAC,EAAE;MACnBW,KAAK,GAAG,IAAI;MACZ;IACJ;EACJ;EACA,IAAI,CAACA,KAAK,EAAE;IACR,MAAM,CAAC,CAAC,EAAEP,UAAU,CAACI,kBAAkB,EAAG,qCAAoCR,KAAM,EAAC,EAAEO,GAAG,GAAG;MAAEE,KAAK,EAAEF;IAAI,CAAC,GAAGG,SAAS,CAAC;EAC5H;EACA,OAAOV,KAAK;AAChB,CAAC;AACDD,OAAO,CAACE,WAAW,GAAG,IAAIC,SAAS,CAACY,iBAAiB,CAAC;EAClDC,IAAI,EAAG,MAAK;EACZC,WAAW,EAAG,uHAAsH;EACpIC,SAASA,CAACjB,KAAK,EAAE;IACb,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDkB,UAAUA,CAAClB,KAAK,EAAE;IACd,OAAOM,QAAQ,CAACN,KAAK,CAAC;EAC1B,CAAC;EACDmB,YAAYA,CAACZ,GAAG,EAAE;IACd,IAAIA,GAAG,CAACa,IAAI,KAAKlB,SAAS,CAACmB,IAAI,CAACC,MAAM,EAAE;MACpC,MAAM,CAAC,CAAC,EAAElB,UAAU,CAACI,kBAAkB,EAAG,wDAAuDD,GAAG,CAACa,IAAK,EAAC,EAAE;QACzGX,KAAK,EAAEF;MACX,CAAC,CAAC;IACN;IACA,OAAOD,QAAQ,CAACC,GAAG,CAACP,KAAK,EAAEO,GAAG,CAAC;EACnC,CAAC;EACDgB,UAAU,EAAE;IACRC,iBAAiB,EAAE,QAAQ;IAC3BC,UAAU,EAAE;MACRC,KAAK,EAAE,MAAM;MACbC,KAAK,EAAEtB,cAAc,CAACuB,GAAG,CAAChB,KAAK,KAAK;QAChCiB,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAElB,KAAK,CAACmB;MACnB,CAAC,CAAC;IACN;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}